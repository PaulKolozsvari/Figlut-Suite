<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PsionTeklogixNet</name>
    </assembly>
    <members>
        <member name="T:PsionTeklogix.Peripherals.AdapterEvent">
            <summary>
            Summary description for AdapterEvent.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Peripherals.AdapterEvent.AdapterValue">
            <summary>
            The value that is returned from Docking or Tether port driver.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.EntryWindow">
            <summary>
            Window message handler for monitoring connection status changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.EntryWindow.#ctor(PsionTeklogix.RAS.Entry)">
            <summary>
            Creates an instance of the Entry Window class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:PsionTeklogix.RAS.EntryWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with the RAS dialup connection.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriverWindow">
            <summary>
            Window message handler for monitoring Scanner Services messages.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriverWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with Scanner Services.
            </summary>
            <param name="msg">Windows message</param>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver">
            <summary>
            The ScannerServicesDriver class implements a driver for the Scanner Service 
            used in our terminals.
            </summary>
            <remarks>
            <p>Note that not all the properties of the Scanner Services have been implemented. 
            This is due to the fact that some of these properties will probably be implemented
            programatically. If you require the use of the additional properties then
            refer to the Scanner Services Programming Guide and use the SetProperty method to
            implement the custom property.</p>
            <p> The ApplySettingChanges method now must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScannerDriverBase">
            <summary>
            An interface that all Scanner drivers have to implement.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerDriverBase.Scan">
            <summary>
            The Scan method will initate a software scan.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScannerDriverBase.Scanner">
            <summary>
            Gets/Sets a reference to the Scanner instance.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerDriverBase.Device">
            <summary>
            Gets/Sets the device the scanner is connected to.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerDriverBase.Enabled">
            <summary>
            Gets/Sets the current scanner status.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.#ctor">
            <summary>
            Creates an instance of  ScannerServicesDriver
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SetProperty(System.String,System.Object)">
            <summary>
            Set custom scanner property.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            <p>Possible property names can be retrieved by GetSettingName() iterating from
            0 to TotalSettingCount-1.</p>
            </remarks>
            <param name="parameter">Name of property.</param>
            <param name="value">Value that custom propety will be set to.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to pass
            command to scanner driver.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.GetProperty(System.String)">
            <summary>
            Get custom scanner property.
            </summary>
            <remarks>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            <p>Possible property names can be retrieved by GetSettingName() iterating from
            0 to TotalSettingCount-1.</p> 
            </remarks>
            <param name="parameter">Name of property.</param>
            <returns>Value of property returned or null if not set.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to 
            pass command to scanner driver.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ApplySettingChanges">
            <summary>
            Apply the setting changes that were made by SetProperty calls. 
            </summary>
            <remarks>
            The setting changes made by the SetProperty method will not take effect until 
            this method is called, or the device is rebooted.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.DisableScanners">
            <summary>
            Disables all scanners integrated in the device. This is done thorugh Scanner Services.
            </summary>
            <returns>
            If successful, returns true. Otherwise returns, false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.EnableScanners">
            <summary>
            Enables all scanners integrated in the device . This is done
            through Scanner Services.
            </summary>
            <returns>
            If successful returns true, otherwise returns false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Register">
            <summary>
            Registers ScannerServicesDriver with ScannerServices. This will allow 
            for the Scanner data to be retrieved.
            </summary>
            <returns>
            If successful it returns true, otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Deregister">
            <summary>
            Un-Registers ScannerServicesDriver with ScannerServices.
            </summary>
            <returns>
            If successfull, returns true otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Scan">
            <summary>
            Called when a scan has been requested.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to register
            for scanner device driver notifications.</exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.OnScanComplete(System.Int32,System.Byte[],System.String)">
            <summary>
            Called when a scan has completed. Pass data on to parent Scanner.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Dispose">
            <summary>
            Explicitly release resources and cleanup.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Close">
            <summary>
            Synonym for Dispose()
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Dispose(System.Boolean)">
            <summary>
            Do the work of disposing managed objects and freeing Win32 resources
            </summary>
            <param name="disposing">true if explicitly called by user code.
            false if implicitly called by garbage collector.</param>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Finalize">
            <summary>
            Finalization code called implicitly by garbage collector.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.GetSettingName(System.Int32)">
            <summary>
            Gets the name of the scanner setting based on the index.
            </summary>
            <param name="settingIndex">
            An integer that represents an index of a setting.
            </param>
            <returns>
            A scanner setting name based on the index, represented as a string.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to obatain
            name of the scanner property based on its index.</exception>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Device">
            <summary>
            The Device property allows applications to determine the name of the driver 
            the object is controlling. This property cannot be changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.IsScannerPresent">
            <summary>
            Used to determine if one or more barcode scanners are present on the target 
            device.
            </summary>
            <returns>
            true if one or more scanners are present on the current device; false otherwise.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.ExternalScannerType">
             <summary>
             Returns the name of the external scanner found on the target Psion Teklogix device.
             </summary>
             <remarks>
             <p>Valid scanner names include:
              * No external scanner
              * Non-decoded scanner
              * Serial scanner
            
             Other values may be reported in the future.</p>
             </remarks>
             <returns>The name of the external scanner present, or "No external scanner" if the
              device does not currently have an attached external scanner. 
             </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.InternalScannerType">
             <summary>
              Returns the name of the internal scanner found on the target Psion Teklogix device.
             </summary>
             <remarks>
             <p>Valid scanner names include:
              * Not configured
              * No internal scanner
              * Symbol 1200 HP
              * Symbol 1200 LR
              * Symbol 1200 ALR
              * Symbol 1200 WA
              * Symbol 1223 HP
              * Symbol 1223 LR
              * Symbol 1223 ALR
              * Symbol 1223 WA
              * Symbol 1224 HP
              * Symbol 1524 ER
              * Symbol 2223
              * Symagery SX4000 (ST)
              * Symagery SX4000 (ULR)
              * Symagery SX4000 (UHD)
              * Symagery SX5303 (ST)
              * Symagery SX5303 (ULR)
              * Symagery SX5303 (UHD)
              * Rfid Sirit OEM 186
              * Rfid Sirit OEM 187
              * Symbol 923 HP
              * HHP IT4080
              * Symagery ImagePak 5390
              * Unknown type 
            
             Other values may be reported in the future.</p>
             </remarks>
             <returns> The name of the internal scanner present, or "No internal scanner" if the
              device does not currently have an internal scanner. or "Not configured" if the
              device has not yet been configured to report a particular scanner type.
             </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.IsSupported">
            <summary>
            Determines whether or not this device supports barcode scanning.
            </summary>
            <remarks>
            The fact that the Scanner class is supported does not imply that a barcode 
            scanner is actually present (see the isScannerPresent method).
            </remarks>
            <returns>
            true if this device has scanner support; false otherwise.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.Enabled">
            <summary>
            Gets/Sets whether the scanner driver is being enabled/disabled.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SendDoubleClickDataAsScannerData">
            <summary>
            A double-click is caused by a user quickly pressing and releasing the trigger 
            or scan button twice, or pressing and releasing the trigger or scan button and 
            then pressing and holding it down. If this property is set to true, the double-
            click data configured in the Teklogix Scanners control panel will be sent to
            the application as scanner data. If the property is set to false, the data 
            will be sent to the application as a double-click event.
            </summary>
            <remarks>
            <p>If the configured double-click time is zero, or the double-click data is set
            to zero, double-click events will not be generated.</p>
            <p> The ApplySettingChanges method must be called in order to force the
            scanner configuration changes to take effect.</p>
            </remarks>        
        </member>
        <member name="P:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.TotalSettingsCount">
            <summary>
            Gets total number of settings available for the particular scanner.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown when unable to obtain number
            of scanner properties.</exception>       
        </member>
        <member name="T:PsionTeklogix.WLAN.Infrastructure">
            \deprecated (2009)
            <summary>
            Deprecated - Use WLanEx instead. The infrastructure mode determines how the network adapter connects to the 
            wireless network
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Infrastructure.AdHoc">
            <summary>
            In this mode, wireless devices communicate directly with each other. All
            wireless devices within range of each other discover and
            communicate in peer-to-peer fashion without involving a central access point
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Infrastructure.AccessPoint">
            <summary>
            In this mode, wireless devices communicates with an access point which acts as 
            a central transmitter and receiver of radio signals.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Infrastructure.Unknown">
            Unknown Infrastructure type
        </member>
        <member name="T:PsionTeklogix.WLAN.Authentication">
            \deprecated (2009)
            <summary>
            Deprecated - Use WLanEx instead. The authentication mode controls how a wireless device can be authenticated to 
            join a wireless network.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.Open">
            <summary>
            Specifies IEEE802.11 Open System authentication mode. No authentication check
            is performed
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.Shared">
            <summary>
            In this mode, A pre-shared WEP key is required for the authentication
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.NetworkEAP">
            <summary>
            CCX (Cisco Certified Extension)
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Authentication.Unknown">
            Unknown Authentication type
        </member>
        <member name="T:PsionTeklogix.WLAN.Encryption">
            \deprecated (2009)
            <summary>
            Deprecated - Use WLanEx instead. This mode specifies the type of encryption algorithm used for data transmission
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.None">
            <summary>
            Data encryption is disabled
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WEP_Manual">
            <summary>
            WEP enabled;WEP keys are entered manually
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WEP_Auto">
            <summary>
            WEP enabled;WEP keys are automatically obtained
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_PSK">
            <summary>
            WPA Personal
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_TKIP">
            <summary>
            WPA Enterprise
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_PSK">
            <summary>
            WPA2 Personal
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_AES">
            <summary>
            WPA2 Enterprise
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.CCKM_TKIP">
            <summary>
            TKIP with key generated during EAP authentication and with Cisco key 
            management protocol for fast reauthentication 
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.CKIP_Manual">
            <summary>
            WEP with up to four static keys-- 40-bit or 128-bit in ASCII or hex -- 
            defined under WEP/PSK Keys, plus Cisco TKIP and/or Cisco MIC if 
            configured on AP 
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.CKIP_Auto">
            <summary>               
            WEP with key generated during EAP authentication, plus Cisco TKIP and/or 
            Cisco MIC if configured on AP
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_PSK_TKIP">
            <summary>
            WPA-PSK with TKIP
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA_PSK_AES">
            <summary>
            WPA-PSK with AES
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_PSK_TKIP">
            <summary>
            WPA2-PSK with TKIP
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.WPA2_PSK_AES">
            <summary>
            WPA2-PSK with AES
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.Encryption.Unknown">
            Unknown Encryption type
        </member>
        <member name="T:PsionTeklogix.WLAN.EAP">
            \deprecated (2009)
            <summary>
            Deprecated - Use WLanEx instead. This mode specifies the type of Extensible Authentication Protocol (EAP> used by a
            802.1x enabled wireless network
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.None">
            <summary>
            EAP is not used for authentication
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.MD5">
            <summary>        
            EAP MD5
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.PEAP_MCHAP">
            <summary>
            PEAPv0 method;widely used as Microsoft has added native support to Windows OS
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.PEAP_GTC">
            <summary>
            PEAPv1 method; no native support for this EAP protocol; supported by the Cisco
            CCX extensions program
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.EAP_TLS">
            <summary>
            Natively supported by Windows OS; requires a client-side digital certificate
            located on the client’s hard drive or a smartcard.
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.LEAP">
            <summary>
            The Lightweight Extensible Authentication Protocol (LEAP); a proprietary EAP
            method developed by Cisco Systems
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.EAP_FAST">
            <summary>
            Flexible Authentication via Secure Tunneling; a proprietary EAP
            method developed by Cisco Systems
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.EAP.Unknown">
            Unknown EAP type
        </member>
        <member name="T:PsionTeklogix.WLAN.RadioMode">
            \deprecated (2009)
            This enumeration specifies the supported types of 802.11 protocol 
        </member>
        <member name="F:PsionTeklogix.WLAN.RadioMode.RadioMode_80211b">
            <summary>
            denotes IEEE 802.11b protocol which supports raw data rate of 5.5 and 11 mbps
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.RadioMode.RadioMode_80211bg">
            <summary>
            denotes IEEE 802.11b protocol which supports raw data rate 5.5,11 and 54 mbps
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.RadioMode.RadioMode_80211g">
            <summary>
            denotes IEEE 802.11b protocol which supports raw data rate of 54 mbps
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.WEPKeyLength">
            \deprecated (2009)
            Defines valid length of WEP keys
        </member>
        <member name="F:PsionTeklogix.WLAN.WEPKeyLength.None">
            <summary>
            WEP key has not been defined
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.WEPKeyLength.WEPKeyLength_40Bit">
            <summary>
            length of a 40 bit WEP key
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.WEPKeyLength.WEPKeyLength_128Bit">
            <summary>
            length a 128 bit WEP key
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.BitRate">
            \deprecated (2009)
            Possible values of preferrable bit rate of radio
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.Auto">
            <summary>
            Bit rate is set by the driver automatically
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_1Mbps">
            <summary>
            1 megabit per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_2Mbps">
            <summary>
            2 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_5_5Mbps">
            <summary>
            5.5 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_6Mbps">
            <summary>
            6 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_9Mbps">
            <summary>
            9 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_11Mbps">
            <summary>
            11 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_12Mbps">
            <summary>
            12 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_18Mbps">
            <summary>
            18 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_24Mbps">
            <summary>
            24 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_36Mbps">
            <summary>
            36 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_48Mbps">
            <summary>
            48 megabits per second
            </summary>
        </member>
        <member name="F:PsionTeklogix.WLAN.BitRate.BitRate_54Mbps">
            <summary>
            54 megabits per second
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.Configuration">
            \deprecated (2009)
            <summary>
            Deprecated - Use WLanEx instead. This class encapsulates data describing 
            how to 
            connect to a specific wireless
            network.
            </summary>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.#ctor">
            \deprecated (2009)
            <summary>
            Default Constuctor
            </summary>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.#ctor(PsionTeklogix.WLAN.DiscoveredNetwork)">
            \deprecated (2009)
            <summary>
            Constuctor for copying information from a DiscoveredNetwork object
            </summary>
            <param name="network">
            a DiscoveredNetwork object obtained from GetAvailableNetworks
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.SetWEPKey(System.Int32,System.String)">
            \deprecated (2009)
            <summary>
            Sets WEP key used for data encryption. Up to 4 keys can be stored in memory.
            Please note that WEP keys are only used when encryption is set to 
            Encryption_WEP_Manual. 
            </summary>
            <param name="index">
            index of WEP key.  Valid values are 1,2,3 and 4.
            </param>
            <param name="key">
            String representation of WEP key. Length of this string will determine the
            size of the encryption key:
            5-characters ascii string or 10-characters hex string will yield a 40-bit
            encryption key. (For example, ascii string "abcde" or hex string 
            "3132333435") 10-characters ascii string or 26-characters hex string will 
            yield a 128-bit encryption key
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.Configuration.GetWEPKeyLength(System.Int32)">
            \deprecated (2009)
            <summary>
            Retrieve length of WEP Key of this configuration. Values returned by 
            non-Summit radios are undefined
            </summary>
            <param name="index">
            index of WEP key.  Valid values are 1,2,3 and 4.
            </param>                               
            <exception cref="T:System.ApplicationException">if index is invalid
            </exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.Authentication">
            \deprecated (2009)
            <summary>
            retrieve the current 802.11 authentication mode
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.Encryption">
            \deprecated (2009)
            <summary>
            retrieve the current data encryption method for data transmission
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.EAP">
            \deprecated (2009)
            <summary>
            the type of EAP used for security
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.SSID">
            \deprecated (2009)
            <summary>
            SSID of the wireless network to be connected to.
            
            </summary>
            <example>
            <code>
            config.SSID = Encoding.UTF8.GetBytes("adam2");
            </code>
            </example>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.Infrastructure">
            \deprecated (2009)
            <summary>
            This parameter specifies if a wireless device should be connected to other
            wireless devices as peers or connected to an access point
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.PSK">
            \deprecated (2009)
            <summary>
            Pre-shared key for data encryption and authentication
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.WEPKeyIndex">
            \deprecated (2009)
            <summary>
            Index of WEP key used for data encryption
            </summary>
            <exception cref="T:System.ApplicationException">if index is invalid
            </exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.UserName">
            \deprecated (2009)
            <summary>
            User name used for EAP authentication
            </summary>
            <exception cref="T:System.ArgumentException">if user password is invalid
            </exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.Configuration.UserPassword">
            \deprecated (2009)
            <summary>
            User password used for EAP authentication
            </summary>
            <exception cref="T:System.ArgumentException">if user password is invalid
            </exception>
        </member>
        <member name="T:PsionTeklogix.WLAN.ConnectionState">
            \deprecated (2009)
            <summary>
            This class contains a snapshot of information about the current wireless
            connection.  The snapshot is created by calling 
            NetworkAdapter.GetCurrentConnection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.Infrastructure">
            \deprecated (2009)
            <summary>
            the current infrastructure mode
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.Encryption">
            \deprecated (2009)
            <summary>
            the current data encryption method for data transmission
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.SignalStrength">
            \deprecated (2009)
            <summary>
            Received Signal Strength Indication(RSSI) measured in dBm.
            A perfect-signal is represented by -10. A no-signal is represented by -200.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.ChannelFrequency">
            \deprecated (2009)
            <summary>
            frequency of the selected channel in MHz
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.SSID">
            \deprecated (2009)
            <summary>
            SSID of the wireless network that the network adapter is currently connected 
            to. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.AccessPointMAC">
            \deprecated (2009)
            <summary>
            MAC address of the access point that the wireless network adapter is 
            currently connected to. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.DataRate">
            \deprecated (2009)
            <summary>
            maximum link speed of the radio in units of kbps. 
            </summary>        
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.FrameSize">
            \deprecated (2009)
            <summary>
            maximum supported network packet size in unit of bytes
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.PacketsIn">
            \deprecated (2009)
            <summary>
            number of frames that the radio has received without errors
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.PacketsOut">
            \deprecated (2009)
            <summary>
            number of frames that the radio has transmitted without errors
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.InErrors">
            \deprecated (2009)
            <summary>
            Retrieves the number of frames received but not passed to the protocols due to 
            errors.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.ConnectionState.OutErrors">
            \deprecated (2009)
            <summary>
            number of frames that the radio has failed to transmit
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.DiscoveredNetwork">
            \deprecated (2009)
            <summary>
            This class describes an advertised wireless network.
            </summary>
            <remarks>
            Call NetworkAdapter.GetAvailableNetworks to retrieve a list of networks. In order
            to connect to one of these networks, pass the ssid in a saved Configuration object
            to NetworkAdapter.Connect.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.SSID">
            \deprecated (2009)
            <summary>
            the SSID broadcasted by this wireless network
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.Infrastructure">
            \deprecated (2009)
            <summary>
            the infrastructure mode currently in use
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.Authentication">
            \deprecated (2009)
            <summary>
            the authentication mode of this wireless network
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.Encryption">
            \deprecated (2009)
            <summary>
            the encryption mode of this wireless network
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.ChannelFrequency">
            \deprecated (2009)
            <summary>
            frequency of radio in use, in MHz
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.SignalStrength">
            \deprecated (2009)
            <summary>
            Received Signal Strength Indication in dBm
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.DiscoveredNetwork.MACAddress">
            \deprecated (2009)
            <summary>
            MAC Address of Access Point
            </summary>
        </member>
        <member name="T:PsionTeklogix.WLAN.NetworkAdapter">
            \deprecated (2009)
            <summary>
            This class represents the wireless interface (radio) which connects this mobile
            device to wireless networks.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralDevice">
            class PeripheralDevice
            <summary>
            The PeripheralDevice class is designed to encapsulte different peripheral devices
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.#ctor">
            Constructor
            <summary>
            The PeripheralDevice class is designed to encapsulte different peripheral devices
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.#ctor(System.Int32)">
             Constructor
             <summary>
             The PeripheralDevice class is designed to encapsulte different peripheral devices
             </summary>
            <param> peripheralType = "type of peripheral device" </param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.GetBoolSetting(System.Int32)">
            GetBoolSetting
            <summary>retrieve value of specified setting</summary>
            <param> peripheralType = "type of peripheral device" </param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.PeripheralDevice.SetBoolSetting(System.Int32,System.Boolean)">
            SetBoolSetting
            <summary>set value for setting specified</summary>
            <param> setting= "setting to set" </param>
            <param>value="value to set"</param>
        </member>
        <member name="P:PsionTeklogix.Peripherals.PeripheralDevice.PowerMode">
            <summary>power mode of this peripheral device</summary>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.#ctor">
            \deprecated (2009)
            <summary>
            Constructor
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.ToString">
            \deprecated (2009)
            <summary>
            a string representation of the network adapter
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetConnectToAllNetworksEnabled">
            \deprecated (2009)
            <summary>
            Determines if the network adapter is allowed to connect to all networks.         
            </summary>
            <returns>
            returns true if the network adapter is allowed to connect to all networks, 
            even if the individual network does not match the currently active 
            configuration; returns false if the network adapter is only allowed to connect 
            to networks with matched criteria stored in the saved configurations
            </returns>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.SetConnectToAllNetworksEnabled(System.Boolean)">
            \deprecated (2009)
            <summary>
            Enable/Disable connecting to all networks
            </summary>
            <param name="enable">
            when true, the network adapter is allowed to connect to all networks;
            when false, the network adapter is only allowed to connect to networks with
            matched criteria stored in the saved configurations
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetAvailableNetworks">
            \deprecated (2009)
            <summary>
            Retrieve all the wireless networks in range
            </summary>
            <returns>
            a list of all of the wireless networks in range
            </returns>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.Connect(System.Byte[])">
            \deprecated (2009)
            <summary>
            Submit a request to the network adapter to connect to a wireless network 
            </summary>
            <param name="aSSID">
             SSID of a network to be connected to
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetCurrentConnection">
            \deprecated (2009)
            <summary>
            retrieve information of the current network connection 
            </summary>
            <returns>
            current ConnectionState object if connected; null if the network adapter is
            not associated with any wireless network
            </returns>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.GetAllConfigurations">
            \deprecated (2009)
            <summary>
            Retrieve all the static configurations
            </summary>
            <returns>
            An array of Configurations.  Please note that this array can contain zero 
            elements when returned.
            </returns>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.SaveConfiguration(PsionTeklogix.WLAN.Configuration)">
            \deprecated (2009)
            <summary>
            Add the given configuration to the static configuration list
            </summary>
            <param name="config">Configuration object to be added</param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.RemoveConfiguration(System.Byte[])">
            \deprecated (2009)
            <summary>
            Remove the specified configuration from the static configuration list.  
            </summary>
            <param name="aSSID">
             SSID of a network to be connected to
            </param>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.RemoveAllConfigurations">
            \deprecated (2009)
            <summary>
            Remove all the configurations stored in the static configuration list
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.PowerOn">
            \deprecated (2009)
            <summary>
            Power on the wlan radio.  This function will look for a builtin wlan radio first
            if found, it will turn it on.  If a builtin radio is not found it will assume that
            the wlan radio is in a CF slot and turn on the power to the cf slot.  By default
            we assume CF slot 0.  See SetCfSlot() to change this default value.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.PowerOff">
            \deprecated (2009)
            <summary>
            Power off the wlan radio.  This function will look for a builtin wlan radio first
            if found, it will turn it off.  If a builtin radio is not found it will assume that
            the wlan radio is in a CF slot and turn off the power to the cf slot.  By default
            we assume CF slot 0.  See SetCfSlot() to change this default value.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.WLAN.NetworkAdapter.SetCfSlot(System.Int32)">
            \deprecated (2009)
            <summary>
            Set the CF slot where the radio is located. By default we assume it is in slot 0
            See PowerOff() and PowerOn() to see how this value is used.
            </summary>
        </member>
        <member name="P:PsionTeklogix.WLAN.NetworkAdapter.TransmitPower">
            \deprecated (2009)
            <summary>
            Transmit power of radio, in percent.  Please note that the input is subject to
            rounding for driver compatibility.
            Supported for Summit Radio only
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.NetworkAdapter.BitRate">
            \deprecated (2009)
            <summary>
            Bit rate of radio. Supported for Summit Radio only.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="P:PsionTeklogix.WLAN.NetworkAdapter.RadioMode">
            \deprecated (2009)
            <summary>
            Type of 802.11 protocol used by the radio . Supported for Summit Radio only
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.Orientations">
            @deprecated 
            Please use PsionTeklogix.Dispay.Orientation.Orientations instead.
            <summary> Possible screen orientations.</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient0Degrees">
            <summary> Portrait</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient90Degrees">
            <summary> Landscape</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient180Degrees">
            <summary> Inverted portrait.</summary>
        </member>
        <member name="F:PsionTeklogix.Windows.Forms.Orientations.Orient270Degrees">
            <summary> Inverted landscape.</summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.OrientationChangedEventHandler">
            @deprecated (2011)
            Please use PsionTeklogix.Dispay.Orientation.OrientationChangedEventHandler instead.
            <summary>
            Deprecated - See Display Namespace instead. The OrientationChangedEventHander 
            delegate represents the method that will be called
            when the orientation is changed by another program or section of a program's code.
            This allows a form or some other visual component to re-orient based on the new
            screen orientation.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.Screen">
            @deprecated (2011) Please use PsionTeklogix.Dispay.Orientation instead.
            <summary>
            Deprecated - See Display Namespace instead. Allows an application to determine 
            the properties of a Psion Teklogix device's
            display such as the current orientation, whether screen orientation changes are 
            supported, and if the device has a touch screen.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.#cctor">
            <summary>
            Initializes static members of the screen class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.#ctor">
            <summary>
            Creates an instance of the screen class. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.OnOrientationChanged">
            <summary>
            Overridable member that is called when the orientation is 
            being changed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.Screen.IsTouchScreen">
            @deprecated (2011)
            <summary>
            Deprecated - See Display Namespace instead. Detects whether touch screen 
            is supported or not.
            </summary>
            <remarks>
             This method is deprecated.
             Get PsionTeklogix.SystemPTX.Touchscreen.Enable property instead.
            </remarks>        
            <returns>
            If Touch Screen supported, returns true, otherwise false.
            </returns>
        </member>
        <member name="E:PsionTeklogix.Windows.Forms.Screen.OrientationChangedEvent">
            <summary>
            Occurs when the screen orientation has changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.Screen.CurrentOrientation">
            <summary>
            Gets or Sets the current screen rotation. Once the screen has been rotated
            the SIP and desktop will be informed that the screen has been rotated.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.Screen.IsRotationSupported">
            <summary>
            Gets an indicator if screen rotation is supported.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerEvent">
            <summary>   
             Contains the data associated with a trigger event.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerUp">
            <summary> Indicates that a trigger was released. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerDown">
            <summary> Indicates that a trigger was pressed. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerUpDownMask">
            <summary> A mask for up/down events. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerSingleClick">
            <summary> Indicates that a trigger was quickly pressed and released.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerEvent.TriggerDoubleClick">
            <summary> Indicates that a trigger was quickly pressed and released, then pressed
            again.</summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerEvent.#ctor(System.UInt32,System.UInt32)">
            <summary>   
             Trigger event constructor.
            </summary>
            <param name="id">The source of the trigger event.</param>
            <param name="flags">The event information.</param>
        </member>
        <member name="P:PsionTeklogix.Trigger.TriggerEvent.SourceId">
            <summary> The source of the trigger event</summary>
        </member>
        <member name="P:PsionTeklogix.Trigger.TriggerEvent.EventFlags">
            <summary> 
            The event information (trigger up/down, and single/double click information)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerEventHandler">
            <summary>
            Trigger events delegate.
            </summary>        
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerControl">
             <summary>   
             The TriggerControl class used to manage the trigger on Psion Teklogix device.
             </summary>   
             <remarks>
             <p> The TriggerControl class allows applications to:
             * Register to receive trigger events.
             * Register clients that can then be sent trigger events.
             * Change the double-click time for a source.
             * Change the double-click time for all sources.
             * Request a list of registered consumers.
             * Request a list of consumers associated with a trigger source.
             * Create, modify, or remove the associations (mappings) for a trigger source.
             </p>
            
             <p>Using the operations listed above, an application can use the TriggerControl 
             class to perform various operations, including:
             
             * Allowing the scan buttons and pistol trigger to perform application-specific
               operations, or operations not performed by default. For example, on a device
               with an external RFID reader and an internal imager, an application could 
               configure the Imager to use the pistol grip trigger, and the scan button to
               perform RFID operations.
             * Preventing various hardware components (an internal scanner for example)
               from receiving trigger presses during certain application operations.
             * Intercepting trigger events, in order to perform some application-defined
               operation.
             * Generating fake trigger events.
             * "Listen" for trigger events sent to a particular hardware component, such
               as an internal imager, in order to display a message/indication.
             </p>
            
             <p>A trigger event is an event generated when the state of the trigger changes
             on a Psion Teklogix device. The trigger can be in one of two states: up or down.
             A trigger down event is be generated when the trigger (the scan button for
             example) is pressed, and a trigger up event when the button is released.</p>
            
             <p>A trigger event received by an EventListener can also have other flags set, the
             single- and double-click event flags. A double-click event occurs when the user
             quickly presses and releases a trigger twice in a row. A single-click event 
             occurs when the user quickly presses and releases the trigger once, and occurs
             as part of a double-click event. In order to receive single- and double-click
             flags in trigger event structures, the following conditions must be met:
             
             * The double-click time must be set to be greater than 0.
             * The user must press and release the trigger with half of the configured
               double-click time, which will generate a single-click event.
             * The user must press the trigger within the configured double-click time.
               Doing so will generate a trigger down event with the double-click flag
               set.
             * If the user releases the trigger within the configured double-click time,
               trigger up event with the double-click flag set will be generated.
             </p>
             
             <p>A trigger source is simply that: the source of a trigger event. There are a
             variety of possible trigger sources, including: the pistol grip trigger, the
             yellow scan button(s) found on most Psion Teklogix devices, and other keyboard
             buttons. New trigger sources can also be defined.</p>
            
             <p>Trigger sources are identified by trigger source IDs. A trigger source ID is an
             arbitrary integer value that represents the trigger source. For example, 0 is
             default trigger source ID - it is sent by the 753x's grip trigger and by the
             scan buttons on all Psion Teklogix devices. The trigger source ID of the scan
             button(s) can be changed using the keyboard scancode remapping API, and other
             keyboard buttons can also be mapped to trigger source IDs. An application could,
             for example, map the F1 through F6 buttons to trigger source IDs 1-6, 
             respectively.</p>
            
             <p>A trigger consumer is an application, driver, or service that registers to 
             receive (or "consume") trigger events. A trigger consumer is identified by its
             name, a text string.</p>
            
             <p>A trigger association or mapping is an association between a trigger source and
             trigger consumer. Only trigger consumers associated or mapped to a trigger source
             will receive trigger events from that source. More than one consumer can register 
             to receive events from a trigger source at a time, although this behaviour is 
             not recommended. Some trigger consumers represent drivers for hardware components 
             that should not be operating simultaneously due to their power requirements, 
             such as an internal imager and a tethered RFID device.</p>
            
             <p>The following example demonstrates how to use the TriggerControl class to 
             temporarily take control of the default trigger source, without affecting
             existing mappings [i.e., the original mappings will be restored once the program
             terminates].</p>
             </remarks>
            
             <example>
                The code below demostrates how to register a consumer, assign control of the
              default trigger source to it, and register to receive trigger events from the
              trigger source. The code then simulates two trigger presses, with a short delay
              between the trigger press/release.
             
             <code>
                try
                {
                    using (TriggerControl tc = new TriggerControl())
                    {
                        tc.Initialize();
                        tc.RegisterConsumer("TestConsumer");
                        tc.AddMapping(0, "TestConsumer", 
                            TriggerControl.Flags.Override | TriggerControl.Flags.Temporary);
                        tc.RegisterForEvents("TestConsumer");
            
                        tc.triggerEvent += new TriggerEventHandler(OnTriggerEvent);
            
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerDown));
                        Thread.Sleep(100);
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerUp));
                        Thread.Sleep(100);
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerDown));
                        Thread.Sleep(100);
                        tc.PublishEvent(new TriggerEvent(10, TriggerEvent.TriggerUp));
            
                        /// ... other operations here ...
            
                        tc.triggerEvent -= new TriggerEventHandler(OnTriggerEvent);
                        tc.RemoveMapping(0, "TestConsumer");
                        tc.DeregisterConsumer("TestConsumer");
                        tc.DeregisterFromEvents("TestConsumer");
                    }
                }
                catch( Exception ) 
                {
                    // ... some operation here ...
                }
            
                private void OnTriggerEvent( Object source, TriggerEvent evt )
                {
                    // ... some operation here ...
                }
             </code>
             
               The code below demonstrate a trigger mapping to F2 key. It will fire the
               Imager scanner and call OnTriggerEvent each time user press F2 key.
             
             <code>
               using PsionTeklogix.Keyboard;
               using PsionTeklogix.Trigger;
             
               KeyRemapper remapper;
               TriggerControl tc;
             
               try
               {
                    remapper = new KeyRemapper();
                    remapper.RemoveAll();
                    remapper.Add(Keyboard.TranslateToScanCode(Key.F2), null, 
                                 Function.FunctionTrigger, (int)Key.F2);
            
                    tc = new TriggerControl();
                    tc.Initialize();
                    tc.AddMapping(Keyboard.TranslateToTriggerID(Key.F2), "Imager", 
                                  TriggerControl.Flags.WantsTriggerEvents | 
                                  TriggerControl.Flags.Override);
                    tc.RegisterForEvents("Imager");
                    tc.triggerEvent += new TriggerEventHandler(OnTriggerEvent);
                }
                catch (TriggerException exp)
                {
                    MessageBox.Show("Trigger Exception Caught:" + exp.Message);
                }
                catch (Exception exp)
                {
                    MessageBox.Show("Exception Caught:" + exp.Message);
                }
             
                private void OnTriggerEvent( Object source, TriggerEvent evt )
                {
                    // handle trigger event here
                }    
              </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.#ctor">
            <summary>   
            Used to create an instance of the TriggerControl class.
            </summary>
            <exception cref="T:System.OutOfMemoryException">OutOfMemoryException - If an internal 
            memory allocation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.TriggerApiNotFound - if the TriggerApi DLL was not found.
              If this error occurs, it is likely that the device image is too old and
              will need to be updated.
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Finalize">
            <summary>   
            Used to finalize an instance of the TriggerControl class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Dispose(System.Boolean)">
            <summary>   
            Releases resources used by this TriggerControl object.
            </summary>
            <param name="disposeManaged">true to release both managed and unmanaged 
             resources; false to release only unmanaged resources.</param> 
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Dispose">
            <summary>   
            Releases resources used by this TriggerControl object.
            </summary>
            <remarks>
            Call Dispose when you are finished using the TriggerControl object. The
            Dispose method leaves the object in an unusable state.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.Initialize">
            <summary>   
            ** Deprecated - Constructor takes care of initalization **
            </summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RegisterForEvents(System.String)">
            <summary>   
             Registers the TriggerControl object as consumer with the specified name to 
            receive trigger events. All received trigger events will be published via the
            triggerEvent event.
            </summary>
            <param name="name">The name of a trigger consumer. A consumer name may not 
            contain backslashes, and may not duplicate existing system names. It should
            match the name of a registered trigger consumer.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.OutOfMemoryException">OutOfMemoryException - If an internal 
            memory allocation fails.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.TriggerApiNotFound - if the TriggerApi DLL was not found.
              If this error occurs, it is likely that the device image is too old and
              will need to be updated.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.DeregisterFromEvents(System.String)">
            <summary>   
            A previous registration established using the RegisterForEvents method is
            removed. Trigger events for the consumer with the specified name will no 
            longer be received by the TriggerControl instance.
            </summary>
            <param name="name">The name of a trigger consumer.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.PublishEvent(PsionTeklogix.Trigger.TriggerEvent)">
            <summary>   
             Generates a "fake" trigger event, which will be forwarded to the trigger
            driver. It will in turn pass the event on to all registered consumers with 
            mappings for the specified event source.
            </summary>
            <remarks>
            <p> WARNING: when simulating trigger events using this method, an 
            application MUST be well behaved. In other words, a trigger down must
            always be followed by a trigger up. Sending out multiple trigger down/up
            events in a row many result in unexpected behaviour in devices that receive
            trigger events.</p>
            <p> The trigger single and double click flags specified in the trigger
            event structure are ignored.</p>
            </remarks>
            <param name="evt">The trigger event information. The source ID should be set to
            the ID of the trigger source that is to have seemed to have generated the
            event. The event flags must have either the trigger down or trigger up
            flag set.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified event object was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.InternalError - An error during initialization occurred. The 
               trigger event cannot be published.
             * TriggerError.InvalidFlagsSet - if either no event flags were set, or
               both the trigger up and trigger down flags were set.
             * TriggerError.EventNotSent - The trigger event cannot be published at this
               time. An internal queue may be full.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RegisterConsumer(System.String)">
            <summary>   
             Registers a trigger event consumer. Once registered, a trigger event 
            consumer can be associated with one or more trigger event sources, allowing
            it to be sent trigger events.
            </summary>
            <remarks>
            <p> This method may be used to register the name of <b>any</b> trigger 
            consumer, including trigger consumers created by other applications
            or drivers.  Usually an application would register and handle its own
            trigger events exclusively, so in most cases you would pick a name
            that is unique.</p>
            </remarks>
            <param name="name">The name of the trigger consumer to register.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs. 
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.AlreadyRegistered - if the specified consumer name is
              already registered.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.DeregisterConsumer(System.String)">
            <summary>   
             Deregisters a trigger event consumer. 
            </summary>
            <remarks>
            <p> When a consumer is deregistered, all mappings for the consumer are 
            removed.</p>
            <p> This method may be used to deregister the name of <b>any</b> trigger 
            consumer, including trigger consumers created by other applications
            or drivers. This behaviour is not recommended, as deregistering a 
            consumer registered by another driver or other system component will 
            prevent that driver/etc. from receiving further trigger events, and
            can prevent key system components (barcode scanner, imager, etc.) 
            from functioning properly.</p>
            </remarks>
            <param name="name">The name of the trigger consumer to deregister.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.NotRegistered - if the specified consumer name is not
              registered.
             * TriggerError.UnknownError - an unknown error has occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetRegisteredConsumers(System.Collections.ArrayList)">
            <summary>   
            Returns a list of all registered consumers.
            </summary>
            <remarks>
            <p> If no clients are registered the operation will complete successfully,
            however the list size will be set to zero.</p>
            </remarks>
            <param name="names">A list of consumer names. If successful, the list will 
              contain all of the registered trigger consumers, as strings.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name ArrayList was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetAssociatedConsumers(System.UInt32,System.Collections.ArrayList)">
            <summary>   
             Returns a list of all consumers associated with the specified trigger 
            source ID.
            </summary>
            <remarks>
            <p> If no clients are registered the operation will complete successfully,
            however the list size will be set to zero.</p>
            </remarks>
            <param name="sourceId">The source ID whose associations/mappings are being 
              queried.</param>
            <param name="names">A list of consumer names. If successful, the list will contain
              all of the registered trigger consumers associated with the specified
              trigger source, as strings.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name ArrayList was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.AddMapping(System.UInt32,System.String,System.UInt32)">
             <summary>   
              Used to create or add a mapping or association between a trigger source 
             and a consumer.
             </summary>
             <remarks>
             <p>In order to receive trigger events, a registered trigger consumer must be
             associated with one or more trigger sources. Once associated with a trigger
             source, a consumer will be sent trigger events coming from that source until
             deregistered, or until another mapping causes the existing mapping to be
             replaced.</p>
            
             <p>All mappings added are permanent. A consumer registered using the trigger
             control class will still be considered registered after a cold/warm restart
             of the device. As a result, applications not launched at startup (and/or
             do not run all the time) should use the "Temporary" flag (see below).</p>
            
             <p>It is possible to map one trigger source to multiple consumers. In other
             words, mappings for multiple consumers may be added to a single source.
             This procedure is not recommended for devices such as imagers and tethered
             RFID readers that can draw large amounts of current.</p>
            
             <p>It is possible to map multiple trigger sources to one consumer. The identity
             of the source generating the event is supplied with the event.</p>
            
             <p>When adding a trigger source-to-consumer mapping, an application may
             specify one or more control flags. Control flags are used to modify the
             way that an application registers.</p>
            
             <p>The Exclusive flag is used to prevent multiple consumers from being 
             simultaneously mapped to a trigger source. An application attempts to 
             create an exclusive association for a consumer with a trigger source that 
             already as a mapping, or attempts to add a mapping to a trigger source that
             has an exclusive mapping, the attempt will fail.</p>
            
             <p>The Override flag is used to override an existing mapping of any sort
             (exclusive or otherwise). All existing mappings will be replaced with the
             existing mapping.</p>
            
             <p>If the Temporary flag is set, the mapping will not persist across a
             warm or cold rest. In addition, if the Override flag is also set, the 
             original mapping(s) will be restored when the temporary client deregisters,
             or its mapping is removed. Note that only one temporary+override mapping
             can exist for a source at a time.</p>
            
             <p>If the IgnoreDupReg flag is set, and the specified mapping already exists, 
             no error will be returned.</p>
             
             </remarks>
             <param name="id">The trigger source ID the trigger consumer will be
                 associated with. When the trigger source is a ketboard key, the
                 Keyboard.TranslateToTriggerID() method must be used. For instance,
                 the following call will map the "A" key as the trigger source:
                 AddMapping(Keyboard.TranslateToTriggerID(Key.A),
                            "TestConsumer",
                            TriggerControl.Flags.Temporary);
                 This assumes that the A key has already been remapped to produce a trigger
                 event, either through the Add Key button of the trigger control panel, or
                 from an application using the keyboard remapping module.
                  
             </param>
             <param name="name">The name of the trigger consumer to associate with the trigger
                source ID.</param>
             <param name="flags">The trigger control flags (see above, and 
                TriggerControlFlags)</param>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             TriggerControl object has already been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
             specified consumer name was null.</exception>
             <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
             One of the following error codes will be with the exception:
              * TriggerError.CommunicationFailure - if the Trigger driver is not
               running, or has failed.
              * TriggerError.NotRegistered - the specified consumer is not registered
              * TriggerError.MappingExists - the specified mapping already exists
              * TriggerError.ExclusiveMappingExists - an exclusive mapping exists,
               and other mappings cannot be added. The Override flag can be specified
               to replace the existing mapping.
              * TriggerError.TemporaryMappingExists - a temporary mapping exists,
               and other mappings cannot be added.         
              * TriggerError.UnknownError - an unknown error occurred.
             </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RemoveMapping(System.UInt32,System.String)">
            <summary>   
            Removes an existing trigger source-to-consumer mapping.
            </summary>
            <remarks>
            <p> The specified mapping/association is removed permanently. Removing 
            the wrong mapping could cause a barcode scanner, imager, etc. to become 
            non-functional.</p>
            <p> Removing a mapping that was added with the temporary and override flags
            will restore the previous mappings. In all other cases, removing a mapping
            does not restore old mappings or otherwise affect other mappings for the
            trigger source. This behaviour can result in trigger sources not having a
            mapping.</p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <param name="name">The name of the trigger consumer to remove the mapping 
                for.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - If the 
            specified consumer name was null.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.MappingNotFound - The specified mapping does not exist
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RemoveAllMappings(System.UInt32)">
            <summary>   
            Removes all mappings for the specified trigger source.
            </summary>
            <remarks>
            <p> All mappings are removed permanently. Removing the wrong mapping 
             could cause a barcode scanner, imager, etc. to become non-functional.</p>
            <p> Removing a mapping that was added with the temporary and override 
             flags will restore the previous mappings. In all other cases, the existing 
             mappings are not restored.</p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.MappingNotFound - No mappings existed for this source.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.SetDoubleClickTime(System.UInt32)">
            <summary>   
             Changes the double-click timeout for all trigger sources.
            </summary>
            <remarks>
            <p>A trigger event received by an EventListener can also have other flags set: the
            single- and double-click event flags. A double-click event occurs when the user
            quickly presses and releases a trigger twice in a row. A single-click event 
            occurs when the user quickly presses and releases the trigger once, and occurs
            as part of a double-click event. In order to receive single- and double-click
            events, the following conditions must be met:
             * The double-click time must be set to be greater than 0.
             * The user must press and release the trigger with half of the configured
                  double-click time, which will generate a single-click event.
             * The user must then press the trigger again within the configured 
                  double-click time. Doing so will generate a trigger down event with 
                  the double-click flag set.
             * If the user releases the trigger within the configured double-click 
                  time, trigger up event with the double-click flag set will be generated.
            </p>
            <p> The default double-click time is 0 (no double-clicks). </p>
            <p> The double-click value set here is unrelated to the double-click
             value that is configured in the "Teklogix Scanners" control panel.</p>
            </remarks>
            <param name="doubleClickTime">The double-click time, in milliseconds.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.SetDoubleClickTime(System.UInt32,System.UInt32)">
            <summary>   
             Changes the double-click timeout for a single trigger source.
            </summary>
            <remarks>
            <p>A trigger event received by an EventListener can also have other flags set: the
            single- and double-click event flags. A double-click event occurs when the user
            quickly presses and releases a trigger twice in a row. A single-click event 
            occurs when the user quickly presses and releases the trigger once, and occurs
            as part of a double-click event. In order to receive single- and double-click
            events, the following conditions must be met:
             * The double-click time must be set to be greater than 0.
             * The user must press and release the trigger with half of the configured
                  double-click time, which will generate a single-click event.
             * The user must then press the trigger again within the configured 
                  double-click time. Doing so will generate a trigger down event with 
                  the double-click flag set.
             * If the user releases the trigger within the configured double-click 
                  time, trigger up event with the double-click flag set will be generated.
            </p>
            <p>
             * The default double-click time is 0 (no double-clicks). 
             * The double-click value set here is unrelated to the double-click
             value that is configured in the "Teklogix Scanners" control panel.
            </p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <param name="doubleClickTime">The double-click time, in milliseconds.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetDoubleClickTime(System.UInt32,System.UInt32@)">
            <summary>   
            Returns the double-click time for the specified trigger source. 
            </summary>
            <remarks>
            <p> The default double-click time is 0 (no double-clicks).</p>
            <p> The double-click value reported here is unrelated to the double-click
             value that is configured in the "Teklogix Scanners" control panel.</p>
            </remarks>
            <param name="id">The ID of trigger source.</param>
            <param name="doubleClickTime">If the operation succeeds, the double-click 
               time in milliseconds.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            One of the following error codes will be with the exception:
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetTriggerSourceFriendlyName(System.UInt32)">
            <summary> 
             Gets the friendly name for the specified trigger source. 
             The friendly name is a short string (usually 15 characters or less) that is 
             displayed by the control panel. This name is used to show users a brief 
             descriptive name for the trigger source(s) that have been mapped, as trigger
             sources are normally identified by an integer value. 
              Creating a friendly name for a new trigger source is optional, however if 
             one is not created the mapping for the trigger source will not show up in the
             control panel                                                                                                                                                                                                                                                                                                                                                                                                         * panel.
            </summary>
            <param name="id">The ID of trigger source.</param>
            <returns>The friendly name for the the trigger source</returns>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            Common possible exceptions are:        
             * TriggerError.FriendlyNameNotFound - the friendly name wasn't found.
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.SetTriggerSourceFriendlyName(System.UInt32,System.String)">
            <summary> 
             Sets the friendly name for the specified trigger source. 
             The friendly name is a short string (usually 15 characters or less) that is 
             displayed by the control panel. This name is used to show users a brief 
             descriptive name for the trigger source(s) that have been mapped, as trigger
             sources are normally identified by an integer value. 
              Creating a friendly name for a new trigger source is optional, however if 
             one is not created the mapping for the trigger source will not show up in the
             control panel.
            </summary>
            <param name="id"> The ID of trigger source.</param>
            <param name="friendlyName"> The friendly name to set.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            Common possible exceptions are:        
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.RemoveTriggerSourceFriendlyName(System.UInt32)">
            <summary> 
             Removes the friendly name for the specified trigger source.
             The friendly name is a short string (usually 15 characters or less) that is 
             displayed by the control panel. This name is used to show users a brief 
             descriptive name for the trigger source(s) that have been mapped, as trigger
             sources are normally identified by an integer value. 
              Creating a friendly name for a new trigger source is optional, however if 
             one is not created the mapping for the trigger source will not show up in the
             control panel.
            </summary>         
            <param name="id">The ID of trigger source.</param>
            <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
            TriggerControl object has already been disposed.</exception>
            <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
            Common possible exceptions are:        
             * TriggerError.TriggerIdNotFound - if the specified trigger source wasn't found.        
             * TriggerError.CommunicationFailure - if the Trigger driver is not
              running, or has failed.
             * TriggerError.UnknownError - an unknown error occurred.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerControl.GetTriggerSourceId(System.String)">
             <summary> 
               Returns the trigger source ID for the specified friendly name. 
             </summary>        
             <param name="friendlyName">The friendly name look for.</param>
            <returns>The ID of trigger source</returns>
             <exception cref="T:System.ObjectDisposedException">ObjectDisposedException - If the 
             TriggerControl object has already been disposed.</exception>
             <exception cref="T:PsionTeklogix.Trigger.TriggerException">TriggerException - if an error occurs.
             Common possible exceptions are:        
              * TriggerError.FriendlyNameNotFound - if the specified friendly name wasn't found.        
              * TriggerError.CommunicationFailure - if the Trigger driver is not
               running, or has failed.
              * TriggerError.UnknownError - an unknown error occurred.
             </exception>
        </member>
        <member name="E:PsionTeklogix.Trigger.TriggerControl.triggerEvent">
            <summary>
            The event used to notify registered event handlers when a trigger event occurs.
            </summary>
            <remarks>
             Trigger events are generated via the main window message thread.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerControl.Flags">
            <summary>
             Flags used to control access to trigger sources and the behaviour of the API
            when a new mapping is requested.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.Exclusive">
            <summary> The requested mapping is to be exclusive - no other consumers may be
            associated with this trigger source. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.Override">
            <summary> Override an existing mapping, even an exclusive one. All other mappings
            are replaced.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.AccessFlags">
            <summary> Mask for the trigger control access flags.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.IgnoreDupReg">
            <summary>  Flag set to indicate that if a mapping involving a consumer/source ID pair
            already exists, that an error should not be returned.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.Temporary">
            <summary> Flag set to indicate that the specified mapping is temporary, and should not
            be written to the registry.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.WantsTriggerEvents">
            <summary> Flag set to indicate that specified mapping wants trigger 
            events. </summary>            
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerControl.Flags.WantsDoubleClickEvents">
            <summary> Flag set to indicate that specified mapping wants double 
            click events. </summary>
        </member>
        <member name="T:PsionTeklogix.Resources.ResourceFileReader">
            <summary>
            Provides the base functionality to read data from resource files.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.#ctor(System.String)">
            <summary>
            Creates an instance of the ResourceFileReader class.
            </summary>
            <param name="fileName">
            The name of the resource file.
            </param>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.GetEnumerator">
            <summary>
            Enumerates the resource manager dictionary.
            </summary>
            <returns>
            Returns a reference to an IEnumerator interface, 
            whose purpose is to grant access to an enumeration's items. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.Close">
            <summary>
            This method releases any resources held during reading. 
            If Close has already been called, no action is performed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the resource manager dictionary.
            Interface members implicitly have public declared 
            accessibility. No access modifiers are allowed on interface 
            member declarations. 
            </summary>
            <returns>
            An Interface to enumerator.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceFileReader.Dispose">
            <summary>
            Releases the resources used by the ResourceFileReader.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Sound.Beeper.Beeper">
            <summary>
            The Beeper API is used to access the piezo-electric speaker on 
            a Psion Teklogix device. It allows applications to generate an 
            error, warning, or informational beep (or beeps) when an event occurs, 
            such as a completed database operation, barcode scan, or file 
            download. 
            The ability to generate beeps using a piezo-electric speaker 
            can be very useful in in noisy environments, as they tend to be 
            much louder than a standard speaker connected to a waveform 
            audio device.
            </summary>
            <remarks>
            The Beeper class allows an application to play a tone at a specified frequency 
            for a specified duration using the device's built in sound device. Some devices
            have beepers, which can only play tones, and some devices have speakers which
            can play .wav files. If the device does 
            not have a beeper, but does have a wave device, an 
            equivalent sound will be played through the speaker.</remarks>
        </member>
        <member name="M:PsionTeklogix.Sound.Beeper.Beeper.PlayTone(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Used to play a tone at the given frequency, duration, and volume. 
            </summary>
            <remarks>
            <p>Different beepers have different behaviours with regards to 
            frequency response range, valid beep durations, etc. As a result, 
            certain frequencies and durations may not be not be possible on a 
            some devices. If a beeper cannot support a supplied frequency or 
            duration, the value will be increased or reduced as appropriate to 
            the nearest valid value.</p>
            <p> Some devices will use the waveform audio device to generate a beep.</p> 
            </remarks>
            <param name="frequency">
            The frequency of the Beep Sound in Hertz. 
            Frequencies below 20Hz or above 20000Hz are not valid.
            </param>
            <param name="duration">
            Duration of the Beep Sound expressed in milliseconds. 
            Durations of less than one millisecond are not valid.
            </param>
            <param name="volume">
            The volume at which the tone will be played, as a percentage. This parameter 
            currently has no effect on devices with beepers. On these devices, the volume
            is controlled by the user from the Control Panel. On devices with waveform 
            audio support, the parameter functions normally.
            </param>
            <returns>
            true if the tone can be played by either the beeper or wave speaker. 
            </returns>
            <exception cref="T:System.ArgumentException">ArgumentException - if one of the parameters
            is invalid.</exception>
            <exception cref="T:System.ApplicationException">ApplicationException - if the tone
            cannot be played.</exception>
        </member>
        <member name="P:PsionTeklogix.Sound.Beeper.Beeper.HasBeeper">
            <summary>
            Used to determine if a target device has a beeper.
            </summary>
            <returns>
            true, if the device has a beeper. false, otherwise.
            </returns>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Touchscreen">
            <summary>
             The Touchscreen class is used to provide programmatic access to the touch screen
             on devices.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.Touchscreen.Enabled">
            <summary>Enable/Disable touch screen, Get whether or not the device 
            has a touch screen installed and enabled</summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.Touchscreen.Installed">
            <summary>Get whether or not the device has a touch screen installed</summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanTriggerEventArgs">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            Contains the trigger state at the time a ScanTriggerEvent occurred. 
            </summary>
            <remarks>
            <p>A ScanTriggerEvent will occur whenever the user presses or releases the scan 
            button, or presses and releases the scanner trigger.</p>
            <p>Single-click and double click events replace trigger events - no trigger event 
            will be seen if a single click or double-click event occurs.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanTriggerEventArgs.ToString">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            Converts the event arguments to a printable string.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanTriggerEventArgs.ScanTriggerState">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            Reports the state of the trigger at the time the event was generated.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.VirtualKey">
            <summary>
            A virtual-key code is a device-independent value defined by the system that 
            identifies the purpose of a key. The following enumeration contains the symbolic 
            constant names and hexadecimal values for the virtual-key codes used by the 
            Microsoft Windows CE operating system. The codes are listed in numeric order. 
            </summary>
            <remarks>
            The virtual keys values are <b>NOT</b> scan codes, nor do they (except indirectly)
            represent characters sent to an application.
            A full list of available virtual-key codes is available through the object browser.
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NONE">
            for use with remappings that do not require a virtual key code (i.e. a function
            code only)
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LBUTTON">
            left mouse button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RBUTTON">
            right mouse button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CANCEL">
            cancel button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MBUTTON">
            middle mouse button
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BACK">
            the BKSP key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_TAB">
            the TAB key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CLEAR">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RETURN">
            return/ENTER
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SHIFT">
            the SHIFT key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CONTROL">
            the CTRL key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MENU">
             
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PAUSE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CAPITAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_KANA_HANGUL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_JUNJA">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_FINAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HANJA_KANJI">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ESCAPE">
            the ESC key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CONVERT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NOCONVERT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SPACE">
            the SPACE key
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PRIOR">
            page up
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NEXT">
            page down
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_END">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HOME">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LEFT">
            the left arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_UP">
            the up arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RIGHT">
            the right arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DOWN">
            the down arrow
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SELECT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EXECUTE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SNAPSHOT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_INSERT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DELETE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HELP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_0">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_3">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_4">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_5">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_6">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_7">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_8">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_9">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_A">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_B">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_C">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_D">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_E">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_G">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_H">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_I">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_J">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_K">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_L">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_M">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_N">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_O">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_P">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_Q">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_R">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_S">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_T">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_U">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_V">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_W">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_X">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_Y">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_Z">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LWIN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RWIN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_APPS">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SLEEP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD0">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD3">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD4">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD5">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD6">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD7">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD8">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMPAD9">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MULTIPLY">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ADD">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SEPARATOR">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SUBTRACT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DECIMAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_DIVIDE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F3">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F4">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F5">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F6">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F7">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F8">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F9">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F10">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F11">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F12">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F13">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F14">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F15">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F16">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F17">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F18">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F19">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F20">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F21">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F22">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F23">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F24">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NUMLOCK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SCROLL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LSHIFT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RSHIFT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LCONTROL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RCONTROL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LMENU">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RMENU">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_BACK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_FORWARD">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_REFRESH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_STOP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_SEARCH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_FAVORITES">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BROWSER_HOME">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_VOLUME_MUTE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_VOLUME_DOWN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_VOLUME_UP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_NEXT_TRACK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_PREV_TRACK">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_STOP">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_MEDIA_PLAY_PAUSE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_MAIL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_MEDIA_SELECT">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_APP1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LAUNCH_APP2">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SEMICOLON">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EQUAL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_COMMA">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_HYPHEN">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PERIOD">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_SLASH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BACKQUOTE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_LBRACKET">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_BACKSLASH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_RBRACKET">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_APOSTROPHE">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_OFF">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EXTEND_BSLASH">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_OEM_102">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PROCESSKEY">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PACKET">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F25">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F26">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F27">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F28">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F29">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_F30">
            Psion Teklogix device-specific
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ATTN">
             
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_CRSEL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EXSEL">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_EREOF">
                                                                                
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PLAY">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_ZOOM">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_NONAME">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_PA1">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.VK_OEM_CLEAR">
            
        </member>
        <member name="F:PsionTeklogix.Keyboard.VirtualKey.Unknown">
             Unmapped value(reserved) 
            <summary>Deprecated</summary>
            MUST be the last entry in this list 
            @deprecated 
        </member>
        <member name="T:PsionTeklogix.Keyboard.SystemPowerState">
            <summary>
            Psion Teklogix device-specific mode for resetting system
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.Suspend">
            send system into suspend mode
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.WarmReset">
            send system into warm reset mode
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.ColdReset">
            send system into cold reset mode
        </member>
        <member name="F:PsionTeklogix.Keyboard.SystemPowerState.ResetToBootLoader">
            reset system to start in boot loader
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanEventHandler">
            <summary>
            The ScanEventHandler delegate represents the method that will be called
            when a software scan has been initiated.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanCompleteEventHandler">
            <summary>
            The ScanCompleteEventHandler delegate represents the method that will be called
            when a scan has been successfully completed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanTriggerEventHandler">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.        
            The delegate for trigger event handlers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanFailedEventHandler">
            <summary>
            The delegate for failed-scan event handlers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanSingleClickEventHandler">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            The delegate for receiving single trigger clicks (quick press-and-release).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanDoubleClickEventHandler">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            The delegate for receiving double trigger clicks (press-and-release followed by
            press-and-release, or press-and-release followed by press-and-hold).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.Scanner">
            <summary>
            The Scanner class is used to hold the barcode data read from a scanner. 
            The Scanner class is used to control barcode scanners attached to a Psion Teklogix device. All types of scanners are supported by the Scanner class: internal, external, serial, etc. as long as the scanner itself is supported by the Psion Teklogix device. 
            The scanner class can be used to perform the following operations: 
            Enable/Disable barcode scanning at the hardware level 
            Check to see if barcode scanning is enabled/disabled 
            Fire the scanner manually. 
            Gets/Sets the scanner setting 
            </summary>
            <remarks>
            The barcode scanner could be either an internal or external scanner and the
            triggering of a scan can be performed from the scanner or by software.
            Scanner class also alows developers to write their own Scanner Drivers. For this
            see an example source code for SE 923 scanner will be provided in the future.
            </remarks>
            <example>
            The following example shows how the scanner is utilized programatically.
            You can also use the VisualStudio IDE to create similar code as this 
            class derives from component. This example also shows how you programmatically
            set the properties of the driver.
            See the <see cref="T:PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver"/> 
            for the details on how to setup the scanner.
            <code lang="C#">
            public void Scan()
            {
                // Initialize the scanner driver
                this.scannerServicesDriver1 = new PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver();
                this.scanner1 = new PsionTeklogix.Barcode.Scanner();
               // 
               // scannerServicesDriver1
               // 
               this.scannerServicesDriver1.ClickData = 5;
               this.scannerServicesDriver1.ClickTime = 4;
               this.scannerServicesDriver1.CodabarEnabled = false;
               this.scannerServicesDriver1.Code11Enabled = false;
               this.scannerServicesDriver1.Code128Enabled = true;
               this.scannerServicesDriver1.Code39Enabled = true;
               this.scannerServicesDriver1.Code93Enabled = false;
               this.scannerServicesDriver1.Discrete2Of5Enabled = false;
               this.scannerServicesDriver1.DotTime = 1;
               this.scannerServicesDriver1.EAN13Enabled = true;
               this.scannerServicesDriver1.EAN8Enabled = true;
               this.scannerServicesDriver1.I2Of5Enabled = true;
               this.scannerServicesDriver1.IATA2Of5 = false;
               this.scannerServicesDriver1.MSIPlesseyEnabled = false;
               this.scannerServicesDriver1.ScanBeep = true;
               this.scannerServicesDriver1.ScanIndicator = true;
               this.scannerServicesDriver1.ScanLog = true;
               this.scannerServicesDriver1.ScanResult = true;
               this.scannerServicesDriver1.ScanResultTime = 3;
               this.scannerServicesDriver1.Security = true;
               this.scannerServicesDriver1.ShortCode = true;
               this.scannerServicesDriver1.UPCAEnabled = true;
               this.scannerServicesDriver1.UPCEANEnabled = true;
               this.scannerServicesDriver1.UPCEEnabled = true;
               this.scannerServicesDriver1.Verify = true;
               // 
               // scanner1
               // 
               this.scanner1.Driver = this.scannerServicesDriver1;
               this.scanner1.ScanCompleteEvent += new PsionTeklogix.Barcode.ScanCompleteEventHandler(this.scanner1_ScanCompleteEvent);
               scanner1.Scan();
            }
            
            private void scanner1_ScanCompleteEvent(object sender, PsionTeklogix.Barcode.ScanCompleteEventArgs e)
            {
               private string barcode = e.Text;
            }
            </code>
            <code lang="VB">
            
            Friend WithEvents ScannerServicesDriver1 As PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver
            Friend WithEvents Scanner1 As PsionTeklogix.Barcode.Scanner
            Me.ScannerServicesDriver1 = New PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver
            Me.Scanner1 = New PsionTeklogix.Barcode.Scanner
            '
            'ScannerServicesDriver1
            '
            Me.ScannerServicesDriver1.ClickData = 7
            Me.ScannerServicesDriver1.ClickTime = 9
            Me.ScannerServicesDriver1.CodabarEnabled = False
            Me.ScannerServicesDriver1.Code11Enabled = False
            Me.ScannerServicesDriver1.Code128Enabled = True
            Me.ScannerServicesDriver1.Code39Enabled = True
            Me.ScannerServicesDriver1.Code93Enabled = False
            Me.ScannerServicesDriver1.Discrete2Of5Enabled = False
            Me.ScannerServicesDriver1.DotTime = 45
            Me.ScannerServicesDriver1.EAN13Enabled = True
            Me.ScannerServicesDriver1.EAN8Enabled = True
            Me.ScannerServicesDriver1.I2Of5Enabled = True
            Me.ScannerServicesDriver1.IATA2Of5 = False
            Me.ScannerServicesDriver1.MSIPlesseyEnabled = False
            Me.ScannerServicesDriver1.ScanBeep = True
            Me.ScannerServicesDriver1.ScanIndicator = True
            Me.ScannerServicesDriver1.ScanLog = True
            Me.ScannerServicesDriver1.ScanResult = True
            Me.ScannerServicesDriver1.ScanResultTime = 4
            Me.ScannerServicesDriver1.Security = True
            Me.ScannerServicesDriver1.ShortCode = True
            Me.ScannerServicesDriver1.UPCAEnabled = True
            Me.ScannerServicesDriver1.UPCEANEnabled = True
            Me.ScannerServicesDriver1.UPCEEnabled = True
            Me.ScannerServicesDriver1.Verify = True
            '
            'Scanner1
            '
            Me.Scanner1.Driver = Me.ScannerServicesDriver1
            Scanner1.Scan()
            
            Private Sub OnScanComplete(ByVal sender as Object, ByVal e as ScanCompleteEventArgs)
                Private barcode as string = e.Text
            End Sub
            </code>
            </example>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.#cctor">
            <summary>
            Initialize at run time only once the static vars
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.#ctor">
            <summary>
            Creates an empty instance of the Scanner class. Not useable
            until Driver or SettingSection is set.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.#ctor(PsionTeklogix.Barcode.ScannerDriverBase)">
            <summary>
            Creates a new instance of the Scanner class.
            </summary>
            <param name="driver">A scanner driver.</param>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.Scan">
            <summary>
            Tell the scanner to start scanning.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScan">
            <summary>
            Callback that will be executed when a scan has been initiated. This is useful
            when there is a trigger on an external scanner and enables the application 
            to be notified of the event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanComplete(System.String,System.Byte[],System.String)">
            <summary>
            Callback that will be executed when a scan has been completed.
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanComplete method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanComplete in a derived class, be 
            sure to call the base class's OnScanComplete method so that registered delegates 
            receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanTriggerEvent(PsionTeklogix.Barcode.TriggerState)">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.        
            Callback that will be executed when the trigger is pressed or released.
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanTriggerEvent method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanTriggerEvent in a derived class, be 
            sure to call the base class's OnScanTriggerEvent method so that registered delegates 
            receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanSingleClickEvent">
            <summary>
            Callback that will be executed when a single-click event is seen (a quick
            press and release of a trigger).
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanSingleClickEvent method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanSingleClickEvent in a derived 
            class, be sure to call the base class's OnScanSingleClickEvent method so that 
            registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanDoubleClickEvent(System.String)">
            <summary>
            Callback that will be executed when a double-click event is seen (a quick
            press-release-press-release of a trigger).
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanDoubleClickEvent method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanDoubleClickEvent in a derived 
            class, be sure to call the base class's OnScanDoubleClickEvent method so that 
            registered delegates receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.OnScanFailedEvent(PsionTeklogix.Barcode.ScanFailedError)">
            <summary>
            Callback that will be executed when a scan fails (timeout or other reason).
            </summary>
            <remarks>
            <p>Raising an event invokes the event handler through a delegate.</p>
            <p>The OnScanFailedEvent method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for handling 
            the event in a derived class.</p>
            <p>Notes to Inheritors:  When overriding OnScanFailedEvent in a derived class, be 
            sure to call the base class's OnScanFailedEvent method so that registered delegates 
            receive the event.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.TranslateToImagerSdkSymbology(PsionTeklogix.Barcode.BarcodeSymbology)">
            <summary>
            Translates a barcode symbology code from the Mobile Devices SDK enumeration to
            the Imager SDK enumeration. The two enumerations do not map to each other on
            a one-to-one basis, so the translation is approximate and round-trip mappings
            will not necessarily result in the original value.
            </summary>
            <param name="mdsdkSymbology">the MDSDK symbology to be translated</param>
            <returns>the corresponding Imager SDK symbology value</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value is unrecognized.
            </exception>
            <exception cref="T:System.ApplicationException">Thrown if no corresponding value exists.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Barcode.Scanner.TranslateFromImagerSdkSymbology(System.Int32)">
            <summary>
            Translates a barcode symbology code from the Imager SDK enumeration to the
            Mobile Devices SDK enumeration. The two enumerations do not map to each other
            on a one-to-one basis, so the translation is approximate and round-trip
            mappings will not necessarily result in the original value.
            </summary>
            <param name="imagerSdkSymbology">the Imager SDK symbology to be translated</param>
            <returns>the corresponding Mobile Devices SDK symbology value</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value is unrecognized.
            </exception>
            <exception cref="T:System.ApplicationException">Thrown if no corresponding value exists.
            </exception>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanEvent">
            <summary>
            Occurs when a scan has been initiated.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanCompleteEvent">
            <summary>
            Occurs when a scan has been completed.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanTriggerEvent">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.        
            A ScanTriggerEvent will occur whenever the user presses or releases the scan 
            button, or presses and releases the scanner trigger. The trigger event arguments
            received with the event will indicate the status of the trigger at the time
            of the event. Single-click and double click events replace trigger events - 
            no trigger event will be seen if a single click or double-click event occurs.
            </summary>
            <remarks>
            <p> A trigger event is only meant to be informational in nature: a barcode scan
            is initiated when the trigger or scan button is pressed. There is no need for
            an application to manually trigger a barcode scan.</p>
            <p> This event will only be seen when using the ScannerServicesDriver control.</p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanFailedEvent">
            <summary>
            A ScanFailedEvent will occur when the scanner fails to scan a barcode. A failed
            scan occurs when either the user releases the scanner trigger or scan button
            before a barcode can be decoded, or when the scanner fails to decode a barcode
            within an alloted time. The former generates a Scan Failed event, with an error
            code of "Cancelled". The latter generates a Scan Failed event, with an error
            code of "TimedOut".
            </summary>
            <remarks>
            <p> This event will only be seen when using the ScannerServicesDriver control.</p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanSingleClickEvent">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            A single-click event occurs when the user quickly presses and releases the
            scan button or scanner trigger (within one third of the configured double-
            click time).
            </summary>
            <remarks>
            <p>If a single-click event occurs, no trigger events will be seen.</p>
            <p> This event will only be seen when using the ScannerServicesDriver control.</p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Barcode.Scanner.ScanDoubleClickEvent">
            @deprecated (2010)
            <summary>
            Deprecated - Please use Trigger namespace.            
            A double-click event occurs when the user quickly presses and releases the
            scan button or scanner trigger twice or presses and releases the trigger, and
            then presses and holds it down within the configured double-click time. 
            </summary>
            <remarks>
            <list>
            <item>If a double-click event occurs, no trigger events will be seen.</item>
            <item>A double-click event will always be preceded by a single-click event.</item>
            <item>This event will only be seen when using the ScannerServicesDriver control.</item>
            <item>By default, double-click data is sent to the application as barcode, through
            the ScanCompleteEvent event. In order to receive double-click events, the
            property PsionTeklogix.Barcode.ScannerServices.ScannerServicesDriver.SendDoubleClickDataAsScannerData
            must be set to false. </item>
            </list>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.Scanner.Enabled">
            <summary>
            Gets/Sets whether the scanner is enabled or disabled.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.Scanner.Driver">
            <summary>
            Gets/Sets the driver that will be used for the scanner.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanDoubleClickEventArgs">
            <summary>
             Used to report double-click data. The data contained in the event will be whatever
            is configured in the Teklogix Scanners control panel.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanDoubleClickEventArgs.ToString">
            <summary>
            Converts the event to a printable string.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanDoubleClickEventArgs.DoubleClickData">
            <summary>
            Returns the double-click data configured in the Teklogix Scanners control panel.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.OrientationChangedEventArgs">
            @deprecated (2011)
            Please use PsionTeklogix.Dispay.Orientation.OrientationChangedEventArgs instead.
            <summary>
            Deprecated - See Display Namespace instead.  Arguments for the 
            <see cref="T:PsionTeklogix.Windows.Forms.OrientationChangedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.OrientationChangedEventArgs.#ctor(PsionTeklogix.Windows.Forms.Orientations)">
            <summary>
            
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.OrientationChangedEventArgs.NewOrientation">
            <summary>
            Retrieves the new orientation after the orientation change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Utility.Utility">
            <summary>
             The Utility class supplies a variety of miscellaneous methods and classes that do 
            not fit elsewhere in the SDK. It currently provides methods to retrieve built-in
            type information and retrieve assembly information, and contains the definition of
            the MultiString  class. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumName(System.Type,System.Object)">
            <summary>
            Get the name of an enumeration member based on its value.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <param name="value">Value of enumeration member</param>
            <returns>String containing enumeration member name or null if not found.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when enumeration value
            passed in is not found.</exception>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumNames(System.Type)">
            <summary>
            Get array of enumeration member names in the declared order.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <returns>Array of strings containing the names of every member in the provided enumeration </returns>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumValues(System.Type)">
            <summary>
            Get array of enum member values in declared order.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <returns>Array of int values, in the order declared in the enumeration.</returns>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.ParseEnumValue(System.Type,System.String)">
            <summary>
            Get enum member value from name.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <param name="name">Name of enumeration member</param>
            <returns>The value of the specified enumeration member.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when name of enumeration
            member passed in is not found.</exception>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEntryAssemblyName">
            <summary>
            Returns the path and name for the executable file for the calling process. 
            </summary>
            <remarks>
            That is, it returns the file which is calling the Psion Teklogix library. 
            </remarks>
            <returns>
            Returns the path and name for the file used to create the calling process.
            </returns>
            <exception cref="T:System.Exception">Thrown when the path and name of the assembly,
            used by the calling process is not retreived.</exception>
        </member>
        <member name="M:PsionTeklogix.Utility.Utility.GetEnumMaxValue(System.Type)">
            <summary>
            Get the maximum value in the enumeration.
            </summary>
            <param name="type">The type of the enumeration being examined</param>
            <returns>The maximum value in the enumeration.</returns>
        </member>
        <member name="T:PsionTeklogix.Utility.MultiString">
            <summary>
            Class that wraps strings defined as REG_MULTI_SZ
            registry data types.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Utility.MultiString.#ctor(System.String[])">
            <summary>
            Constructor. Creates an instance of the multi string registry 
            data types.
            </summary>
            <param name="MyStrings">string array that represents multi strings.</param>
        </member>
        <member name="M:PsionTeklogix.Utility.MultiString.#ctor(System.String)">
            <summary>
            Constructor. Creates an instance of the multi string registry 
            data types.
            </summary>
            <param name="MultiString">multi-string registry value.</param>
        </member>
        <member name="M:PsionTeklogix.Utility.MultiString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:PsionTeklogix.Utility.MultiString.myStrings">
            <summary>
            String array that represents multi strings.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerError">
            <summary> Trigger error codes.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.Success">
            <summary> The operation completed successfully. </summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.UnknownError">
            <summary> An unknown error occurred.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InternalError">
            <summary> An internal error occurred.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InvalidEventListener">
            <summary> An invalid or null trigger event listener was specified.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InvalidFlagsSet">
            <summary> An invalid flag or combination of flags was specified.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.EventNotSent">
            <summary> The trigger event could not be sent.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.CommunicationFailure">
            <summary> The trigger control code could not communicate with the trigger driver.</summary>
            <remarks> This error can occur if the trigger driver is not present on the
            device or not functioning correctly.</remarks>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.AlreadyRegistered">
            <summary> The trigger consumer is already registered.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.NotRegistered">
            <summary> The trigger consumer is not registered.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.MappingExists">
            <summary> The specified mapping already exists.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.MappingNotFound">
            <summary> The mapping specified does not exist.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.ExclusiveMappingExists">
            <summary> The application attempted to add a mapping, but an exclusive mapping 
            already exists. The application must use the override flag in order to add
            the new mapping.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.NotInitialized">
            <summary> The Initialize method was not called, or was called and failed.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.OperationNotSupported">
            <summary> The operation attempted is not supported by this device. It may be
            necessary to update the software on the device.</summary>
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.FriendlyNameNotFound">
            <summary> The Correspondent friendly name was not found. </summary> 
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.TriggerIdNotFound">
            <summary> The Correspondent trigger ID was not found. </summary> 
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.InvalidParameter">
            <summary> Invalid Parameter supplied. </summary>         
        </member>
        <member name="F:PsionTeklogix.Trigger.TriggerError.TemporaryMappingExists">
            <summary> The application attempted to add a mapping, but a temporary mapping 
            already exists. </summary>        
        </member>
        <member name="T:PsionTeklogix.Trigger.TriggerException">
            <summary> 
            The exception thrown by the TriggerControl class when an error occurs.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerException.#ctor(PsionTeklogix.Trigger.TriggerError)">
            <summary> Constructor.</summary>
        </member>
        <member name="M:PsionTeklogix.Trigger.TriggerException.#ctor(PsionTeklogix.Trigger.TriggerError,System.String)">
            <summary> Constructor.</summary>
            <param name="errorCode">The error that occurred.</param>
            <param name="exceptionText">A description of the error that occurred.</param>
        </member>
        <member name="P:PsionTeklogix.Trigger.TriggerException.TriggerErrorValue">
            <summary> Used to report the error that occurred.</summary>
            <value> 
            The error that occurreed. See the TriggerError enumeration for more
            information. 
            </value>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.SystemInformation">
            <summary>
            The SystemInformation class is used to obtain hardware and device-specific system 
            information  such as the machine ID, type, name, description, and memory usage. 
            This class also provides a method which allows the program to adjust the percentage 
            of RAM devoted to program memory (as opposed to storage memory).
            </summary>
            <remarks>
            System settings:
            
            * MachineType - The type of the current device: "Psion Teklogix 753x", etc.
            * MachineModel - The current device model: "7530", "7535", etc.
            * MachineUID - The unique machine identifier 
            * FlashSize - The total amount of flash memory on the device, in bytes.
            * FlashSizeFree - The amount of flash memory available for use by applications.
            * FlashUsed  - The amount of flash memory used by applications and the OS.
            * RAMSize - The total amount physical memory on the device, in bytes.
            * FreeProgramMemorySize - The  amount of memory available for new programs on the device,
              in bytes. See the SetProgramStorageMemoryRatio  method for more information.
            * FreeStorageMemorySize - The amount of memory available for new data on the device, in 
              bytes.
            * RAMSize - Total amount of RAM in the device, in bytes.
            * SoftwareVersion - The date code of the Windows CE image on the Psion Teklogix 
              device.
            * PCONVersion - The date code of the Peripheral Controller software on the Psion 
              Teklogix device.
            * BootCodeVersion - The date code of the boot code on the Psion Teklogix device.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.UserSuppliedMachineName">
            <summary>
            The machine name supplied by the user on the 
            device name tab of the system properties panel. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.UserSuppliedMachineDescription">
            <summary>
            The machine description supplied by the user
            on the device name tab of the system properties panel. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.SetProgramStorageMemoryRatio(System.UInt32)">
            <summary>
            Allows application developers to define the percentage of unused memory 
            devoted to storage memory (the object store).
            </summary>
            <returns>
              Success - The program storage memory ratio was successfully changed.
              Reboot - The program storage memory ratio was successfully changed,
                       but the change will not take effect until the terminal is rebooted.
            </returns>
            <remarks>
            The ratio is a percentage, passed as an unsigned integer. If a value of 40 is 
            passed, for instance, 40% of unused memory will be devoted to storage memory; 
            the remaining 60% will be used for program memory. 
            </remarks>
            <param name="ratio">
            Defines percentage of unused memory devoted to Storage Memory.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when ratio parameter larger 
            than 99
            </exception>        
            <exception cref="T:System.ApplicationException">If the program/storage ratio previously set 
            required a reboot.
            </exception>        
            <exception cref="T:System.ApplicationException">if The specified ratio is invalid. It must
             have  a range of 0-99. Also, a minimum of 256 KB must be assigned to program memory
             and object storage memory.
            </exception>        
            
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.GetPermanentDataStatus">
            <summary>Determines the current state of application data within the permanent
            storage.</summary>
            <remarks>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></remarks>
            <returns>Status of permanently-stored application data.</returns>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.GetPermanentData">
            <summary>Retrieves application data stored in this device's permanent storage.
            </summary>
            <remarks>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></remarks>
            <returns>Data from permanent storage.</returns>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])">
            <summary>Writes application data into this device's permanent storage. Before
            calling this routine, please read the full documentation for very important
            information.</summary>
            <remarks>
            <p>Some Psion Teklogix devices contain a storage medium, such as EEPROM
            memory, that allows storage of data that is retained even across cold boots.
            Not all devices contain this type of storage, and not all devices allow the
            application to store data in this permanent storage.  The routines that access
            application permanent data will throw not-supported exceptions when they are
            executed on any device that does not support this feature.</p>
            <p><b>Warning: This routine should not be used regularly.</b> Permanent
            storage hardware such as EEPROMs have a limited cycle life. After being
            rewritten many times -- sometimes even as low as 100 times -- they become
            unreliable, leading to data corruption. Calling this routine too many times
            can render a device unusable.</p>
            <p>The number of bytes of permanent storage available for application use is
            usually very small. For example, the first device to support this feature
            allows just 28 bytes of application data.</p>
            <p>There is only one area for application data, so if two or more applications
            access this feature to store different data, those applications will not be
            able to co-exist.</p>
            <p>Based on the above limitations, it may be advisable to find other means of
            storing your application data. For example, if you want to have a permanent
            unique identifier for a particular device, use <see cref="P:PsionTeklogix.SystemPTX.SystemInformation.MachineUID"/>
            instead.</p>
            </remarks>
            <param name="data">Data to write.</param>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.SystemInformation.LockPermanentData">
            <summary>Locks the data previously stored with <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/>
            so that it cannot be overwritten. <b>Use with care, only if necessary!</b>
            </summary>
            <remarks><p>Once this routine is called, any attempt to store application data
            in permanent storage will result in an access-denied exception.</p>
            <p>This routine provides a medium level of security for the stored data. The
            Mobile Devices SDK will refuse to overwrite the stored data; however, there is
            no physical or electrical security over the storage device itself.</p>
            <p>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></p></remarks>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.MachineUID">
            <summary>
            Gets the machine's unique identifier.
            </summary>
            <remarks>
            The machine UID is used to uniquely identify a Psion Teklogix device. The format 
            of the unique identifier may change from device to device but the identifier
            is unique across all products. 
            <para>On the NetbookPro and 753x, the unique ID has two components, 
            the hardware serial number, and the terminal serial number. The hardware 
            serial number is the serial number placed on the main logic board. The 
            terminal serial number identifies the device as a whole. Both serial numbers 
            consist of a sequence of characters, not necessarily digits, and are separated 
            in the unique identifier by a dash ('-'). Mote that dash may also be present 
            in one or both of the serial numbers.
            </para>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.MachineType">
            <summary>
            Gets the type of the device:
            NetBook Pro, 7535, etc.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.MachineModel">
            <summary>
            Returns the device model, as a string. For example, "7530", "7535", etc.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FlashSize">
            <summary>
            Returns the total amount of flash memory on this device, in bytes.
            in bytes.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FlashSizeFree">
            <summary>
            Returns the amount of flash memory currently available for use on this device, 
            in bytes.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FlashUsed">
            <summary>
            Returns the amount of flash memory in use on this device, in bytes.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FreeProgramMemorySize">
            <summary>
            Gets the RAM Available for use;
            not used by the application (in bytes)
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.FreeStorageMemorySize">
            <summary>
            Gets the number of 
            bytes of physical memory available. 
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.RAMSize">
            <summary>
            Gets the total number of bytes of physical memory present on the current device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.SoftwareVersion">
            @deprecated (2010) Get this information with SystemInformationList property.
            <summary>
            Deprecated - Returns the date code of the Windows CE image on the Psion Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.PCONVersion">
            @deprecated (2010) Get this information with SystemInformationList property.
            <summary>
            Deprecated - Returns the date code of the Peripheral Controller software on the Psion 
            Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.BootCodeVersion">
            @deprecated Get this information with SystemInformationList property.
            <summary>
            Deprecated Returns the date code of the boot code on the Psion Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.SystemInformation.SystemInformationList">
            <summary>
            Returns various properties of the Psion Teklogix device. 
            List is empty on error
            </summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.SystemInformation.MemoryRatio">
            <summary>
            Result from setting the storage ratio.
            </summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.MemoryRatio.Success">
            <summary>The program storage memory ratio was successfully changed.</summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.MemoryRatio.Reboot">
             <summary>The program storage memory ratio was successfully changed,
            but the change will not take effect until the terminal is rebooted.</summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus">
            <summary>Contains information about any application data stored in permanent
            storage.</summary>
            <remarks>For more information about permanent storage of application data, see
            <see cref="M:PsionTeklogix.SystemPTX.SystemInformation.SetPermanentData(System.Byte[])"/></remarks>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus.capacity">
            <summary>The number of bytes of permanent storage available for
            application use.</summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus.storedLength">
            <summary>The number of bytes of application data currently stored in
            permanent storage.</summary>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.SystemInformation.PermanentDataStatus.locked">
            <summary>Indicates if the application data currently stored in permanent
            storage has been locked, and therefore cannot be overwritten.</summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.Pattern">
            @deprecated - (2011) Use LED class Instead.
            <summary>
            Deprecated - (Jan. 24, 2011) See Led class
            The Pattern class is used to configure blink patterns of an LED. 
            A pattern works as follows: 
            colour1 is displayed for a length of time equal to duration1Milliseconds. 
            colour2 is displayed for a length of time equal to duration2Milliseconds. 
            The above sequence (1, 2) is repeated repeatCount times. 
            There will then be a delay of delayMilliseconds. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.colour1">
            <summary>
            The first LED colour to display in the pattern.  
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.duration1Milliseconds">
            <summary>
             The duration of the first part of the pattern 
             (duration that we want colour1 to display).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.colour2">
            <summary>
            The second LED colour to display in the pattern.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.duration2Milliseconds">
            <summary>
            The duration of the second part of the pattern 
            (duration that we want colour2 to display).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.repeatCount">
            <summary>
             The number of times to repeat the colour1/colour2 sequence.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Indicators.Pattern.delayMilliseconds">
            <summary>
            The delay in milliseconds between two successive runs of a pattern.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.LED">
             @deprecated - (2011) Use LED class Instead.
             <summary>
             Deprecated - (Jan. 24, 2011) See Led class
             <p>The LED class is used to control access to the LEDs present on a Psion Teklogix 
             device. Almost every Psion Teklogix device has one or more LEDs that are available 
             for use by applications, be they developed by Psion Teklogix, or by 3rd-party 
             developers. Applications typically use the LEDs to indicate device activity, 
             data reception / transmission, error conditions, alerts, and software updates, 
             among other things.</p>
            
             <p>In order to access a LED, an application needs to first list the LEDs available 
             on the current device through a call to the EnumerateLEDs method. The LED class 
             will return an array containing all of the LEDs available to the application, 
             though some of the LEDs returned may not actually be available for use (see below). 
             If no LEDs are returned, the device does not have any available for use.</p>
            
             <p>For example, on a NETBOOK PRO and 7530/7535, the following code:
              <code>
                 string [] ledList = LED.EnumerateLEDs();
              </code>
              will return an array containing a single entry: <i>"Application"</i>
             </p>
            
             <p>The application may then attempt to instantiate a LED object via one of the two
             GetLEDInstance methods. If successful, the LED object may then be used to control
             the LED selected. Note: the GetLEDInstance method will throw an exception if LED 
             is already in use by another application. The other application will have to be
             terminated in order to allow this application to access the LED.</p>
            
             <p>Once instantiated, the following operations can be executed by the LED object:
              * Changing the colour - The SetColour method can be used to turn a LED 
                on or off, or on devices with multi-colour LEDs, change the LED colour.
              * Pulse the LED - The Pulse method can be used to briefly change the 
                colour of the LED, overriding other operations being performed on the LED.
              * Blink in a pattern - The SetPattern method can be used to blink the 
                LED on and off, or blink in different colours (on / off, red / green). The 
                length of time the colours are displayed, and the repeat count/rate can be 
                configured.
             </p>
             </summary>
             <remarks>
             <p>An LED must be disposed of when an application is finished using it (using the 
             Dispose method). Failure to dispose of the LED object before an application 
             terminates may prevent other applications from using the LED on some platforms.</p>
            
             <p>Also, remember that the GetLEDInstanceName and GetLEDInstance methods return a 
             singleton instance of the LED object(s). Calling dispose for an LED object 
             invalidates all references to that LED. For example:
             <code>
              LED appLed1 = LED.GetLEDInstance("Application");
            
              ...
            
              LED appLed2 = LED.GetLEDInstance("Application"); // appLed2 == appLed1
            
              ...
            
              appLed2.Dispose(); // releases all LED resources, appLed1 is now invalid too
            
              ...
            
              appLed1.Dispose(); // !! Error !! Will throw an exception
            
              // this is correct, a new LED object will be returned.
              appLed1 = LED.GetLEDInstance("Application");
             </code>
             </p>
             </remarks>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.EnumerateLEDs">
            <summary>
            Enumerates availabel LED's.
            </summary>
            <returns>
            The EnumerateLEDs method returns an array of strings giving the names of
            the LEDs available for use by an application.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.GetLEDInstance">
            <summary>
            Returns the default LED instance to the caller. If no LEDs have been instantiated,
            creates LED objects for all available LEDs, and returns the first available LED
            instance to the caller (the default LED). If no LEDs are available, an exception
            will be thrown.
            </summary>
            <returns>
            Returns the default LED instance (if an LED is available)
            throw Exception if no LEDs are available.
            </returns>
            <exception cref="T:System.Exception">Thrown if no LEDs are available.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.GetLEDInstance(System.String)">
            <summary>
            Returns the specified LED instance to the caller. If the LED instance associated
            with the specified name has not previously allocated, the method will first attempt 
            to create the instance, and if successful will return the LED instance to the caller.
            If the LED could not be allocated, an exception will be thrown.
            </summary>
            <param name="whichLED">
            The name of the LED to allocate, must be one of the LED names
            returned by the EnumerateLEDs() method.
            </param>
            <returns>
            Returns the default LED instance .
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.GetSoftwareLEDInstance(System.String)">
            <summary>
            Returns the default LED instance to the caller.
            </summary>
            <param name="whichLED">
            The name of the LED to allocate, must be one of the LED names
            returned by the EnumerateLEDs() method.
            </param>
            <returns>
            Returns the default LED instance (if an LED is available)
            throws RuntimeException if no LEDs are available.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of a LED class.
            </summary>
            <param name="whichLED">
            Denotes which LED we are calling.
            </param>
            <param name="software">
            Is it a simulated or real LED.
            </param>
            <exception cref="T:System.Exception">Thrown if the LED
            was already used by another process.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.AvailableColours">
            <summary>
            Returns all of the colours available on this LED.
            </summary>
            <returns>
            Return the available LED colours, as an array of strings. If
            the LED object was in the middle of GC, it will throw ObjectDisposedException.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.AvailableComponentColours">
            <summary>
            Returns the available component colours of an LED.
            </summary>
            <returns>
            Return the component colours for the LED (not the combination colour(s)).
            </returns>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.DefaultOnColour">
            <summary>
            Returns the default colour displayed by the LED when it is lit.
            </summary>
            <returns>
            Return the default 'on' colour for the LED. For multi-colour LEDs, the default
            colour when powered on will be one of the component colours (green, for example).
            </returns>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.DefaultOffColour">
            <summary>
            Returns the default "colour" displayed by the LED when it is turned off.
            </summary>
            <returns>
            Return the default 'off' colour for LEDs.
            </returns>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.ValueOfColour(System.String)">
            <summary>
            Returns the index value of the specified colour (contained in the availableColours
            array).
            </summary>
            <param name="colour">
            The name of the colour to look up
            </param>
            <returns>
            The index of the colour in the availableColours array.
            throw Exception If the specified colour is not present in the array
            </returns>
            <exception cref="T:System.Exception">Thrown if the specified colour is not
            supported by the device.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.ResolveColour(System.String)">
            <summary>
            Converts a specified colour name into a proper colour name, converting "off" into
            the standard default off colour string "unlit", and "on" to the default on colour
            (hardware-dependent). If the colour specified does not match either "on", "off",
            or a known colour, an exception is thrown.
            </summary>
            <param name="colour">
            The name of the colour to look up
            </param>
            <returns>
            Return the proper colour name, from the availableColours array
            throw Exception If the specified colour is not known and not present in the 
            available colours array
            </returns>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.TimerElapsed(System.Object)">
            <summary>
            TimerElapsed method implements the method of the same name in the TimerListenerInterface.
            It will be registered with the pattern Timer object created by the LED.
            </summary>
            <param name="oElapsed">
            The source of the timer event (the LED itself).
            </param>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.Pulse(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Causes the LED to pulse the specified colour. An LED pulse is similar to setting
            the LED to a given colour briefly.
            </summary>
            <param name="pulseColour">
            Which Colour to pulse.
            </param>
            <param name="durationMilliseconds">
            Pulse duration in milliseconds.
            </param>
            <param name="independentComponents">
            If the independent flag is set, then a pulse colour can combine with a colour
            currently being displayed (multi-colour LEDs only). e.g red + green = yellow.
            </param>
            <param name="extendCurrentPulse">
            Whether to extend the current pulse or not.
            </param>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.PulseTimerElapsed(System.Object)">
            <summary>
            Removes Pulse information after timer runs out. Called when a timer 
            runs out.
            </summary>
            <param name="o">
            An instance of a timer object.
            </param>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.Dispose">
            <summary>
            Releases all resources used by the current instance of LED.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.LED.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:PsionTeklogix.Indicators.LED.pattern">
            <summary>
            Gets/Sets the pattern displayed by the LED. An
            LED pattern is when the LED is asked to blink on and off (or between colours X and
            Y) an certain number times, with the LED turned on/off/set to certain colour for a 
            given length of time. Patterns can be used to indicate some event is taking place,
            such as a software update, data reception, operation in progress, etc.
            Patterns are specified in a pattern object, see the Pattern class, above. 
            </summary>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="P:PsionTeklogix.Indicators.LED.colour">
            <summary>
            Gets/Sets colour property Sets the colour of the LED to the specified colour, cancelling any pattern in
            progress. Once the call to this method completes, the pattern information will 
            report an infinite duration for colour1, with no repetitions. 
            </summary>
            <exception cref="T:System.Exception">Thrown if the LED object was in the middle 
            of GC.</exception>
        </member>
        <member name="P:PsionTeklogix.Indicators.LED.LEDName">
            <summary>
            Gets the name of the LED diode.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.LED.PulseControl">
            @deprecated - (2011) Use LED class Instead.
            <summary>
            Deprecated - (Jan. 24, 2011) See Led class
            The PulseControl class is used to keep track of LED pulses - i.e. when the 
            application needs to change the LED colour / state while it is potentially already 
            active (i.e. being used by another thread or has simply been set to a particular
            state or colour).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralsEventArgs">
            <summary>
            Represents a type of the docking station or type of
            the tether port device that is passed as an argument in dockingEvent and tetherEvent.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Peripherals.PeripheralsEventArgs.peripheralValue">
            <summary>
            The value that is returned from Docking or Tether port driver.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.ConnectionStateEventArgs">
            <summary>
            Provides data for the ConnectionStateChanged event.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.ConnectionStateEventArgs.#ctor(PsionTeklogix.RAS.ConnectionStates,System.Int32)">
            <summary>
            Initialzes a new instance of an ConnectionStateChanged class. This constructor is internal
            so that this class cannot be instantiated outside this assembly.
            </summary>
            <param name="state">The current state if the connection.</param>
            <param name="error">Was there an error.</param>
        </member>
        <member name="P:PsionTeklogix.RAS.ConnectionStateEventArgs.state">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.ConnectionStateEventArgs.Error">
            <summary>
            Gets the error number associated with the state change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.Led">
            <summary>
            This class is used to control the application LED.  These functions
            will throw an ApplicationException if the hardware does not support
            an application LED.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.Led.On">
            <summary>
            Turn the LED on
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.Led.Off">
            <summary>
            Turn the LED off
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.Led.Blink(System.Int32,System.Int32)">
             <summary>
             The led will blink until you turn it off.
             </summary>
            <remarks>
             Some older hardware platforms ignore the onTime/offTime parameter
            </remarks>
             <param name="onTime">on time in milliseconds</param>
             <param name="offTime">off time in milliseconds</param>
        </member>
        <member name="M:PsionTeklogix.Indicators.Led.NextColour">
            <summary>
            Change the colour of the Led.  Will cycle through all supported
            colours.  With throw an exception if Led only supports one colour
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyRemapper">
             <summary>
             The key remapper class is used to remap the scan codes for a particular
             modifier key to a different behaviour. This class is only available in
             .NET Compact Framework 2.0 or higher.
             </summary>
             <remarks>
             The KeyRemapper class is used to remap the scan codes of the keys on a
             Psion Teklogix device, in order to change the behaviour of the key(s). Any key or
             keys on the device can be remapped.
            
             The ScanCodeRemapping class enables applications to perform the follow
             operations:
             <ul>
               <li> Add a scan code remapping.</li>
               <li> Remove a scan code remapping.</li>
               <li> Remove all scan code remappings.</li>
               <li> Restore all scan code remappings added by this object.</li>
               <li> Get all scan code remappings.</li>
             </ul>
            
             A scan code is an integer value representing a key on a keyboard, and is
             hardware-specific (more precisely, specific to the type of keyboard on the
             Windows CE device). The scan code for the ENTER key, for example, may be different
             on the 56-key and 37-key boards. Keys with identical names (like ENTER) may have
             different scan codes. Consult your hardware guide for keyboard scan code values,
             or call Keyboard.TranslateToScanCode to do the conversion.
            
             Modifier keys are keys on the keyboard that when pressed, change the behaviour
             of other keys on the keyboard. The following keys are considered modifier keys:
             BLUE, ORANGE, ALT, SHIFT, CTRL. BLUE, ORANGE, and SHIFT can actually change the
             virtual key value generated by a scan code press (see below).
            
             A virtual-key code is a device-independent value defined by the system that
             identifies the purpose of a key. Scan codes are mapped to virtual key codes by
             the keyboard driver. However, the same scan code can map to different virtual key
             values due to the state of other keys on the keyboard, primarily the BLUE and
             ORANGE modifier keys. There are separate tables that represents the scan code to
             virtual key mappings when each of the modifier key states (blue pressed, orange
             pressed) and another for when neither key has been pressed. SHIFT can also affect
             the virtual code generated, however the SHIFT table cannot be remapped. The CTRL
             and ALT modifier keys will not change the virtual key code generated, however an
             application can detect the state of these keys and change its behaviour
             accordingly.
            
             A function (see the Function enumeration) is an operation that will be performed
             when a particular scan code is generated by a key press. This operation may modify
             the virtual key code generated, or cause some other effect to take place, for
             example change the backlight intensity. Typically, functions can be categorized
             as follows:
             * Macro - maps a scan code to macro key, which will then be mapped into a sequence
               of one or more virtual key codes. No virtual key code is generated.
             * Operation only - maps a scan code to some specific behaviour - no virtual key
               code is generated.
             * Virtual key (+modifier) - maps a scan code to a virtual key code, and may
               simulate the pressing of one or more modifier keys.
             * Direct Unicode Mapping - allows a scan code to be mapped directly to a UNICODE
               character.
             * Modifier key mapping - causes a scan code to simulate the pressing of a modifier
               key, in order to correctly update the modifier key state (off -> one shot ->
               locked -> off).
             * Null mapping - The Function.Skip operation causes a scan code to be ignored.
            
             A scan code remapping does not involve all above elements. It maps 
             modifier + scancode to function + optional data (which may be virtual key, macro
             index, unichar, etc.). A default mapping exists for every scan code. Scan code
             remappings are used to remap existing mappings.
            
             Some characters do not have virtual key codes, but can be generated using
             shifted key codes. For example, a '+' character is actually generated by sending
             a shifted '=' virtual key code (that is, the scan code is mapped to VK_EQUAL and
             the function Function.SendShiftedCode). These mappings can be inferred from a
             standard PC keyboard.
            
             If two threads or processes attempt to modify the keyboard scan code remappings
             at the same time, the results will be undefined.
             The following code remaps the five function keys, so that the F1 key will generate
             the VK_F5 virtual key code, F2 the VK_F4 virtual key code, etc. All the remappings
             are applied when Blue and Orange are not pressed.
                \code
                    KeyRemapper remapper;
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F1),
                        null, FunctionSendCode, VK_F5 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F2),
                        null, FunctionSendCode, VK_F4 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F3),
                        null, FunctionSendCode, VK_F3 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F4),
                        null, FunctionSendCode, VK_F2 );
                    remapper.Add( Keyboard::TranslateToScanCode(Key_F5),
                        null, FunctionSendCode, VK_F1 );
                \endcode
              The following code causes the ENTER button to act like the scan button:
                \code
            
                    remapper.Add( Keyboard::TranslateToScanCode(Key_ENTER),
                        null, FunctionScannerOn, 0 );
            
                \endcode
             </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Finalize">
            <summary>
            Destructor.
            </summary>
            <remarks>
            <p> Destruct the KeyRemapper object but remain all it's remappings.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Add(System.Int32,System.Nullable{PsionTeklogix.Keyboard.Key},PsionTeklogix.Keyboard.Function,System.Int32)">
            <summary>
            Adds a new remapping to the table.
            </summary>
            <remarks>
            <p> If a scan code with a remapping is assigned a different remapping, it
            will override the current remapping.</p>
            <p> It is possible to remap a scan code that is not generated by a key on
            a keyboard. No error will be generated.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <param name="modifier">The modifier key related to the scan code,
            or null to indicate that no modifier key is involved.</param>
            <param name="function">The new remapping for the scan code.</param>
            <param name="data">The data to be send with the function.</param>
            <exception cref="T:System.ArgumentException">One or more parameters are invalid.
            </exception>
            <exception cref="T:System.Exception">Failed to add a scan code remapping.
            </exception>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Remove(System.Int32,System.Nullable{PsionTeklogix.Keyboard.Key})">
            <summary>
            Remove a remapping, if exists.
            </summary>
            <param name="scanCode">The scan code to be unmapped.</param>
            <param name="modifier">The modifier key related to the scan code,
            or null to indicate that no modifier key is involved.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.RemoveAll">
            <summary>
            Remove all remappings from system.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.Restore">
            <summary>
            Remove all remappings added by current object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyRemapper.GetAllKeyRemappings">
            <summary>
            Get all existing remappings.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping">
            <summary>
            The KeyRemapping struct is used to hold the function code and data generated
            by a remapped scan code.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.scanCode">
            <summary>
            The scan code to use.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.modifier">
            <summary>
            The modifier key related to the scan code.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.function">
            <summary>
            The function code to be generated when the
            remapped scan code is generated by a key press.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyRemapper.KeyRemapping.data">
            <summary>
            The data to be send with the function. The data could
            be a virtual key code, a trigger source ID, or other value
            depending on the function specified.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Sound.SoundOptions">
            <summary>
            Options for how sounds are played.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Sound.SoundOptions.Asynchronous">
            <summary>Don't wait for the sound to start or end.</summary>
        </member>
        <member name="F:PsionTeklogix.Sound.SoundOptions.Synchronous">
            <summary>Wait for the sound to end.</summary>
        </member>
        <member name="F:PsionTeklogix.Sound.SoundOptions.AsynchronousLoop">
            <summary>Don't wait for the sound to start or 
            end. You need to use StopWave() to end. NOTE:
            The sound plays repeatedly.</summary>
        </member>
        <member name="T:PsionTeklogix.Sound.Sound">
             <summary>
             Functions for working with sounds.
             </summary>
             <example>
             The following console example shows how to use the sound functions in C# code.
             <code lang="C#">
            using System;
            using PsionTeklogix.Sound;
            
            namespace MyAppplication
            {
                class SoundExample
                {
                     
                      //! The main entry point for the application.
                     
                     [STAThread]
                     static void Main(string[] args)
                     {
                         for(;;)
                         {
                             Usage();
                             if (Parse())
                                 return;
                         }
                     }
            
                     static private void Usage()
                     {
                         Console.WriteLine("Press '1' to Play Wave File");
                         Console.WriteLine("Press '2' to Play Wave Resource");
                         Console.WriteLine("Press '3' to Play System Sound (Exclamation)");
                         Console.WriteLine("'Quit' to quit.");
                     }
            
                     static private bool Parse()
                     {
                         int c = Console.Read(); 
                         switch (c.ToString().ToUpper())
                         {
                             case "1":
                                 Sound.Volume = 75;
                                 Sound.PlayWaveFile("Laugh.wav");
                                 break;
            
                             case "2":
                                 Sound.Volume = 80;
                                 Sound.PlayWaveResource("MyApplication.SoundExample.Cry.wav", 
                                                         SoundOptions.Synchronous);
                                 break;
            
                             case "3":
                                 Sound.Volume = 100;
                                 Sound.PlayWaveSystem("Exclamation");
                                 break;
            
                             case "Quit":
                                 return true;
                         }
            
                         return false;
                     }
                  }
            }
             </code>
             Same code in VB coding style.
             <code lang="VB">
            Imports PsionTeklogix.Sound
            
            Namespace MyApplication
                Module SoundExample
            
                    Sub Main()
                        While True
                            Usage()
                            If Parse() Then
                                Return
                            End If
                        End While
                    End Sub
            
                    Private Sub Usage()
                        Console.WriteLine("Press '1' to Play Wave File")
                        Console.WriteLine("Press '2' to Play Wave Resource")
                        Console.WriteLine("Press '3' to Play System Sound (Exclamation)")
                        Console.WriteLine("'N' to quit.")
                    End Sub
            
                    Private Function Parse() As Boolean
                        Dim c As Integer = Console.Read()
            
                        Select Case (c.ToString().ToUpper)
                            Case "1"
                                Sound.Volume = 75
                                Sound.PlayWaveFile("Laugh.wav")
            
                            Case "2"
                                Sound.Volume = 80
                                Sound.PlayWaveResource("MyApplication.SoundExample.Cry.wav", _
                                      SoundOptions.Synchronous)
            
                            Case "3"
                                Sound.Volume = 100
                                Sound.PlayWaveSystem("Network Begin")
            
                            Case "N"
                                Return True
            
                        End Select
            
                        Return False
                    End Function
                End Module
            End Namespace
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayRepeatingWave(System.String,System.Int32)">
            <summary>
            Play a wave file asynchronously through the speaker, delay, then repeat. 
            This will continue until the <see cref="M:PsionTeklogix.Sound.Sound.StopRepeatingWave"/> method is called.
            An exception will be thrown if the call can not be successfully completed.
            </summary>
            <param name="waveFilename">The wave file to play.</param>
            <param name="repeatDelay">The delay between repeats in milliseconds.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.StopRepeatingWave">
            <summary>
            Stop playing a repeating wave file started with the 
            <see cref="M:PsionTeklogix.Sound.Sound.PlayRepeatingWave(System.String,System.Int32)"/> method.  An exception will be thrown if the call 
            can not be successfully completed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveFile(System.String)">
            <summary>
            Play a wave file asynchronously.
            </summary>
            <param name="fileName">The wave file name.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveFile(System.String,PsionTeklogix.Sound.SoundOptions)">
            <summary>
            Play a wave file with the selected option.
            </summary>
            <param name="fileName">The wave file file name.</param>
            <param name="option">The selected operation.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveResource(System.String)">
            <summary>
             Plays a wave resource that was embedded into an assembly. The wave file will
            be played asynchronously. This method must be called from the assembly containing
            the resource to be played.
            </summary>
            <remarks>
            The wave file should have been included in the project and its Build Action
            set to Embedded Resource.
            The names of embedded resources can be retrieved using the 
            <c>Assembly.GetManifestResourceNames</c> method.
            </remarks>
            <param name="resourceName">The name of the resource in the assembly.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveResource(System.String,PsionTeklogix.Sound.SoundOptions)">
            <summary>
             Plays a wave resource that was embedded into an assembly. This method must be 
            called from the assembly containing the resource to be played.
            </summary>
            <remarks>
            The wave file should have been included in the project and its Build Action
            set to Embedded Resource.
            The names of embedded resources can be retrieved using the 
            <c>Assembly.GetManifestResourceNames</c> method.
            </remarks>
            <param name="resourceName">The name of the resource in the assembly.</param>
            <param name="option">The selected operation.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveSystem(System.String)">
            <summary>
            Play a system sound by its name asynchronously.
            </summary>
            <param name="soundName">The system soundName.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.PlayWaveSystem(System.String,PsionTeklogix.Sound.SoundOptions)">
            <summary>
            Play a system sound by it's name.
            </summary>
            <param name="soundName">The system soundName.</param>
            <param name="option">The selected operation.</param>
        </member>
        <member name="M:PsionTeklogix.Sound.Sound.StopWave">
            <summary>
            Stop playing a wave sound.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Sound.Sound.Volume">
            <summary>
            Gets or sets the current volume. The volume is in the range 0 to 100
            where 0 is off and 100 is full volume.
            percent.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when attempted to
            set Volume less then 0 or greater than 100.</exception>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.RemappingTable">
            <summary>
            The scan code remapping table class is used to remap the scan codes for a particular
            scan code table to a different behaviour.
            </summary>
            <remarks>
            <p>There are three tables whose scan codes can be remapped:
            * Normal - Remappings for all scan codes when neither the blue nor the orange
                       buttons are pressed.
            * Blue - Remappings for when the blue button is pressed.
            * Orange - Remappings for when the orange button is pressed.
            </p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Add(System.UInt16,PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping)">
            <summary>
            Adds a new remapping to the table.
            </summary>
            <remarks>
            <p> If a scan code with a remapping is assigned a different remapping, it
            will override the current remapping.</p>
            <p> It is possible to remap a scan code that is not generated by a key on
            a keyboard. Mo error will be generated.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <param name="remapping">The new remapping for the scan code.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remove(System.UInt16)">
            <summary>
            Removes a remapping from the table.
            </summary>
            <remarks>
            <p>Attempting to remove a remapping for a scan that does not exist will generate
            an exception.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <exception cref="T:System.ApplicationException">ApplicationException - if the scan code
            mappings could not be retrieved.</exception>
            <exception cref="T:System.NotSupportedException">NotSupportedException - If the device
            does not support scan code remapping.</exception>
            <exception cref="T:System.ArgumentException">ArgumentException - If scan code specified
            was invalid or not mapped.</exception>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Contains(System.UInt16)">
            <summary>
            Tests if the given scan code has been remapped.
            </summary>
            <param name="scanCode">The scan code to be remapped.</param>
            <returns>true if the scan code has been remapped; false otherwise.</returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Clear">
            <summary>
            Removes all remappings from the table.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.ToString">
            <summary>
            Converts a RemappingTable object to a printable string.
            </summary>
            <returns>
            A string containing text representing the TableEntry object.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Count">
            <summary>
             Returns the number of remappings in the scan code remapping table.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Entries">
            <summary>
            A property that represents all the scan code remappings in the Remapping table.
            </summary>
            <remarks>
            <p> The array list returned by getting the value of this property is only a
            copy; manipulating its contents will have no effect on the current set of scan
            code remappings.</p>
            <p> Setting the value of this property will cause all of the remappings in the
            current table to be deleted and replaced with the remappings containing in the
            ArrayList supplied by the application. The ArrayList supplied by the application
            must only contain TableEntry objects.</p>
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Item(System.UInt16)">
            <summary>
            Gets or sets the value associated with the specified scan code.
            </summary>
            <remarks>
            <p> If the scan code is not remapped, the indexer will return null.</p>
            <p> If a scan code is assigned a null remapping, the current remapping will be
            removed.</p>
            <p> If a scan code with a remapping is assigned a different remapping, it
            will override the current remapping.</p>
            <p> It is possible to remap a scan code that is not generated by a key on
            a keyboard. Mo error will be generated.</p>
            </remarks>
            <param name="scanCode">The scan code to be remapped.</param>
            <returns>
            The remapping for the specified scan code, or null if no mapping exists.
            </returns>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping">
            <summary>
            The Remapping class is used to hold the virtual key and function code generated
            by a remapped scan code.
            </summary>
            <remarks>
            <p>For the Function.SendUnicode and Function.Macro functions, a separate
            constructor exists to allow applications to pass in a macro index or unicode
            character.</p>
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(PsionTeklogix.Keyboard.VirtualKey)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps directly
            to a virtual key. The remapping function code will be set to
            Function.Sendcode.
            </summary>
            <param name="virtualKey">The virtual key code to generate when the
            scan code being remapped is pressed.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(PsionTeklogix.Keyboard.Function)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps directly
            to a function that ignores the virtual key code.
            </summary>
            <param name="function">The operation to perform when the scan code being
            remapped is seen.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(PsionTeklogix.Keyboard.VirtualKey,PsionTeklogix.Keyboard.Function)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps
            to a virtual key. The operation specified in the 'function' parameter
            will take effect as well. See the various function descriptions for more
            information.
            </summary>
            <param name = "virtualKey">The virtual key code to generate when the
            scan code being remapped is pressed.</param>
            <param name="function">The operation to perform when the scan code being
            remapped is seen.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(System.UInt16,PsionTeklogix.Keyboard.Function)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps
            to a unicode character or macro. See the Function.SendUnicode and
            Function.Macro function descriptions for more information.
            </summary>
            <param name="functionData">For the Function.Macro, functionData is
            interpreted as an index of the macro; for the Function.SendUnicode,
            functionData is interpreted as an unicode character code; for the
            Function.SystemPowerState, functionData is interpreted as a member in
            the enum VirtualKey.SystemPowerState
            </param>
            <param name="function">The operation to perform when the scan code being
            remapped is seen.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.#ctor(System.UInt16,System.Byte)">
            <summary>
            Constructor. Used to create a remapping for a scan code that maps
            to a unicode character or macro. See the Function.SendUnicode and
            Function.Macro function descriptions for more information.
            </summary>
            <param name="functionData">For the Function.Macro, functionData is
            interpreted as an index of the macro; for the Function.SendUnicode,
            functionData is interpreted as an unicode character code; for the
            Function.SystemPowerState, functionData is interpreted as a member in
            the enum VirtualKey.SystemPowerState
            </param>
            <param name="MacroIndexOrUnicodeValue">the macro index or unicode character
            value for remappings that use them.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.GetHashCode">
            <summary>
            Serves as a hash function for the Remapping class, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns> A hash code for the current Remapping object.</returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.Equals(System.Object)">
            <summary>
            Determines whether two Remapping object instances are equal.
            </summary>
            <remarks>
            Two Remapping objects are considered equal if the have the same virtual
            key code (or macro/unicode character code) and the function code.
            </remarks>
            <param name="o">
            The Object to compare with the current Remapping object.
            </param>
            <returns>
            true if the specified object is equal to the current Remapping object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.ToString">
            <summary>
            Converts a Remapping object to a printable string.
            </summary>
            <returns>
            A string containing text representing the Remapping object.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.MacroIndexOrUnicodeValue">
            <summary>
            Returns the macro index or unicode character value for remappings that
            use them. For other functions, the virtual key value will be returned.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.VirtualKey">
            <summary>            
            Returns the virtual key value associated with this remapping. All new 
            virtual keys(that have not been updated by the SDK) on the driver will 
            return VirtualKey.Unknown by this API.  Please use MacroIndexOrUnicodeValue 
            to get the exact value of these new virtual key values.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.Function">
            <summary>
            Returns the function code associated with this remapping.  All new function 
            keys(that have not been updated by the SDK)on the driver will return 
            Function.Unknown by this API.  Please use FunctionKey to get the exact 
            value of these new function key values.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping.FunctionKey">
            <summary>
            Returns the function code associated with this remapping.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry">
            <summary>
            A TableEntry represents a scan code remapping in one of the RemappingTables.
            A TableEntry object contains the scan code that has been remapped, along
            with the Remapping object that defines the operation to perform and/or virtual
            key etc. to generate when the scan code is seen.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.#ctor(System.UInt16,PsionTeklogix.Keyboard.NoChording.RemappingTable.Remapping)">
            <summary>
            Constructor. Used to create a TableEntry for a scan code that has been
            remapped to some function code/virtual key combination.
            </summary>
            <param name="scanCode">The scan code to be remapped.</param>
            <param name="remapping">The scan code to be remapped.</param>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.GetHashCode">
            <summary>
            Serves as a hash function for the TableEntry class, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns> A hash code for the current TableEntry object.</returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.Equals(System.Object)">
            <summary>
            Determines whether two TableEntry object instances are equal.
            </summary>
            <remarks>
            Two TableEntry objects are considered equal if the have the same scan code
            and same Remappings.
            </remarks>
            <param name="o">
            The Object to compare with the current TableEntry object.
            </param>
            <returns>
            true if the specified object is equal to the current TableEntry object;
            otherwise, false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.ToString">
            <summary>
            Converts a TableEntry object to a printable string.
            </summary>
            <returns>
            A string containing text representing the TableEntry object.
            </returns>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.ScanCode">
            <summary>
            Returns the scan code associated with this TableEntry.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.RemappingTable.TableEntry.Remapping">
            <summary>
            Returns the remapping object associated with this TableEntry.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping">
             <summary>
             The ScanCodeRemapping class is used to remap the scan codes of the keys on a
             Psion Teklogix device, in order to change the behaviour of the key(s). Any key or
             keys on the device can be remapped.
            
             <p>The ScanCodeRemapping class enables applications to perform the follow
             operations:
             * Create one or more scan code remappings for a scan code table.
             * Remove a scan code remapping from a scan code table.
             * Remove all scan code remappings from a scan code table.
             * Check to see if a particular scan code has been remapped.
             * Convert the table to a printable string
             </p>
             </summary>
             <remarks>
             <p>A scan code is an integer value representing a key on a keyboard, and is
             hardware-specific (more precisely, specific to the type of keyboard on the
             Windows CE device). The scan code for the ENTER key, for example, may be different
             on the 56-key and 37-key boards. Keys with identical names (like ENTER) may have
             different scan codes. Consult your hardware guide for keyboard scan code values.</p>
            
             <p>Modifier keys are keys on the keyboard that when pressed, change the behaviour
             of other keys on the keyboard. The following keys are considered modifier keys:
             BLUE, ORANGE, ALT, SHIFT, CTRL. BLUE, ORANGE, and SHIFT can actually change the
             virtual key value generated by a scan code press (see below).</p>
            
             <p>A virtual-key code is a device-independent value defined by the system that
             identifies the purpose of a key. Scan codes are mapped to virtual key codes by
             the keyboard driver. However, the same scan code can map to different virtual key
             values due to the state of other keys on the keyboard, primarily the BLUE and
             ORANGE modifier keys. There is a separate table that represents the scan code to
             virtual key mappings when one of these two keys (BLUE, ORANGE) has been pressed,
             and another for when neither key has been pressed. SHIFT can also affect the
             virtual code generated, however the SHIFT table cannot be remapped. The CTRL and
             ALT modifier keys will not change the virtual key code generated, however an
             application can detect the state of these keys and change its behaviour
             accordingly.</p>
            
             <p>A function (see the Function enumeration) is an operation that will be performed
             when a particular scan code is generated by a key press. This operation may modify
             the virtual key code generated, or cause some other effect to take place, for
             example change the backlight intensity. Typically, functions can be categorized
             as follows:
             * Macro - maps a scan code to macro key, which will then be mapped into a sequence
               of one of more virtual key codes. No virtual key code is generated.
             * Operation only - maps a scan code to some specific behaviour - no virtual key
               code is generated.
             * Virtual key (+modifier) - maps a scan code to a virtual key code, and may
               simulate the pressing of one or more modifier keys.
             * Direct Unicode Mapping - allows a scan code to be mapped directly to UNICODE
               character, meant generating characters with no virtual key equivalents.
             * Modifier key mapping - causes a scan code to simulate the pressing of a modifier
               key, in order to correctly update the modifier key state (off -> one shot ->
               locked -> off).
             * Null mapping - The Function.Skip operation causes a scan code to be ignored.
             </p>
            
             <p>A scan code mapping involves all of the above elements, where a scan code (X)
             generated by a key is mapping to a function (F), and possibly a virtual key (VK),
             macro index, or unicode character value. A default mapping exists for every scan
             code. Scan code remappings are used to override existing mappings.</p>
            
             <p>Some characters do not have virtual key codes, but can be generated using
             shifted key codes. For example, a '+' character is actually generated by sending
             a shifted '=' virtual key code (that is, the scan code is mapped to VK_EQUAL and
             the function Function.SendShiftedCode). These mappings can be inferred from a
             standard PC keyboard.</p>
            
             <p>If two threads or processes attempt to modify the keyboard scan code remappings
             at the same time, the results will be undefined.</p>
            
             </remarks>
             <example>
             <p>The following code remaps the five function keys on a 7535's 56-key keyboard, so
             that the F1 key wil generate the VK_F5 virtual key code, F2 the VK_F4 virtual key
             code, etc. All the remappings are added to the normal table (BLUE and ORANGE not
             pressed).</p>
             <pre>
            
                 ScanCodeRemapping.NormalTable.Add(0x10, new RemappingTable.Remapping(VirtualKey.VK_F5));
                 ScanCodeRemapping.NormalTable.Add(0x20, new RemappingTable.Remapping(VirtualKey.VK_F4));
                 ScanCodeRemapping.NormalTable.Add(0x30, new RemappingTable.Remapping(VirtualKey.VK_F3));
                 ScanCodeRemapping.NormalTable.Add(0x40, new RemappingTable.Remapping(VirtualKey.VK_F2));
                 ScanCodeRemapping.NormalTable.Add(0x50, new RemappingTable.Remapping(VirtualKey.VK_F1));
            
             </pre>
             </example>
            
             <example>
             <p> The following code causes the ENTER button to act like the scan button (again,
             assuming a 7535 with a 56-key keyboard):</p>
            
             <pre>
            
                 ScanCodeRemapping.NormalTable.Add(0x08, new RemappingTable.Remapping(Function.ScannerOn));
            
             </pre>
             </example>
            
             <example>
             <p> If a program needs to temporarily override existing key remappings, it can
             preserve the existing remappings by doing the following:</p>
            
             <pre>
            
                 ArrayList oldRemappings = ScanCodeRemapping.BlueKeyTable.Entries;
            
                 // ...change remappings here ...
            
                 ScanCodeRemapping.BlueKeyTable.Entries = oldRemappings;
            
             </pre>
             </example>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping.BlueKeyTable">
            <summary>
            The blue key table contains remappings for all scan codes when the blue key
            is pressed.
            </summary>
            <remarks>
            If both the blue and orange keys have been pressed (they are both in either the
            one-shot or locked state), the blue key has precedence.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping.NormalTable">
            <summary>
            The normal table contains remappings for all scan codes when neither the blue
            key nor the orange key is pressed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.NoChording.ScanCodeRemapping.OrangeKeyTable">
            <summary>
            The orange key table contains remappings for all scan codes when the orange
            key is pressed.
            </summary>
            <remarks>
            If both the blue and orange keys have been pressed (they are both in either the
            one-shot or locked state), the blue key has precedence.
            </remarks>
        </member>
        <member name="T:PsionTeklogix.Barcode.TriggerState">
            <summary>
            Enumerates the valid trigger states on a Psion Teklogix device.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerState.Up">
            <summary>
            Indicates that the scanner trigger has been released.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerState.Down">
            <summary>
            Indicates that the scanner trigger has been pressed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.TriggerCaptureState">
            <summary>
            Enumerates the valid trigger capture states on a Psion Teklogix device. Trigger
            capturing can be used to allow applications to determine the behaviour of the 
            scan button and external trigger.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerCaptureState.Disabled">
            <summary>
            Indicates that the scanner or imager should no longer capture trigger presses. 
            The default trigger capturing state is disabled.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.TriggerCaptureState.Enabled">
            <summary>
            Indicates that the scanner or imager should capture trigger presses. Every 
            trigger up and trigger down will generate an event that will be published to 
            registered image capture trigger handlers.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.SignatureControl">
            <summary>
            Implements Signature control that may be placed on a form to capture a 
            signature from a user.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.#ctor">
            <summary>
            Creates a new instance of a signature box.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnResize(System.EventArgs)">
            <summary>
            Handle the Resize event. Dispose of old bitmap and graphics and create new one.
            </summary>
            <param name="e">Resize event arguments.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Save(System.IO.Stream)">
            <summary>
            Save the signature bitmap to a stream in monochrome BMP format.
            </summary>
            <remarks>
            Saving is slow so the cursor should be changed to the busy cursor.
            </remarks>
            <example>
            <code lang="C#">
            Cursor.Current = Cursors.WaitCursor;
            mySignature.Save(bitmapStream);
            Cursor.Current = Cursors.Default;
            </code>
            </example>
            <param name="stream">Stream to write.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Save(System.String)">
            <summary>
            Save the signature bitmap to a monochrome BMP file.
            </summary>
            <remarks>
            Saving is slow so the cursor should be changed to the busy cursor.
            </remarks>
            <example>
            <code lang="C#">
            Cursor.Current = Cursors.WaitCursor;
            mySignature.Save("filename.bmp");
            Cursor.Current = Cursors.Default;
            </code>
            </example>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Clear">
            <summary>
            Clear the current signature.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the pen is placed in the signature box.
            </summary>
            <param name="sender">Object representing the sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the pen is moved from the signature box.
            </summary>
            <param name="sender">Object representing the sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the pen is moved through the signature box.
            </summary>
            <param name="sender">Object representing the sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.DrawImage(System.Collections.ArrayList)">
            <summary>
            It allows developers to redraw the signature. This approach allows easier 
            persistence of the signature in your database, flat file, etc. We didn't
            provide the serialization mechanism because there isn't one included into 
            .NET CF. This allows developers to use their own. If however, developers
            don't want to use this approach, they have option to persist their signatures
            into bitmap.
            </summary>
            <param name="p">New signature to draw, as an ArrayList of Point[] lines.</param>
        </member>
        <member name="M:PsionTeklogix.Windows.Forms.SignatureControl.Dispose(System.Boolean)">
            <summary>
            Release graphics resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.SignatureControl.Image">
            <summary>
            The bitmap image of the signature.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Windows.Forms.SignatureControl.Lines">
            <summary>
            The signature data, as an ArrayList of strokes. Each stroke is of type Point[].
            </summary>
        </member>
        <member name="T:PsionTeklogix.Windows.Forms.FormCompleteEventArgs">
            <summary>
            Form complete status change event arguments.
            </summary>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Security">
             @depredated (2010?)
             <summary>
             Deprecated -  Use PsionVu instead. The Security class is used to change the 
             security settings of a Psion Teklogix 
             device. Currently, the Security class can be used to perform the following 
             operations:
            
             * Set the security level of WindowsCE shell. Some Psion Teklogix devices can be 
               configured to allow different levels of access to their shells. Descriptions of 
               the various security levels can be found below.
             * Get the shell security level. Applications can retrieve the current shell 
               security level and use the value in order to restrict access to programs or 
               program features, based on the current security setting.
             * Register to receive a notification when the shell security level changes.
             * Pop up the shell security-related dialog boxes (configuration dialog, and the
               security level setting change dialog).
            
             As mentioned above, there are three levels of security:
             1. <b>User</b>. The <b>User</b> security level is the most restrictive access 
                level. Users are not allowed to access the Desktop, Programs, Settings, and Run 
                entries in the start menu. If the desktop is visible, the "My Computer" and
                "Recycle Bin" icons will not be usable. Most TekTerm parameters will not be visible.
             2. <b>Supervisor</b>. The <b>Supervisor</b> security level allows access to most 
                of the features of a Psion Teklogix device, with the exception of a few TekTerm 
                parameters and program features.
             3. <b>Teklogix</b>. The <b>Teklogix</b> security level allows access to all of the 
                features, programs, and parameters of a Psion Teklogix device.
             </summary>
             
             <remarks>
             Currently, the shell security settings are only available on the 7530, 7535, and 
             7525 (the WORKABOUT PRO).
             </remarks>
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.eventList">
            Attached Event listeners. 
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.Dispose">
            <summary>
            Deprecated - The Dispose method is used to release all internal static 
            resources owned by
            the security API, stops any running threads, etc.
            </summary>
            <remarks>
            Deprecated. Remove the event handlers from ShellSecurityLevelChangeHandler
            instead. 
            
            Events will no longer be generated after this method is invoked.
            Failure to call this method before an application terminates may prevent the
            application from exiting properly.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.GetShellSecurityLevel">
             <summary>
             Returns the current shell security level configured on the Psion Teklogix device. 
             </summary>
             <remarks>
             Devices that support the shell security API use a default security level of User.
             </remarks>
            
             <returns>The current shell security level.</returns>
             <exception name="ApplicationException">ApplicationException - If the device 
             does not support the shell security API.</exception>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.SetShellSecurityLevel(PsionTeklogix.SystemPTX.Security.SecurityLevel,System.String)">
            <summary>
            Changes the current shell security level configured on the Psion Teklogix device. 
            Valid shell security levels are:
            * <b>User</b>
            * <b>Supervisor</b>
            * <b>Teklogix</b>
            </summary>
            <remarks>
            <p>Changing the security level requires that a valid password be supplied for the
            new level.</p>
            <p>When changing the security level to User, the password parameter
            is ignored.</p>
            </remarks>
            <param name="securityLevel">The shell security level to set.</param>
            <param name="password">The password for the security level specified.</param>
            <exception cref="T:System.ArgumentException">ArgumentException - If the password is null 
             or incorrect when attempting to change to a non-<b>User</b> security level.
            </exception>
            <exception name="ApplicationException">ApplicationException - If the device 
            does not support the shell security API.</exception>
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.ShowShellSecurityConfigDialog">
             <summary>
             Launches the shell security configuration dialog, showing the current shell 
             security configuration settings.
             </summary>
             <exception name="ApplicationException">ApplicationException - If the device 
             does not support the shell security API.</exception>
            
        </member>
        <member name="M:PsionTeklogix.SystemPTX.Security.ShowShellSecurityChangeDialog">
             <summary>
             Launches the shell security change dialog. It allows a user to change the security
             level, rather than changing the level through the security API.
             </summary>
             <exception name="ApplicationException">ApplicationException - If the device 
             does not support the shell security API.</exception>
            
        </member>
        <member name="E:PsionTeklogix.SystemPTX.Security.shellSecurityEvent">
            The shell security level change event. All subscribing functions will be
            notified when an shell security event occurs.
            <exception name="ArgumentException">If Attempting to deregister an 
            unregistered event handler. </exception>        
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Security.SecurityLevel">
            Enumerates the security levels that can be configured on a Psion Teklogix device.
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.SecurityLevel.User">
             The <b>User</b> security level is the most restrictive access level. Users 
            are not allowed to access the Desktop, Programs, Settings, and Run 
            entries in the start menu. If the desktop is visible, the "My Computer" 
            and "Recycle Bin" icons are not accessible. Most TekTerm parameters will 
            not be visible.
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.SecurityLevel.Supervisor">
             The <b>Supervisor</b> security level allows access to most of the features 
            of a Psion Teklogix device, with the exception of a few TekTerm parameters 
            and program features.
        </member>
        <member name="F:PsionTeklogix.SystemPTX.Security.SecurityLevel.Teklogix">
             The <b>Teklogix</b> security level allows access to all of the features, 
            programs, and parameters of a Psion Teklogix device.
        </member>
        <member name="T:PsionTeklogix.SystemPTX.Security.ShellSecurityLevelChangeHandler">
            The ShellSecurityLevelChangeHandler delegate defines the signature for any
            function that is to be registered to receive shell security level change events.
        </member>
        <member name="T:PsionTeklogix.RAS.ConnectionStateEventHandler">
             <summary>
             The ConnectionStateEventHandler delegate represents the method that will be called
             when the phone book Entry state changes.
             </summary>
             <example>
             The following example shows how the delegate can be used to track the state of the dial
             up connection.
             <code lang="VB">
             Imports PsionTeklogix.RAS
            
             Public Sub DialEntry(name As String)
                 Dim entry as Entry
                 dim pb As New Phonebook
            
                 entry = pb.Entry(name)
            
                 ' Dial asyncronously
                 entry.Dial(False, AddressOf(OnStateChange))
             End Sub
            
             ' Callback function for state changes
             Private Sub OnStateChange(sender As Object, e As ConnectionStateEventArgs)
                 ' Inform the user that the connection has been established.
                 If e.State = ConnectionStates.Connected Then
                     MessageBox.Show("The Connection has been established")
                 End If  
             End Sub
             </code>
             </example>
        </member>
        <member name="T:PsionTeklogix.RAS.ConnectionStates">
            <summary>
            This enumeration type contains values that specify the states that may occur during a 
            RAS connection operation. If you use the Dial method to establish a RAS connection, 
            you can specify a callback to receive state changes for the current connection state. 
            You can also use the ConnectionStatus method to get the connection state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.OpenPort">
            <summary>The communication port is about to be opened.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.PortOpened">
            <summary>The communication port has been opened successfully.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.ConnectDevice">
            <summary>A device is about to be connected. RasGetConnectStatus
            can be called to determine the name and type of the device being 
            connected.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.DeviceConnected">
            <summary>A device has connected successfully.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AllDevicesConnected">
            <summary>All devices in the device chain have successfully 
            connected. At this point, the physical link is established.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Authenticate">
            <summary>The authentication process is starting. Remote access 
            does not enable the remote client to generate any traffic on 
            the LAN until authentication has been successfully completed. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthNotify">
            <summary>An authentication event has occurred. If dwError is 
            zero, this event will be immediately followed by one of the 
            more specific authentication states following. If dwError is 
            nonzero, authentication has failed, and the error value indicates 
            why.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthRetry">
            <summary>The client has requested another validation attempt 
            with a new user name/password/domain. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthCallback">
            <summary>The remote access server has requested a callback 
            number. This occurs only if the user has "Set By Caller" callback 
            privilege on the server.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthChangePassword">
            <summary>The client has requested to change the password on the account. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthProject">
            <summary>The projection phase is starting.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthLinkSpeed">
            <summary>The link-speed calculation phase is starting.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.AuthAck">
            <summary>An authentication request is being acknowledged.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.ReAuthenticate">
            <summary>Reauthentication (after callback) is starting.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Authenticated">
            <summary>The client has successfully completed authentication.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.PrepareForCallback">
            <summary>The line is about to disconnect in preparation 
            for callback.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.WaitForModemReset">
            <summary>The client is delaying in order to give the modem time to 
            reset itself in preparation for callback.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.WaitForCallback">
            <summary>The client is waiting for an incoming call from the remote 
            access server.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Projected">
            <summary>This state occurs after the AuthProject state. It indicates
            that projection result data is available.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Interactive">
            <summary>This state corresponds to the terminal state supported by 
            RASPHONE.EXE. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.RetryAuthentication">
            <summary>This state corresponds to the retry authentication state 
            supported by RASPHONE.EXE.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.CallbackSetByCaller">
            <summary>This state corresponds to the callback state supported by 
            RASPHONE.EXE. </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.PasswordExpired">
            <summary>This state corresponds to the change password state supported 
            by RASPHONE.EXE.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Connected">
            <summary>Successful connection.</summary>
        </member>
        <member name="F:PsionTeklogix.RAS.ConnectionStates.Disconnected">
            <summary>Disconnection or failed connection.</summary>
        </member>
        <member name="T:PsionTeklogix.RAS.Entry">
            <summary>
            The Entry class describes the attributes and status of a phonebook entry.
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.Entry._connectionStateCallback">
            <summary>
            Occurs when a connection state change has occured.
            </summary>
            <remarks>
            If there is no event callback has been registered then the operation of this 
            class will be syncronous in nature.
            </remarks>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.#ctor(System.String)">
            <summary>
            Initialzes a new instance of an RasEntry class. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.Dial(System.Boolean)">
            <summary>
            Dial an entry syncronously.
            </summary>
            <param name="showLogin"></param>
            <returns>True connected and False if not connected.</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.Dial(System.Boolean,PsionTeklogix.RAS.ConnectionStateEventHandler)">
            <summary>
            Dial a phone book entry asyncronously.
            </summary>
            <param name="showLogin">Show the Login dialog.</param>
            <param name="callback">The callback function for processing async messages.</param>
            <returns>True if dialing and False if login cancelled or not dialing.</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.HangUp">
            <summary>
            This method hangs up a connection for the this entry.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.OnStateChange(PsionTeklogix.RAS.ConnectionStates,System.Int32)">
            <summary>
            Generates an event when tha state changes. Called from the WinProc
            callback.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.Entry.GetExistingHandle">
            <summary>
            Update the handle. This allows the entry to be established elsewhere
            and there will always be a correct handle.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Name">
            <summary>
            Gets the name of the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.UserName">
            <summary>
            Gets or Sets the user name for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Password">
            <summary>
            Gets or Sets the password for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Domain">
            <summary>
            Gets or Sets the domain for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.Error">
            <summary>
            Gets the current error code for the connection.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.Entry.EntryProperties">
             <summary>
             Allows an application to retrieve or modify the properties of the RAS entry.
             </summary>
             <remarks>
             <p>An application should modify the entry properties using the existing set 
             of properties:</p>
            
             <pre>
               RasEntryProperties props = myEntry.EntryProperties;
               
               (... change appropriate properties here ...)
            
               myEntry.EntryProperties = props;
             </pre>
            
             </remarks>
             <exception cref="T:System.ApplicationException">If the entry properties could not be 
               retrieved.</exception>
             <exception cref="T:System.ArgumentException">If the entry was not found.</exception>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper">
            <summary>
            A utility class for use with AGPS.
            </summary>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.SetDownloadPeriod(PsionTeklogix.AGPS.Helper.DownloadPeriod)">
            <summary>
            Set the current AGPS data download period
            </summary>
            <param name="hours"></param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.GetDownloaderConfig(PsionTeklogix.AGPS.Helper.DownloaderConfiguration@)">
            <summary>
            Query the downloader service for it's configuration information.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.SetDownloaderConfig(PsionTeklogix.AGPS.Helper.DownloaderConfiguration)">
            <summary>
            Set the downloader service's configuration.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.GetDriverConfig(PsionTeklogix.AGPS.Helper.DriverConfiguration@)">
            <summary>
            Query the downloader service for it's configuration information.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.SetDriverConfig(PsionTeklogix.AGPS.Helper.DriverConfiguration)">
            <summary>
            Set the downloader service's configuration.
            </summary>
            <param name="config">A configuration object to be filled with data.</param>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.RequestDownloadNow">
            <summary>
            Request a download of the emphermeral data.
            </summary>
        </member>
        <member name="M:PsionTeklogix.AGPS.Helper.GetDownloadStatus(PsionTeklogix.AGPS.Helper.DownloadStatus@)">
            <summary>
            Get the download status information
            A null entry indicates that a particular event has not yet 
            occurred.  For example if dlStatus.lastSuccessfulDownload == null
            then we have never had a successful download.
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DownloadPeriod">
            <summary>
            Typical download periods
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Manual">
            <summary>
            No automatic downloads
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_12">
            <summary>
            every 12 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_18">
            <summary>
            every 18 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_24">
            <summary>
            every 24 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_36">
            <summary>
            every 36 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_48">
            <summary>
            every 48 hours
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadPeriod.Period_72">
            <summary>
            every 72 hours
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DownloaderConfiguration">
            <summary>
            This class encapsulates configuration settings of the AGPS downloader.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.ephemerisFilePath">
            <summary>
            path for ephemeris data 
            This path MUST match the path used by the driver (DriverConfiguration).
            If they are different the downloader will place the file in one location and the 
            driver will look for it in a different location.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.localFileName">
            <summary>
             Name of file to store data in
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.initialDelay">
            <summary>
            initial delay between loader starting and first download (in seconds)
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.retryOnFailDelay">
            <summary>
            delay between a failed download and retry (in seconds)
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloaderConfiguration.downloadPeriod">
            <summary>
            periodic download frequency See: SetDownloadPeriod()
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DriverConfiguration">
            <summary>
            Configuration settings of the AGPS driver.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DriverConfiguration.enabled">
            <summary>
            While set to false, downloaded ephemeris data will be ignored
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DriverConfiguration.ephemerisFilePath">
            <summary>
            This path MUST match the path used by the downloader (AgpsDownloaderConfiguration).
            If they are different the downloader will place the file in one location and the driver 
            will look for it in a different location
            </summary>
        </member>
        <member name="T:PsionTeklogix.AGPS.Helper.DownloadStatus">
            <summary>
            Download status of the AGPS data.
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadStatus.lastSuccessfulDownload">
            <summary>
            timestamp of last successful download of ephemeral data
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadStatus.lastUnsuccessfulDownload">
            <summary>
            timestamp of last unsuccessful attempt to download ephemeral data
            </summary>
        </member>
        <member name="F:PsionTeklogix.AGPS.Helper.DownloadStatus.nextScheduledDownload">
            <summary>
            timestamp of next scheduled attempt to download ephemeral data
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralType">
            Provide storage for constants used for peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.Unknown">
            constant for specifying unknown peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.InternalBluetooth">
            constant for specifying internal bluetooth radio
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.InternalGSM">
            constant for specifying GSM radio
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.PCMCIA_Slot0">
            constant for built-in PCMCIA slot 0
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.PCMCIA_Slot1">
            constant for built-in PCMCIA slot 1
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralType.SDMMC_Slot">
            constant for built-in SDMMC
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralSetting">
            Provide storage for constants used for peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralSetting.Enable">
            constant for specifying enabling/disabling of a peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralSetting.PowerMode">
            constant for specifying power mode of a peripheral device
        </member>
        <member name="T:PsionTeklogix.Peripherals.PeripheralPowerMode">
            Provide storage for constants used for peripheral device
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.AlwaysOn">
            keep device on all the time
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.AlwaysOff">
            keep device off all the time
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffFollowSuspend">
            turn device off after terminal goes into suspend
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor5Minutes">
            turn device off after on for 5 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor15Minutes">
            turn device off after on for 15 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor30Minutes">
            turn device off after on for 30 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor60Minutes">
            turn device off after on for 60 minutes
        </member>
        <member name="F:PsionTeklogix.Peripherals.PeripheralPowerMode.OffAfterOnFor120Minutes">
            turn device off after on for 120 minutes
        </member>
        <member name="T:PsionTeklogix.RAS.Win32">
            <summary>
            Win32 API definitions.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Display.Orientation">
            <summary> Allows an application to determine and control the properties of 
            a device's display orientation such as automatic rotation behavior and current 
            screen orientation.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.AutoRotationSupported">
            <summary>Whether or not auto-rotation is supported.</summary>
        </member>
        <member name="M:PsionTeklogix.Display.Orientation.#ctor">
            <summary>
            Constructor. Provides access to the Orientation object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Display.Orientation.Finalize">
            <summary>
            Finalize. This destructor will run only if the Dispose method
            does not get called.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Display.Orientation.Dispose">
            <summary>
            Implementation for IDisposable interface
            </summary>
        </member>
        <member name="M:PsionTeklogix.Display.Orientation.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">true if called from user code</param>
        </member>
        <member name="M:PsionTeklogix.Display.Orientation.OnOrientationChanged">
            <summary>
            Overridable member that is called when the orientation is 
            being changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Display.Orientation.CurrentAutoRotateBehavior">
            <summary>Gets or sets the current automatic rotation behavior.</summary>
            <exception cref="T:System.Exception">Thrown when get or set is not successul.
            </exception>
        </member>
        <member name="E:PsionTeklogix.Display.Orientation.OrientationChangedEvent">
            <summary>
            Occurs when the screen orientation has changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Display.Orientation.CurrentOrientation">
            <summary>
            Gets or Sets the current screen orientation. Once the screen has been rotated
            the SIP and desktop will be informed that the screen has been rotated.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Display.Orientation.IsRotationSupported">
            <summary>
            Gets an indicator if screen rotation is supported.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Display.Orientation.AutoRotateBehavior">
            <summary>Options for automatic rotation.</summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.AutoRotateBehavior.Off">
            <summary>No automatic rotation.</summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.AutoRotateBehavior.PortraitOnly">
            <summary>Automatic rotation among both Portrait orientations only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.AutoRotateBehavior.LandscapeOnly">
            <summary>Automatic rotation among both Landscape orientations only.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.AutoRotateBehavior.All">
            <summary>Automatic rotation among all four orientations.</summary>
        </member>
        <member name="T:PsionTeklogix.Display.Orientation.Orientations">
            <summary>
            Possible screen orientations.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.Orientations.Orient0Degrees">
            <summary>Portrait</summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.Orientations.Orient90Degrees">
            <summary>Landscape</summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.Orientations.Orient180Degrees">
            <summary>Inverted portrait.</summary>
        </member>
        <member name="F:PsionTeklogix.Display.Orientation.Orientations.Orient270Degrees">
            <summary>Inverted landscape.</summary>
        </member>
        <member name="T:PsionTeklogix.Display.Orientation.OrientationChangedEventHandler">
            <summary>
            The OrientationChangedEventHander delegate represents the method that will be called
            when the orientation is changed by another program or section of a program's code.
            This allows a form or some other visual component to re-orient based on the new
            screen orientation.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Display.Orientation.OrientationChangedEventArgs">
            <summary>
            Arguments for the <see cref="T:PsionTeklogix.Display.Orientation.OrientationChangedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Display.Orientation.OrientationChangedEventArgs.#ctor(PsionTeklogix.Display.Orientation.Orientations)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PsionTeklogix.Display.Orientation.OrientationChangedEventArgs.NewOrientation">
            <summary>
            Retrieves the new orientation after the orientation change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Backlight.BacklightSettings">
            <summary>
            The BacklightSettings class is used to control the keyboard and
            display backlight settings on Psion devices.
            Backlights are used to illuminate the keyboard and display on
            a Psion device in levels of low ambient light.
            The display backlight is also used to make the display easier
            to read in all levels of ambient light. Unfortunately,
            backlights consume a fair amount of current, lowering a device's
            battery life. As a result, backlights are generally turned off
            when the user is inactive for a given length of time (configurable).
            By configuring the length of time the backlight is on, and/or dim,
            it is possible to reduce the drain on the battery, and thereby
            increase the battery life. User activity will reset the timers,
            and cause the backlight to come back on, regardless of the current
            backlight state (dim/off).
            In addition, the battery life can be increased by configuring
            the intensity of the backlight. 
            If the device has a light sensor, the backlight can be auto-adjusted
            based on the ambient light level. For each amblient light level, the 
            light intensity can be configured.
            </summary>
            <remarks >Not all APIs work for all devices, NOT supported exception
            would be thrown if the device doesn't support the API.
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightSettings.AutoAdjustmentSupported">
            <summary>whether or not backlight auto-adjustment is supported.</summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.Finalize">
            <summary>
            Finalize. This destructor will run only if the Dispose method
            does not get called.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.Dispose">
            <summary>
            Implementation for IDisposable interface
            </summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">true if called from user code</param>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.ResetAutomaticAdjustmentSettings">
            <summary>
            Reset the keyboard and backlight intensity values to factory
            default ( automatic adjustment settings only )
            </summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.GetDisplayAutoAdjustIntensity(PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel)">
            <summary>Gets the intensity of the display backlight, as configured for a
            given ambient light level.</summary>
            <param name="forAmbientLightLevel">the ambient light level of interest
            </param>
            <returns>display backlight intensity, as a percentage</returns>
            <exception cref="T:System.ApplicationException">if backlight auto-adjustment is not 
            supported or the intensity cannot be determined.</exception>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.SetDisplayAutoAdjustIntensity(PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel,System.Int32)">
            <summary>Sets the intensity of the display backlight, to be used at a
            given ambient light level.</summary>
            <param name="forAmbientLightLevel">the ambient light level of interest
            </param>
            <param name="intensityPercent">display backlight intensity to use, as a
            percentage</param>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.GetKeyboardAutoAdjustIntensity(PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel)">
            <summary>Gets the intensity of the keyboard backlight, as configured for a
            given ambient light level.</summary>
            <param name="forAmbientLightLevel">the ambient light level of interest
            </param>
            <returns>keyboard backlight intensity, as a percentage</returns>
            <exception cref="T:System.ApplicationException">if backlight auto-adjustment is not 
            supported or the intensity cannot be determined.</exception>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightSettings.SetKeyboardAutoAdjustIntensity(PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel,System.Int32)">
            <summary>Sets the intensity of the keyboard backlight, to be used at a
            given ambient light level.</summary>
            <param name="forAmbientLightLevel">the ambient light level of interest
            </param>
            <param name="intensityPercent">keyboard backlight intensity to use, as a
            percentage</param>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.DisplayAlwaysOnForAcPower">
            <summary>
            Gets/Sets whether or not the display backlight should remain on (always)
            while the Psion device is being powered via External Power Source.
            </summary>
            <remarks>
            <p>For CE: DisplayAlwaysOnForAcPower is the same as DisplayAlwaysOnForBattery,
            so setting one will change the other one as well.</p>
            <p>For PPC: DisplayAlwaysOnForAcPower is the same as KeyboardAlwaysOnForAcPower.  
            so setting one will change the other one as well.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">if the backlight always-on
            state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.DisplayAlwaysOnForBattery">
            <summary>
            Gets/Sets whether or not the display backlight should remain on
            (always) while the Psion device is being powered via battery.
            </summary>
            <remarks>
            <p>For CE: DisplayAlwaysOnForBattery is the same as DisplayAlwaysOnForAC,
            so setting one will change the other one as well.</p>
            <p>For PPC: DisplayAlwaysOnForBattery is the same as KeyboardAlwaysOnForBattery.  
            so setting one will change the other one as well.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">if the backlight always-on
            state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.DisplayDimTime">
            <summary>
            Gets/Sets the display backlight dim time (the length of time
            the backlight will remain in a "dimmed" state before it is
            turned off altogether). Note that if the backlight has been
            configured to always be on when external power is present (either
            in the control panel, or via the BacklightControl class),
            the display backlight will never dim/turn off when the
            device is being powered from an external power source.
            </summary>
            <remarks>The length of time the display backlight will remain dim
            before turning off. The time reported is in milliseconds.</remarks>
            <exception cref="T:System.ApplicationException">if the backlight dim-time cannot
            be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.DisplayIntensity">
            <summary>
            Gets/Sets the display backlight intensity.
            </summary>
            <remarks>As intensity ranges vary from device to device,
            the value set here may not be exactly what is stored. As a result,
            the DisplayIntensity property may return a slightly
            different value than what was set (rounding issues).
            The intensity, as a percentage (range of 0-100).
            0% indicates the lowest intensity level (dark).
            100% indicates the highest intensity level (bright).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the intensity
            level cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.DisplayOnTimeForAC">
            <summary>
            Used to set the display backlight on time (the length of time the
            backlight will remain on before it is either dimmed or
            turned off altogether) when the device is powered by external power.
            Note that if the backlight has been configured to always be on when
            AC power is present (either in the control panel, or via the Backlight
            class), the display backlight will never dim/turn off when the
            device is being powered from an external AC power source.
            </summary>
            <remarks>The length of time the display backlight will remain on
            before turning off (or going dim). The time reported is in
            milliseconds.
            <p>Please check control panel on the device to determine the valid
            values.</p>
            <p>For CE: DisplayOnTimeForBattery is the same as DisplayOnTimeForAC,
            so setting one will change the other one as well.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage.  
            Changing DisplayOnTimeForAC will result in changing of 
            KeyboardOnTimeForAC, and vise versa. </p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            on-time cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.DisplayOnTimeForBattery">
            <summary>
            Used to set the display backlight on time (the length of time the
            backlight will remain on before it is either dimmed or
            turned off altogether) when the device is powered by battery.
            </summary>
            <remarks>The length of time the display backlight will remain on
            before turning off (or going dim). The time reported is in
            milliseconds.
            <p>Please check control panel on the device to determine the valid
            values.</p>
            <p>For CE: DisplayOnTimeForBattery is the same as DisplayOnTimeForAC,
            so setting one will change the other one as well.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage.  
            Changing DisplayOnTimeForBattery will result in changing of 
            KeyboardOnTimeForBattery, and vise versa.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            on-time cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.KeyboardAlwaysOnForAcPower">
            <summary>
            Gets/Sets whether or not the keyboard backlight should remain
            on (always) while the Psion device is being powered via AC.
            </summary>
            <remarks>
            <p>For CE: KeyboardAlwaysOnForAcPower is the same as KeyboardAlwaysOnForBattery,
            so setting one will change the other one as well.</p>
            <p>For PPC: DisplayAlwaysOnForAcPower is the same as KeyboardAlwaysOnForAcPower.  
            so setting one will change the other one as well.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            always-on state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.KeyboardAlwaysOnForBattery">
            <summary>
            Gets/Sets whether or not the keyboard backlight should remain on
            (always) while the Psion device is being powered via battery.
            </summary>
            <remarks>
            <p>For CE: KeyboardAlwaysOnForBattery is the same as KeyboardAlwaysOnForAC,
            so setting one will change the other one as well.</p>
            <p>For PPC: DisplayAlwaysOnForBattery is the same as KeyboardAlwaysOnForBattery.  
            so setting one will change the other one as well.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">if the backlight always-on
            state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.KeyboardIntensity">
            <summary>
            Gets/Sets the keyboard backlight intensity.
            </summary>
            <remarks>As intensity ranges vary from device to device,
            the value set here may not be exactly what is stored.
            As a result, the KeyboardIntensity property may return a 
            slightly different value than what was set (rounding issues).
            The intensity, as a percentage (range of 0-100),
            0% indicates the lowest intensity level (dark).
            100% indicates the highest intensity level (bright).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the intensity
            level cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.KeyboardOnTimeForAC">
            <summary>
            Gets/Sets the keyboard backlight on time, (the length of
            time the backlight will remain on before it is turned off) 
            when the device is powered by external power source.
            Note that if the backlight has been configured to always be
            on when AC power is present (either in the control panel,
            or via the BacklightControl class), the keyboard backlight
            will never turn off when the device is being powered from
            an external AC power source.
            </summary>
            <remarks>The length of time the keyboard backlight will remain
            on before turning off. The time reported is in milliseconds.
            <p>For CE: DisplayOnTimeForBattery is the same as DisplayOnTimeForAC,
            so setting one will change the other one as well.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage.  
            Changing DisplayOnTimeForAC will result in changing of 
            KeyboardOnTimeForAC, and vise versa. </p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight on-time
            cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.KeyboardOnTimeForBattery">
            <summary>
            Gets/Sets the keyboard backlight on time, (the length of
            time the backlight will remain on before it is turned off) 
            when the device is powered by battery.
            Note that if the backlight has been configured to always be
            on when AC power is present (either in the control panel,
            or via the BacklightControl class), the keyboard backlight
            will never turn off when the device is being powered from
            an external AC power source.
            </summary>
            <remarks>The length of time the keyboard backlight will remain
            on before turning off. The time reported is in milliseconds.
            <p>For CE: KeyboardOnTimeForBattery is the same as KeyboardOnTimeForAC,
            so setting one will change the other one as well.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage. 
            Changing DisplayOnTimeForBattery will result in changing of 
            KeyboardOnTimeForBattery, and vise versa. </p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight on-time
            cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.AutomaticAdjustmentEnabled">
            <summary>Indicates if backlights are automatically adjusted based on the
            sensed ambient light level.</summary>
            <exception cref="T:System.ApplicationException">if backlight auto-adjustment  
            enabled cannot be determined/set.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightSettings.CurrentAmbientLightLevel">
            <summary>The current sensed ambient light level.</summary>
            <exception cref="T:System.ApplicationException">if AmbientLightLevel  
            cannot be determined.</exception>
        </member>
        <member name="T:PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel">
            <summary>Amount of light around the device.</summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel.Dark">
            <summary>When the environment is dark</summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel.IndoorsLow">
            <summary>When the environment is indoors and dim</summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel.Indoors">
            <summary>When the environment is indoors but bright</summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightSettings.AmbientLightLevel.Outdoors">
            <summary>When the environment is outdoors (daylight)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerTransitionEventArgs">
            <summary>
            Arguments for power transition event.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerTransitionEventArgs.State">
            <summary>
            Gets power state.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerTransitionEventArgs.Name">
            <summary>
            Gets power state name.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.DockingMessageEventHandler">
            <summary>
            Docking Delegate. 
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.TetherMessageEventHandler">
            <summary>
            Tether Delegate
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.AdapterMessageEventHandler">
            <summary>
            Adapter Delegate
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.InterfaceMessageEventHandler">
            <summary>
            Interface Delegate
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.Peripherals">
            <summary>
            The Peripherals class is used to manipulate peripherals, and 
            device interfaces on a Windows CE-based device. 
            Any peripheral that can be detected (and identified as a specific device) will be 
            detectable through the Peripherals API.
            A device interface is a mechanism used by drivers to allow other 
            software components to access to driver. When a device driver 
            loads, it may choose to publish an interface. The interface may 
            then be used to send commands to the driver.
            </summary>
            <remarks>
            This class can be used in a polled fashion with the static members
            or in an event driven fashion by instantiating and binding the event handlers.
            The Peripherals class allows developers to perform the following operations: 
            <list type="number">
            <item>Detect the presence of adapters and device interfaces. 
            Using <see cref="M:PsionTeklogix.Peripherals.Peripherals.EnumerateDeviceInterfaces"/>, it is possible to get a list of 
            all device interfaces. Device interfaces will usually have a name like "XYZ1:", 
            related to the device driver publishing them. It is also possible to detect if 
            a specific device interface or peripheral is present.</item> 
            <item>Detect the presence of docking and tether port devices. 
            Docking stations are separate hardware components such as battery chargers, 
            portable docking modules, etc., and can possess extra serial, USB, or other 
            communications ports. Tether port devices are usually peripheral devices such as 
            serial scanners, RFID readers, etc.</item>
            <item>Register for real-time notifications. By instantiating Peripherals class, 
            developer gains access to <see cref="E:PsionTeklogix.Peripherals.Peripherals.dockingEvent"/> and <see cref="E:PsionTeklogix.Peripherals.Peripherals.tetherEvent"/>. 
            By implementing event handlers developers will gaing access to information:
            <para>Tether Port Device Insertion (with the information about the type of tether port device)</para>
            <para>Tether Port Device Removal (with the information about the type of tether port device)</para>
            <para>Docking Station Insertion (with the information about the type of the docking station)</para>
            <para>Docking Station Removal (with the information about the type of the docking station)</para>
            </item></list></remarks>
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.PowerState_Unknown">
            <summary> 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.PowerState_Off">
            <summary> 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.PowerState_On">
            <summary> 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.adapterValue">
            <summary>
            The type of the adpater that is connected/disconnected.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Peripherals.Peripherals.interfaceEventValue">
            <summary>
            The type of the device that is connected/disconnected.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OndockingEvent(PsionTeklogix.Peripherals.PeripheralsEventArgs)">
            <summary>
            OndockingEvent
            </summary>
            <param name="eDocking">type of the docking station</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OntetherEvent(PsionTeklogix.Peripherals.PeripheralsEventArgs)">
            <summary>
            OntetherEvent.
            </summary>
            <param name="eTether"></param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OnadapterEvent(PsionTeklogix.Peripherals.AdapterEvent)">
            <summary>
            OnadapterEvent.
            </summary>
            <param name="eAdapter"></param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.OninterfaceEvent(PsionTeklogix.Peripherals.InterfaceEvent)">
            <summary>
            OninterfaceEvent.
            </summary>
            <param name="eInterface"></param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsDeviceInterfacePresent(System.String)">
            <summary>
            Used to determine if a particular 
            device interface is present on the current device.
            </summary>
            <param name="devIntfName">
            The name of the device interface to be tested for.
            </param>
            <returns>
            true if the device interface is present, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsAdapterPresent(System.String)">
            <summary>
            Determines if a particular network adapter is present this Psion Teklogix 
            device.
            </summary>
            <param name="adapterName">
            The name of the wired or wireless adapter being tested for.
            </param>
            <returns>
            true if the adapter is present, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsInDockingStation">
            <summary>
            Determines whether or not the current Psion Teklogix device is in its docking 
            station or not.
            </summary>
            <returns>
            true if the docking station is present, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsTetherPortConnected">
            <summary>
            Determines whether or not there is a device attached to the tether port on the 
            current device.
            </summary>
            <remarks>
            Not all Psion Teklogix devices have a tether port. On devices without a tether 
            port, this method will return false.
            </remarks>>
            <returns>
            true, if a device is connected to the tether port, false otherwise.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.EnumerateDeviceInterfaces">
            <summary>
            Retrieves a list of all device interfaces present on the current Psion Teklogix device.
            </summary>
            <returns>
            An ArrayList of containing the device interfaces currently published by drivers
            on the current Psion Teklogix device.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.EnumerateAdapters">
            <summary>
            Retrieves a list of all attached peripherals and adapters presesent
            on the current Psion Teklogix device. 
            </summary>
            <returns>
            An array of devices currently connected.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetDockingStationType">
            <summary>
            Determines the type of docking station attached to the current device.
            </summary>
            <returns>
            The type of docking station attached to the current device. 
            The following docking station types may be reported: 
            <list type="bullet"><item>DockingPort PDM</item>
            <item>Docking Port Boost Dongle</item>
            <item>Docking Port Cradle</item>
            <item>Docking Port Quad Charger</item>
            <item>Docking Port Single Charger</item>
            <item>Docking Port Device Unknown</item>
            <item>Docking Port No Device</item></list>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetTetherPortDeviceType">
            <summary>
            Determines what type of device is attached to the tether port on the current 
            Psion Teklogix device.
            </summary>
            <returns>
            A string containing the type of device connected to the tether port. 
            The following tether port types can be returned: 
            <list type="bullet"><item>Generic Serial Device</item>
            <item>Non Decoded Scanner</item>
            <item>Scanner</item>
            <item>Serial RFID</item>
            <item>Serial Scanner</item>
            <item>USB Device</item>
            <item>Device Unknown</item>
            <item>No Device Attached to the Tether Port</item></list>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.Dispose">
            <summary>
            Releases all resources used by the current instance of Peripherals.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of Peripherals.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.SetPowerState(System.String,System.Int32)">
             <summary> 
             <p>Sets the power state on the specified hardware port/slot/socket.</p>
             </summary>
             <remarks>
             <p> Once a slot etc. has been powered off it will remain powered off even if the
             Psion Teklogix device is cold-booted. A clean start of the Windows CE operating
             system will be required to power the slot back on (or a call to setPowerState). 
             On a Pocket PC device, a cold-boot will cause the slot to be repowered. Removal 
             and re-insertion of the card (or any card) will have no effect and will not be 
             detected. </p>
            
             <p> Powering off an empty slot/socket will only disable the detection of card 
             insertions, as the slot/socket is not powered when empty. Powering on an empty slot  
             has no effect, other than re-enabling detection of card insertion/removal.</p>
            
             <p> Powering off the USB port may have no effect if the connected device has an 
             external power source, as the port itself is not disabled, only the power supplied
             to the port is shut off.</p>
            
             <p> Powering off a PCMCIA/SD-MMC/CF slot will have the same effect as a card removal,
             and will generate a card removal event. Powering on the PCMCIA/SD-MMC/CF slot will 
             have the same effect as a card insertion, assuming there is a card present. A card 
             insertion event will also be generated if a card is present.</p>
            
             <p> It is not always possible to power off a slot/socket/port. For example, the 
             SD-MMC slot on some 7535 terminals cannot be powered off. In such cases, the driver 
             for the card in the slot/socket will be unloaded, and further activity on the slot or
             socket will be ignored. However, there is no guarantee the device in the slot or
             socket will actually be disabled, and if a radio is in the slot it may still be 
             able to transmit.</p>
            
             <p> A WORKABOUT PRO may or may not have a second PCMCIA slot. If it does not,
             attempting to enable/disable the slot will fail.</p>
              
             <p> Not all Psion Teklogix devices have the peripherals listed below, and the power
             state may not be controllable on every device.</p>
             
             <p> Valid hardware names that may be used in the 'Hardware' parameter are:
              * PCMCIA Slot0
              * PCMCIA Slot1
              * SD-MMC
             </p>
            
             <p> Valid power states are:
              * PowerState_Off - power off the slot/socket/etc.
              * PowerState_On - power on the slot/socket/etc.
             </p>
             </remarks>
            
             <param name="Hardware">The port/slot/device whose power state is being changed.
             </param>
             <param name="PowerState">The power state to set the slot/socket/etc. to.</param>
            
             <returns>True if the socket/slot/port was powered off. False if the 
               socket/slot/port could not be powered off.
             </returns>
             
             <exception cref="T:System.ArgumentException">ArgumentException - Is throw when the 
               supplied hardware component name is invalid, or found on this Psion
               Teklogix device.
             </exception>
             <exception cref="T:System.ArgumentNullException">ArgumentException - Is throw when the 
               supplied hardware component name is null.
             </exception>
             <exception cref="T:System.ApplicationException">ApplicationException - Is thrown if the 
             device is not ready, for example when repeatedly calling SetPowerState too
             quickly.
             </exception>        
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetPowerState(System.String)">
             <summary>
             <p>Detects whether a given port/slot/socket is powered on or not.</p>
             </summary>
             <remarks>
             <p>Empty slots are not powered; they are in the POWERSTATE_OFF state.</p>
            
             <p>The power state of some hardware components cannot be detected.</p>
            
             <p>Not all Psion Teklogix devices have the peripherals listed below.</p>
            
             <p> Valid hardware names that may be used in the 'Hardware' parameter are:
              * PCMCIA Slot0
              * PCMCIA Slot1
              * SD-MMC
             </p>
            
             <p> Valid power states are:        
              * PowerState_Off - power off the slot/socket/etc.
              * PowerState_On - power on the slot/socket/etc.
             </p>
             </remarks>
            
             <param name="Hardware">The port/slot/device to examine.</param>
            
             <returns>The power state of the port/slot/device. Valid return codes are:
              * PowerState_Off - the slot etc. is powered off or the slot is empty
              * PowerState_On - the slot etc. is powered on 
              * PowerState_Unknown - the powered state cannot be determined
             </returns>
             
             <exception cref="T:System.ArgumentException">ArgumentException - Is throw when the 
               supplied hardware component name is invalid, or found on this Psion
               Teklogix device.
             </exception>
             <exception cref="T:System.ArgumentNullException">ArgumentException - Is throw when the 
               supplied hardware component name is null.
             </exception>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.GetAdapterStatistics(System.String)">
            <summary>
            Retrieves the statistics for the specified adapter. 
            </summary>
            <remarks>
            <p> The following statistics are available for network adapters:
            * "Media State" - (connected/disconnected) 
            * "RSSI" - Received Signal Strength Indicator (wireless adapters only) 
            * "Channel" - current channel (wireless adapters only, and only available on some radio cards) 
            * "SSID" - the network name (wireless adapters only) 
            * "Access Point MAC address" - the MAC of the associated AP (wireless adapters only) 
            * "Local MAC address" - MAC address of the radio / ethernet card 
            * "Link Speed" - Current link speed being used by the radio / ethernet card 
            * "Frame Size" - Current frame size in bytes 
            * "Packet Size" - Current packet size in bytes 
            * "Received Packets" - number of packets received by this adapter 
            * "Transmitted Packets" - number of packets sent by this adapter 
            * "Received Packet Errors" - number of bad packets received by this adapter 
            * "Transmitted Packet Errors" - number of bad packets sent by this adapter 
            </p>
            </remarks>
            <param name="DeviceName"> The name of the adapter whose statistics are to be 
            retrieved. Must not be null.</param>
            <exception cref="T:System.ArgumentException">ArgumentException - Thrown when the  
            device name is invalid. </exception>
            <exception cref="T:System.ArgumentNullException">ArgumentNullException - Thrown when 
            the device name is null. </exception>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Peripherals.IsWirelessAdapter(System.String)">
             <summary>
             Detects whether or not the specified adapter is a wireless 
             adapter (i.e. a radio card such as an 802.11b radio card).
             </summary>
             <param name="DeviceName">Adapter Name</param>
             <returns>true - if the specified adapter is a 
             wireless device, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when supplied parameter is
            null.</exception>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.dockingEvent">
            <summary>
            Occurs when the device is inserted into or removed from the docking station.
            </summary>
            <remarks>
            <p>Docking events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </p>
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.tetherEvent">
            <summary>
            Occurs when the device is connected or removed to or removed from the tether port.
            </summary>
            <remarks>
            Tether events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.adapterEvent">
            <summary>
            Occurs when the adapter is connected or removed to or removed from the slot.
            </summary>
            <remarks>
            Adapter events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Peripherals.Peripherals.interfaceEvent">
            <summary>
            Occurs when the device is connected or removed from the slot/port.
            </summary>
            <remarks>
            Interface events are generated by a separate thread - controls and other GUI 
            components should not be updated within the context of this event.
            You should also not call other peripherals class members as this may cause a 
            threading deadlock condition.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Peripherals.Peripherals.EnumerateTetheredPeripherals">
            <summary>
            Gets device connected to the tether port.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.Bluetooth">
            <summary>
            Class provides access to some Bluetooth features.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.PairSerialProfileDevice(System.String,System.String,System.String)">
            <summary>
            Pairs a Serial Port Profile Bluetooth device with this terminal.
            Use UnpairSerialProfileDevice() to remove the pairing.
            Use PairSerialProfileScanner() to pair SPP Scanners.
            Please note: the pairing will fail if a pairing already exists, unpair it first.
            Developers note: Please make sure your application remembers the macAddress of the paired
            devices.  The macAddress of the paired device is required to remove the pairing.
            </summary>
            <param name="macAddress">The MAC address of the Bluetooth device to pair with 
            (expecting a string of exactly 12 hex digits, ex: "0016E3F019BB" ).</param>
            <param name="pin">The security pin required by the Bluetooth device. Example "0000"</param>
            <param name="portName">The port to be created and used for emulated 
            serial connection. Example: "COM9:"  Please note the required ':'.</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.PairSerialProfileScanner(System.String,System.String,System.String)">
            <summary>
            Pairs a Serial Port Profile Bluetooth scanner with this terminal.  
            Use UnpairSerialProfileDevice() to remove the pairing.
            Please note: This method provides the same functionality as 
            PairSerialProfileDevice() but will automatically notify Scanner 
            Services about the newly paired scanner.
            Please note: The pairing will fail if a pairing already exists, unpair it first.
            Developers note: Please make sure your application remembers the macAddress of 
            the paired devices.  The macAddress of the paired device is required to remove 
            the pairing.
            </summary>
            <param name="macAddress">The MAC address of the Bluetooth device to pair with 
            (expecting a string of exactly 12 hex digits, Example: "0016E3F019BB" ).</param>
            <param name="pin">The security pin required by the Bluetooth device. Example "0000"</param>
            <param name="portName">The port to be created and used for emulated 
            serial connection. Example: "COM9:"  Please note the required ':'.</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.UnpairSerialProfileDevice(System.String)">
            <summary>
            Unpairs a Serial Port Profile Bluetooth device that was paired with either
            PairSerialProfileDevice or PairSerialProfileScanner.
            </summary>
            <param name="macAddress">The MAC address of the Bluetooth device to pair with.</param>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.SetPower(System.Boolean)">
            <summary>
            Turn on/off the Bluetooth module
            </summary>
            <param name="state">true = on</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:PsionTeklogix.Peripherals.Bluetooth.GetPower">
            <summary>
            Get the current power state.
            </summary>
            <returns>true if the slot is turned on</returns>
        </member>
        <member name="T:PsionTeklogix.RAS.RasEntryProperties">
            <summary>
             Defines the properties of a RAS phonebook entry. 
            </summary>
            <remarks>
             The RasEntryProperties class is used to store the configuration of a RAS phonebook 
            entry, including information to determine:
            * How to generate the phone number to dial
            * What device should be used to dial to the server
            * Extra information to provide to the server
            * The authentication protocols that can and can't be negotiated
            * The framing protocol and frame size to use
            * Script name
            * AutoDialing configuration
            * Network configuration (WINS, DNS, local IP address)
            </remarks>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_USE_COUNTRY_AND_AREA_CODES">
            <summary>
            If this flag is set, the country code and area code members will be used to 
            construct the phone number dialed. If the option is not enabled, the country code
            and area code members are ignored. This flag is equivalent to the 'Use Country / 
            Region and Area Codes' checkbox found on the phone dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SPECIFIC_IPADDR">
            <summary>
            Allows a specific IP address to be configured for the dial-up connection. The 
            IP address to use must be set in the RasEntryProperties.ipAddress member, below. 
            Setting this flag corresponds to checking the 'Specify an IP Address' checkbox on
            the TCP/IP Settings dialog box. If specified, the IP address will override the one
            set in the Network Control Panel. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SPECIFIC_NAME_SERVERS">
            <summary>
            If this flag is enabled, the DNS, alternate DNS, WINS and alternate WINS server
            IP addresses may be specified (below). This flag corresponds to the checkbox
            'Specify Name Server Addresses' on the TCP/IP Settings dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_IPHEADER_COMPRESSION">
            <summary>
            If this flag is set, RAS tries to negotiate the use of IP header compression on 
            the PPP connection. If not set, IP header compression is not negotiated. This flag
            should be set, as it can significantly improve performance on slower connections.
            Note that it may have to be cleared when communicating with some older RAS servers
            that do not correctly negotiate or support IP header compression 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REMOTE_DEFAULT_GATEWAY">
            <summary>
            Windows CE enables this option when a new RAS entry is created and populated with
            default values. It is subsequently ignored, and does not modify the default route. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_DISABLE_LCP_EXTENSIONS">
            <summary>
            If this flag is set, RAS disables the PPP LCP extensions defined in RFC 1570. 
            However, setting the flag may uinterfere with RAS features such as server callback. 
            It is recommended that this option should be left disabled unless it is required. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SW_COMPRESSION">
            <summary>
            If this flag is set, the RAS server and client will attempt to negotiate the use
            of software compression (CCP) on the PPP link. This option should be enabled for 
            most connections, but may be disabled to reduce negotiation times if the server
            and client do not have a common, compatible compression protocol. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REQUIRE_ENCRYPTED_PW">
            <summary>
            If this option is enabled, only secure password schemes may be used to authenticate
            the user, meaning that PAP cannot be used, as the password is sent as plain text
            under PAP. SPAP and CHAP may be used, however. Note that setting this flag may 
            limit uinteroperability with older servers. This flag corresponds to the 'Require 
            Encrypted Password' check box in the Security dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REQUIRE_MS_ENCRYPTED_PW">
            <summary>
            If this option is enabled, only the Microsoft Challenge Authentication Protocol
            (MSCHAP) may be used to authenticate a user. PAP and MD5-CHAP may not be used. This
            flag overrides the OPT_REQUIRE_ENCRYPTED_PW flag. The option corresponds to the 
            Require Microsoft Encrypted Password check box  in the Security dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_REQUIRE_DATA_ENCRYPTION">
            <summary>
            This option forces the client and server to successfully negotiate data encryption,
            and close the connection if it cannot be negotiated. This flag is ignored if the
            OPT_REQUIRE_MS_ENCRYPTED_PW option is not enabled. The OPT_REQUIRE_DATA_ENCRYPTION
            flag corresponds to the Require Data Encryption check box in the Security dialog box. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_NETWORK_LOGON">
            <summary>
            If this option is enabled, RAS will attempt to log on to the network after the 
            connection to the server has been established. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_USE_LOGON_CREDENTIALS">
            <summary>
            This flag causes RAS to use the same user name, domain and password of the currently
            logged-on user when dialing a connection. The flag will be ignored unless the
            OPT_REQUIRE_MS_ENCRYPTED_PW flag is also set. This setting is ignored by the 
            RasEntry.Dial method, where specifying empty strings for the user name, 
            password and domain has the same effect. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_DIAL_AS_LOCAL_CALL">
            <summary>
            If this option is enabled, RAS generates the phone number as a local call. It will
            include the area code if the area code does not match the area code of the current
            location. The flag is equivalent to the "force local" option in various RAS-related
            dialog boxes. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_PAP">
            <summary>
            If this flag is set, PAP (Password Authentication Protocol) will not be used. 
            If not set, the use of PAP may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_CHAP">
            <summary>
            If this flag is set, CHAP (Challenge Handshake Authentication Protocol) will
            not be used. If not set, the use of CHAP may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_MSCHAP">
            <summary>
            If this flag is set, MSCHAP (Microsoft Challenge Handshake Authentication 
            Protocol) will not be used. If not set, the use of MSCHAP may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_MSCHAP2">
            <summary>
            If this flag is set, MSCHAP v2.0 (Microsoft Challenge Handshake Authentication 
            Protocol) will not be used. If not set, the use of MSCHAP v2.0 may be negotiated. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROHIBIT_EAP">
            <summary>
            If this flag is set, use of the Extensible Authentication Protocol will not be 
            allowed. If not set, EAP may be negotiated. Note: currently, the Java RAS API does
            does support EAP. This flag should always be set. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PREVIEW_USERPW">
            <summary>
            If this option is set, RAS will display a username/password dialog before attempting
            to connect to the RAS server. Note that this is not the same dialog as the one that
            appears when the RasEntry.Dial(true) method is invoked. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_CUSTOM_SCRIPT">
            <summary>
            If enabled, this flag will cause RAS to to invoke the custom-scripting specified
            below DLL after establishing a connection to the server. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_TERMINAL_BEFORE_DIAL">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_TERMINAL_AFTER_DIAL">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_MODEM_LIGHTS">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_PROMOTE_ALTERNATES">
            <summary>
            This flag is not currently supported by Windows CE 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.OPT_SECURE_LOCAL_FILES">
             <summary>
             If this option is enabled, it forces RAS to check for remote printer and file
             system bindings, that is those created as a result of enabling Printer and File 
             Sharing.
             </summary>
             <remarks>
             <p>This option should be set when connecting to a public network to notify 
             users to disconnect existing network connections (i.e. to private networks) 
             before establishing a connection the public network.</p>
             
             <p>If either Client for Microsoft Networks or File and Print Sharing is not 
             enabled on a given connection, calling RasEntry.GetEntryProperties returns 
             with the OPT_SECURE_LOCAL_FILES flag set. Calling RasEntry.SetEntryProperties
             with the OPT_SECURE_LOCAL_FILES set disabled both Client for Microsoft 
             Networks and File and Print Sharing; disabling the option enables both items.
             </p>
            
             <p>This option is not currently supported by Windows CE.</p>
             </remarks>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.PROTO_PPP">
            <summary>
            Use PPP (the Point-to-Point Protocol - RFC 1661) as the framing protocol 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.PROTO_SLIP">
            <summary>
            Use SLIP (the Serial Line IP Protocol - RFC 1055) as the framing protocol 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.FRAME_SIZE_1006">
            <summary>
            Use a frame size of 1006 when communicating with the RAS Server. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.FRAME_SIZE_1500">
            <summary>
            Use a frame size of 1500 when communicating with the RAS Server. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_DIRECT">
            <summary>
            Direct Connect (WINCE Extension) 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_MODEM">
            <summary>
            Modem connection 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_ISDN">
            <summary>
            ISDN 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_X25">
            <summary>
            X.25 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_VPN">
            <summary>
            Virtual Private Network (Point-to-Point Tunnelling Protocol) 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.DEVTYPE_PPPOE">
            <summary>
            Point-to-Point Protocol over Ethernet 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.options">
            <summary>
            The options to use when connecting and negotiation connection options. By default,
            Software Compression and IP header compression should be enabled. EAP negotiation
            must be disabled (not supported). 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.countryCode">
            <summary>
            The country/region portion of the phone number dialed. This setting will be ignored
            unless the OPT_USE_COUNTRY_AND_AREA_CODES option is enabled. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.areaCode">
            <summary>
            The area code portion of the phone number, without brackets or other delimiters.
            This setting will be ignored unless the OPT_USE_COUNTRY_AND_AREA_CODES 
            option is enabled. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.localPhoneNumber">
            <summary>
            The phone number to dial. Its use will depend on the options set above. If the
            OPT_USE_COUNTRY_AND_AREA_CODES option is enabled, the phone number will be 
            assembled from the country code and area code. If not set, or if the 
            OPT_DIAL_AS_LOCAL_CALL option is set, the entire string will be used as the
            phone number.  
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddress">
            <summary>
            The IP address to assign to the Psion Teklogix device. This parameter is ignored
            unless the OPT_SPECIFIC_IPADDR option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressDns">
            <summary>
            The DNS server IP address for the Psion Teklogix device. This parameter is ignored
            unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressDnsAlt">
            <summary>
            The alternate DNS server IP address for the Psion Teklogix device. This parameter 
            is ignored unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressWins">
            <summary>
            The WINS server IP address for the Psion Teklogix device. This parameter 
            is ignored unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.ipAddressWinsAlt">
            <summary>
            The alternate WINS server IP address for the Psion Teklogix device. This parameter 
            is ignored unless the OPT_SPECIFIC_NAME_SERVERS option is enabled 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.framingProtocol">
            <summary>
            The protocol to use when communicating with the server. PPP is the most common
            protocol used, although SLIP is used frequently in UNIX environments. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.frameSize">
            <summary>
            The frame size to use when communicating with the RAS Server. This option is only
            useful when "SLIP" is being used. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.script">
            <summary>
            The name of the RAS script file. The script should be specified as a full path 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.autoDialDll">
            <summary>
            The full name and path of the DLL used as the customized AutoDial handler. If the
            name is an empty string, the default auto-dialer is used. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.autoDialFunc">
            <summary>
            The name of the auto-dial function in the AutoDial handler. The DLL must provide 
            both the ANSI and Unicode version of the RASADFunc function. The A or W suffix
            must not be specified in the AutoDial function name. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.deviceType">
            <summary>
            The type of the TAPI device the RAS connection will use. The names and types of 
            all available devices can be found using the RasPhonebook.EnumerateRasDevices
            method. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.deviceName">
            <summary>
            The name of the TAPI device the RAS connection will use. The names and types of 
            all available devices can be found using the RasPhonebook.EnumerateRasDevices
            method. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25PadType">
            <summary>
            The X.25 pad type. This parameter must be an empty string unless an X.25 PAD
            device or native X.25 device is going to be used when dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25Address">
            <summary>
            The X.25 address to connect to. This parameter must be an empty string unless an 
            X.25 PAD device or native X.25 device is going to be used when dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25Facilities">
            <summary>
            The X.25 facilities to request from the server. This parameter must be an empty 
            string unless an X.25 PAD device or native X.25 device is going to be used when 
            dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.x25UserData">
            <summary>
            Addition X.25 data to send to the host when connected. This parameter must be an  
            empty string unless an X.25 PAD device or native X.25 device is going to be used 
            when dialing. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.RAS.RasEntryProperties.channels">
            <summary>
            Specifies the number of channels supported by the device (1 = mono, 2 = stereo, 
            and so on). 
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.LoginForm">
            <summary>
            Display the login form.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PsionTeklogix.GPS.Helper">
            <summary>
            A utility class for use with GPS.
            </summary>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.PowerOn">
            <summary>
            Power on the gps unit.  This function only works for builtin GPS devices.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.PowerOff">
            <summary>
            Power off the gps unit.  This function only works for builtin GPS devices.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.SetSuspendMode(PsionTeklogix.GPS.Helper.SuspendModes)">
            <summary>
            Control the power setting of the GPS unit while the device is suspended.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.GetSuspendMode">
            <summary>
            Determine the power setting of the GPS unit while the device is suspended.
            </summary>
            <exception cref="T:System.ApplicationException">if operation failed</exception>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.SetProfile(PsionTeklogix.GPS.Helper.Profiles)">
            <summary>
            Set the GPS profile.
            </summary>
            <remarks>
            Returning to Default profile from Automotive or Pedestrian requires 
            a warm reset before it will take effect.
            </remarks>
            <param name="newProfile">One of the enumerated Profiles values</param>
        </member>
        <member name="M:PsionTeklogix.GPS.Helper.GetProfile">
            <summary>
            Get the GPS profile.
            </summary>
        </member>
        <member name="T:PsionTeklogix.GPS.Helper.Profiles">
            <summary>
            Possible GPS profile options. See SetProfile()
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.Profiles.Default">
            <summary>
            Default profile on power up (not used in practice)
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.Profiles.Automotive">
            <summary>
            Automotive profile used during high speed navigation
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.Profiles.Pedestrian">
            <summary>
            Pedestrian profile used during low speed navigation
            </summary>
        </member>
        <member name="T:PsionTeklogix.GPS.Helper.SuspendModes">
            <summary>
            Possible GPS suspend options. See SetSuspendMode()
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.SuspendModes.OffInSuspend">
            <summary>
            Turn GPS off when device is suspended
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.SuspendModes.OnInSuspend">
            <summary>
            Leave GPS on when device is suspended
            </summary>
        </member>
        <member name="F:PsionTeklogix.GPS.Helper.SuspendModes.LowPowerInSuspend">
            <summary>
            Put GPS into low power mode when device is suspended
            </summary>
            <remarks> Not supported on all devices </remarks>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.DisplayInformation">
            <summary>
             This Class contains methods that return the display properties
            </summary>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.DisplayInformation.DisplayProperties">
            <summary>
             Returns all of the properties of the current display device, including:
            
               Display Type           - transmissive, transflective, etc.
               Physical Width         - physical screen size horizontally, in millimetres.
               Physical Height        - physical screen size vertically, in millimetres.
               Colour Display         - if the display is a colour display or not.
               Touch Screen Installed - if the screen is touch-sensitive.
               Width in Pixels        - physical size of the screen in pixels, horizontally.
               Height in Pixels       - physical size of the screen in pixels, vertically.
               Maximum Colours        - number of colours or shades of gray that can be
                                        displayed.
             </summary>
             <remarks>
              The values returned for screen size (pixels, physical screen size) are not 
             affected by the current screen orientation.
             </remarks>
        </member>
        <member name="P:PsionTeklogix.SystemPTX.DisplayInformation.MaximumDisplayColours">
            <summary>
             Determines the maximum number of display colours supported by the current 
            display device. If the device has a monochrome display, this method will 
             report the number of shades of gray that can be displayed.        
            </summary>                
            <returns>The number of colours or shades of gray that can be displayed.
            </returns>
        </member>
        <member name="T:PsionTeklogix.Backlight.Constants">
            <summary>
            Constants used for Backlight API
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.Constants.ONTIME_INFINITE">
            constant for signaling backlight always on
        </member>
        <member name="T:PsionTeklogix.Backlight.DisplaySettings">
            @deprecated (Jan 26, 2011)
            Please use PsionTeklogix.Backlight.BacklightSettings instead.
            <summary>
            Deprecated - Use BacklightSettings Instead. Encapsulate different settings 
            associated with display backlight
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ALWAYSONFORAC">
            <summary>
            whether or not backlight should remain on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ALWAYSONFORBATTERY">
            <summary>
            whether or not backlight should remain on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.DIMTIMEFORAC">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.DIMTIMEFORBATTERY">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.INTENSITYFORAC">
            <summary>
            brightness of backlight in percentage when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.INTENSITYFORBATTERY">
            <summary>
            brightness of backlight in percentage when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ONTIMEFORAC">
             <summary>
             the length of time backlight will remain on off when connected to AC power
             For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
             </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ONTIMEFORBATTERY">
            <summary>
            the length of time backlight will remain on when connected to battery
            For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.THRESHOLDFORAC">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.THRESHOLDFORBATTERY">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ValidOnTimes">
            <summary>
            recommended list of timeout values for on time (in milliseconds)
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.DisplaySettings.ValidDimTimes">
            <summary>
            recommended list of timeout values for dim time (in milliseconds)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Backlight.KeyboardSettings">
            @deprecated (Jan 26, 2011)
            Please use PsionTeklogix.Backlight.BacklightSettings instead.
            <summary>
            Deprecated - Use BacklightSettings Instead. Encapsulate different settings 
            associated with keyboard backlight
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ALWAYSONFORAC">
            <summary>
            whether or not backlight should remain on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ALWAYSONFORBATTERY">
            <summary>
            whether or not backlight should remain on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.DIMTIMEFORAC">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.DIMTIMEFORBATTERY">
            <summary>
            the length of time before brightness of backlight will be reduced when
            connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.INTENSITYFORAC">
            <summary>
            brightness of backlight in percentage when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.INTENSITYFORBATTERY">
            <summary>
            brightness of backlight in percentage when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ONTIMEFORAC">
            <summary>
            the length of time backlight will remain on off when connected to AC power
            For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ONTIMEFORBATTERY">
            <summary>
            the length of time backlight will remain on when connected to battery
            For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.THRESHOLDFORAC">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to AC power
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.THRESHOLDFORBATTERY">
            <summary>
            Minimum ambient light level of the sensor which triggers backlight to
            come on when connected to battery
            </summary>
        </member>
        <member name="F:PsionTeklogix.Backlight.KeyboardSettings.ValidOnTimes">
            <summary>
            recommended list of timeout values for on time (in milliseconds)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Backlight.BacklightControl">
            @deprecated (Jan 26, 2011)
            Please use PsionTeklogix.Backlight.BacklightSettings instead.
            <summary>
            Deprecated - Use BacklightSettings instead. The BacklightControl class is 
            used to control the keyboard and
            display backlight settings on Psion Teklogix devices.
            Backlights are used to illuminate the keyboard and display on
            a Psion Teklogix device in levels of low ambient light.
            The display backlight is also used to make the display easier
            to read in all levels of ambient light. Unfortunately,
            backlights consume a fair amount of current, lowering a device's
            battery life. As a result, backlights are generally turned off
            when the user is inactive for a given length of time (configurable).
            By configuring the length of time the backlight is on, and/or dim,
            it is possible to reduce the drain on the battery, and thereby
            increase the battery life. User activity will reset the timers,
            and cause the backlight to come back on, regardless of the current
            backlight state (dim/off).
            In addition, the battery life can be increased by configuring
            the intensity of the backlight, and the threshold at which it
            turns on. The backlight threshold can be lowered, which
            prevents the backlight from coming on above a certain ambient
            light level. The further the threshold is decreased, the lower
            the ambient light levels have to be in order for the backlight
            to come on. Note that the threshold is independent of the on
            and dim times; the backlight will dim and turn off regardless
            of the ambient light level when the user is inactive.
            Also note that some devices do not have a light sensor, on
            these devices the backlight will always come on, regardless of
            ambient light levels.
            </summary>
            <remarks >Currently, this API is not supported by the Netbook Pro,
            because it controls the display backlight differently 
            (via the Power Management API). Also, the Netbook Pro does not
            have a keyboard backlight.</remarks>
        </member>
        <member name="F:PsionTeklogix.Backlight.BacklightControl.OnTime_Infinite">
            <summary> This value should be set to indicate that the backlight is to remain
            on indefinitely</summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PsionTeklogix.Backlight.BacklightControl.IsSupported">
            <summary>
            Determines if the BacklightControl API is supported on the
            current Psion Teklogix device.
            </summary>
            <returns>True, if the device is supported.
            False, if the device does not support the BacklightControl API.</returns>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.Item(System.Int32)">
            <summary>
            Get/Set settings of backlight
            </summary>
            <param name="index"> "Please use constants defined in class DisplaySettings for
            display backlight and KeyboardSettings for keyboard backlight"</param>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightAlwaysOnForAcPower">
            <summary>
            Gets/Sets whether or not the display backlight should remain on
            (always) while the Psion Teklogix device is being powered
            via External Power Source.
            </summary>
            <exception cref="T:System.ApplicationException">if the backlight always-on
            state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightDimTime">
            <summary>
            Gets/Sets the display backlight dim time (the length of time
            the backlight will remain in a "dimmed" state before it is
            turned off altogether). Note that if the backlight has been
            configured to always be on when external power is present (either
            in the control panel, or via the BacklightControl class),
            the display backlight will never dim/turn off when the
            device is being powered from an external power source.
            </summary>
            <remarks>The length of time the display backlight will remain dim
            before turning off. The time reported is in milliseconds.</remarks>
            <exception cref="T:System.ApplicationException">if the backlight dim-time cannot
            be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightIntensity">
            <summary>
            Gets/Sets the display backlight intensity.
            </summary>
            <remarks>As intensity ranges vary from device to device,
            the value set here may not be exactly what is stored. As a result,
            the DisplayBacklightIntensity property may return a slightly
            different value than what was set (rounding issues).
            The intensity, as a percentage (range of 0-100).
            0% indicates the lowest intensity level (dark).
            100% indicates the highest intensity level (bright).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the intensity
            level cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightOnTime">
            <summary>
            Used to set the display backlight on time (the length of time the
            backlight will remain on before it is either dimmed or
            turned off altogether). Note that if the backlight has been
            configured to always be on when AC power is present (either
            in the control panel, or via the Backlight class),
            the display backlight will never dim/turn off when the
            device is being powered from an external AC power source.
            </summary>
            <remarks>The length of time the display backlight will remain on
            before turning off (or going dim). The time reported is in
            milliseconds.
            <p>Use the value OnTime_Infinite to have the backlight remain on
            indefinitely.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            on-time cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.DisplayBacklightThreshold">
            <summary>
            Changes the display backlight threshold level. The threshold
            determines the sensitivity of the light level sensor that
            triggers the display backlight. The backlight on a Psion
            Teklogix is triggered by the amount of ambient light
            present. When the amount of ambient light drops below a
            certain level, the backlight comes on. A low threshold
            value means that the amount of ambient light has to be much
            lower before the backlight is triggered. A higher threshold
            value means that even a slight drop in ambient light will
            allow the backlight to come on.
            </summary>
            <remarks>This method will throw an exception if the Psion
            Teklogix device does not have a light sensor.
            As threshold ranges vary from device to device, the value set
            here may not be exactly what is stored. As a result,
            the DisplayBacklightThreshold property may return a slightly
            different value than what was set (rounding issues).
            This method will throw an exception if the Psion Teklogix
            device does not have a light sensor.
            As threshold ranges vary from device to device, the value set
            here may not be exactly what is stored. As a result, the DisplayBacklightThreshold
            property may return a slightly different value than what was set (rounding issues).
            The threshold, as a percentage (range of 0-100).
            0% indicates the lowest sensitivity level (backlight will rarely turn on).
            100% indicates the highest sensitivity level (backlight should always
            come on).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the threshold level cannot
            be determined, or if the device does not have a light sensor.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightAlwaysOnForAcPower">
            <summary>
            Gets/Sets whether or not the keyboard backlight should remain
            on (always) while the Psion Teklogix device is being
            powered via AC.
            </summary>
            <exception cref="T:System.ApplicationException">Thrown if the backlight
            always-on state cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightIntensity">
            <summary>
            Gets/Sets the keyboard backlight intensity.
            </summary>
            <remarks>As intensity ranges vary from device to device,
            the value set here may not be exactly what is stored.
            As a result, the getKeyboardBacklightIntensity method may
            return a slightly different value than what was set
            (rounding issues).
            The intensity, as a percentage (range of 0-100).
            0% indicates the lowest intensity level (dark).
            100% indicates the highest intensity level (bright).</remarks>
            <exception cref="T:System.ApplicationException">Thrown if the intensity
            level cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightOnTime">
            <summary>
            Gets/Sets the keyboard backlight on time, (the length of
            time the backlight will remain on before it is turned off).
            Note that if the backlight has been configured to always be
            on when AC power is present (either in the control panel,
            or via the BacklightControl class), the keyboard backlight
            will never turn off when the device is being powered from
            an external AC power source.
            </summary>
            <remarks>The length of time the keyboard backlight will remain
            on before turning off. The time reported is in milliseconds.
            <p>Use the value OnTime_Infinite to have the backlight remain on
            indefinitely.</p>
            <p>For PPC: keyboard and display backlight ontime share the same storage. To avoid 
            changing the same parameter via two different API, only configuration via display 
            backlight has been enabled.  Configuration of this parameter via keyboard backlight 
            will result in "not supported" error.</p>
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the backlight on-time
            cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.KeyboardBacklightThreshold">
            <summary>
            Gets/Sets the keyboard backlight threshold level. The threshold
            determines the sensitivity of the light level sensor that
            triggers the keyboard backlight. The backlight on a Psion
            Teklogix is triggered by the amount of ambient light
            present. When the amount of ambient light drops below a
            certain level, the backlight comes on. A low threshold
            value means that the amount of ambient light has to be much
            lower before the backlight is triggered. A higher threshold
            value means that even a slight drop in ambient light will
            allow the backlight to come on.
            </summary>
            <remarks>This method will throw an exception if the Psion
            Teklogix device does not have a light sensor. As threshold ranges
            vary from device to device, the value set here may not be
            exactly what is stored. As a result, the
            KeyboardBacklightThreshold property may return a slightly
            different value than what was set (rounding issues).
            The threshold, as a percentage (range of 0-100).
            0% indicates the lowest sensitivity level (backlight will rarely turn on).
            100% indicates the highest sensitivity level (backlight should always
            come on).</remarks>
            <exception cref="T:System.ApplicationException">If the threshold level cannot
            be determined, or if the device does not have a light sensor.</exception>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.ValidDisplayBacklightDimTimes">
            @deprecated (Jan 26, 2011)
            <summary>
            Deprecated - Use BacklightSettings Instead. Determines what backlight 
            dim-times can be set on the current
            Psion Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.ValidDisplayBacklightOnTimes">
            @deprecated (Jan 26, 2011)
            <summary>
            Deprecated - Use BacklightSettins Instead. Determines what backlight 
            on-times can be set on the current
            Psion Teklogix device.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Backlight.BacklightControl.ValidKeyboardBacklightOnTimes">
            @deprecated (Jan 26, 2011)
            <summary>
            Deprecated - Use BacklightSettings Instead. Determines what keyboard 
            backlight on-times can be set on the
            current Psion Teklogix device.
            </summary>
            <remarks >An array containing the possible values that be
            set using the KeyboardBacklightOnTime property.
            All times are in milliseconds.</remarks>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanFailedError">
            <summary>
            Enumerates the possible errors that can be reported when a failed scan occurs.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScanFailedError.Failed">
            <summary>
            The attempt to scan a barcode failed. No other information is available.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScanFailedError.TimedOut">
            <summary>
            The attempt to scan a barcode timed out. This error could be as a result of
            attempting to scan an unsupported / disabled barcode type, attempting to scan 
            a damaged barcode, and/or attempting to scan something other than a barcode.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Barcode.ScanFailedError.Cancelled">
            <summary>
             The barcode scan attempt was cancelled by the user - the user released the
            trigger or scan button before a barcode was scanned.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanFailedEventArgs">
            <summary>
            Used to report information about a failed scan.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanFailedEventArgs.ToString">
            <summary>
            Converts the event arguments to a printable string.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanFailedEventArgs.ErrorCode">
            <summary>
            </summary>
        </member>
        <member name="T:PsionTeklogix.Pcmcia.CardSlot">
            <summary>
            Encapsulation of a PCMCIA card slot.  This class allows you to query for the 
            number of slots on a device, and turn on/off a slot.
            A typical use for these slots is for GSM cards or Wifi cards.
            See Wwan and WLan namespaces for classes specific to these areas.
            </summary>
            <example>
            \code
            uint count = PsionTeklogix.Pcmcia.CardSlot.GetSlotCount();
            if(count > 0)
            {
                PsionTeklogix.Pcmcia.CardSlot slot0 = new PsionTeklogix.Pcmcia.CardSlot(0);
                if(slot0.GetPower())
                {
                    MessageBox.Show("Slot has power");
                }
            }
            \endcode
            </example>
        </member>
        <member name="M:PsionTeklogix.Pcmcia.CardSlot.GetSlotCount">
            <summary>
            Determine the number of PCMCIA card slots this device has.
            </summary>
            <returns>The number of slots.</returns>
        </member>
        <member name="M:PsionTeklogix.Pcmcia.CardSlot.#ctor(System.UInt32)">
            <summary>
            CardSlot constructor.
            </summary>
            <param name="index">A zero based index used to indicate which card slot you wish to access</param>
        </member>
        <member name="M:PsionTeklogix.Pcmcia.CardSlot.SetPower(System.Boolean)">
            <summary>
            Turn on/off the PCMCIA slot
            </summary>
            <param name="state">true = on</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:PsionTeklogix.Pcmcia.CardSlot.GetPower">
            <summary>
            Get the current power state.
            </summary>
            <returns>true if the slot is turned on</returns>
        </member>
        <member name="T:PsionTeklogix.RAS.RasDevice">
            <summary>
             Contains information about a RAS device present on the Psion Teklogix device. This
            information (the device name and type) is needed when a new RAS entry is to be 
            created. 
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasDevice.#ctor(System.String,System.String)">
            <summary>
            Constructor. Creates a RasDevice object with the given name and type.
            </summary>
            <param name="name"> The name of the RAS device.</param>
            <param name="type"> The type of the RAS device.</param>
        </member>
        <member name="P:PsionTeklogix.RAS.RasDevice.DeviceName">
            <summary>
            The name of the RAS device ("Serial Port on COM3:", etc.)
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.RasDevice.DeviceType">
            <summary>
            The type of the RAS device ("modem", etc.)
            </summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanSingleClickEventArgs">
            <summary>
             Used to report any single-click data. Currently no information is available.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanSingleClickEventArgs.ToString">
            <summary>
            Converts the event arguments to a printable string.
            </summary>
        </member>
        <member name="T:Psion.AutoLock.AutoLockControl">
            <summary>Control of the sensor-based auto-lock and suspend features.</summary>
        </member>
        <member name="M:Psion.AutoLock.AutoLockControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Psion.AutoLock.AutoLockControl.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Psion.AutoLock.AutoLockControl.Dispose">
            <summary>
            Disposal routine. Frees up resources used by this object.
            </summary>
        </member>
        <member name="M:Psion.AutoLock.AutoLockControl.Dispose(System.Boolean)">
            <summary>
            Disposal routine. Frees up resources used by this object.
            </summary>
            <param name="disposing">true if code is explicitly disposing this object, or
            false if called by the garbage disposer</param>
        </member>
        <member name="P:Psion.AutoLock.AutoLockControl.EnableScreenOffInPhoneCall">
            <summary>Indicates if the screen is turned off during a phone call.</summary>
        </member>
        <member name="P:Psion.AutoLock.AutoLockControl.EnableSuspendOnFaceDown">
            <summary>Indicates if the device is suspended when placed face down on a table.</summary>
        </member>
        <member name="P:Psion.AutoLock.AutoLockControl.EnableLockOnProximity">
            <summary>Indicates if the touchscreen and keyboard are disabled when the proximity
            sensor senses a nearby object.</summary>
        </member>
        <member name="P:Psion.AutoLock.AutoLockControl.EnableLockOnResume">
            <summary>Indicates if the device is locked when resuming from suspend mode.</summary>
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanEventArgs">
            <summary>
            Arguments for Scan event handler callback.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Runtime.InteropServices.Marshalling.BasicTypeArrayToArrayList(System.Byte[],System.Int32)">
            <summary>
            Convert an unmanaged array of basic types (int, char, etc) to an array list.
            </summary>
            <remarks> I only needed to convert "normal" ints.  If you need to support other
            types you will have to add them yourself.
            This is similar to ByteToArrayList, but works for basic types such as int.
            </remarks>
            <param name="buffer">A byte array containing the data</param>
            <param name="itemSize">size of each item in the byte array</param>
            <returns>An arraylist of items</returns>
        </member>
        <member name="T:PsionTeklogix.Resources.ResourceManager">
            <summary>
            Extensions to the System.Resources.ResourceManager class.
            </summary>
            <remarks>
            The ResourceManager is extended to add 3 features. 
            <list type="bullet">
            <item>Be able to change the User Interface culture on the fly so that the device
            may be able to support multiple "Application" languages. i.e. Logon as english
            but the application changes to german after the login.</item>item>
            <item>Support argument lists when getting values. This allows the text to contain
            arguments when, for example, exceptions are thrown.</item>item>
            <item> Add the parsing and extraction of text based resources. This allows a language
            to be translated/tested before being converted to a .resources file or assembly.
            <para>Note: This feature may be costly from a performance and memory point of view. It
            has been added to facilitate remote development and deployment. The file has to 
            exist in a sub directory of the assembly that defines the type and has to be
            in the following format '{Culture}\{NameSpace}.{Class}.txt'. For example if this 
            class were to have its resources translated to german, the file would be 
            "de\PsionTeklogix.Resources.ResourceManager.txt".</para></item>item>
            </list></remarks>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.#ctor(System.Type)">
            <summary>
            Creates an instance of the ResourceManager for the given type.
            </summary>
            <example>
            <code lang="C#">
            public void Form1_Load()
            {
                // Load the resources for this form
                ResourceManager rm = new ResourceManager(typeof(Form1));
                object[] args = new object[0];
                args[0] = "My Application";
                
                // Resource string = "Application = {0}".
                // {0} will get replaced by the first arg.
                this.Text = rm.GetString("Title", args);
            }
            </code>
            <code lang="VB">
            Public Sub Form1_Load()
            {
                ' Load the resources for this form
                Dim rm As New ResourceManager(GetType((Form1))
                Dim args As Object[0]
                args[0] = "My Application"
                
                // Resource string = "Application = {0}".
                // {0} will get replaced by the first arg.
                Form1.Title = rm.GetString("Title", args)
            }
            </code>
            </example>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.GetString(System.String)">
            <summary>
            Get a string value by it's name, based on the current UI Culture.
            </summary>
            <param name="name">The name of the resource entry.</param>
            <returns>The value of the named resource.</returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.GetString(System.String,System.Object[])">
            <summary>
            Get a string value by it's name, based on the current UI culture.
            </summary>
            <remarks>
            The args are an argument to a String.Format that will be used to format
            a variable number of arguments.
            </remarks>
            <param name="name">The name of the resource entry.</param>
            <param name="args">Variable arguments.</param>
            <returns>The value of the named resource.</returns>
        </member>
        <member name="M:PsionTeklogix.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Overrridden to locate a text based resource file.
            </summary>
            <param name="culture">The CultureInfo to look for.</param>
            <param name="createIfNotExists">If true and if the ResourceSet has not been
             loaded yet, load it.</param>
            <param name="tryParents">If the ResourceSet cannot be loaded, try parent 
            CultureInfo objects to see if they exist.</param>
            <returns>The specified ResourceSet.</returns>
        </member>
        <member name="P:PsionTeklogix.Resources.ResourceManager.CurrentUICulture">
            <summary>
            Gets or Sets the current culture. This will change the language that
            will be extracted from the resource files.
            </summary>
            <remarks>
            As the Thread has no CurrentUICulture (As the desktop framework), this is
            where the programmer changes the CurrentUICulture. This culture is global 
            to all instances of the ResourceManager class and is thread independant.
            </remarks>
            <example>
            <code lang="C#">
            using System.Globalization;
            using PsionT.Resources.ResourceManager;
            
            public void ChangeLang(bool English)
            {
                // English or French
                if (English)
                    CurrentUICulture = new CultureInfo("en");
                else
                    CurrentUICulture = new CultureInfo("fr");
            }
            </code>
            <code lang="VB">
            Public Sub ChangeLang(ByVal English As Boolean)
                ' English or French
                If English Then
                    CurrentUICulture = new CultureInfo("en")
                Else
                    CurrentUICulture = new CultureInfo("fr")
                End If
            End Sub
            </code>
            </example>
        </member>
        <member name="T:PsionTeklogix.Power.PowerOnEventArgs">
            <summary>
            Power on event arguments.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerOnEventArgs.#ctor">
            <summary>
            Creates a new instance of the PowerOnEventArgs class.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.ACPowerStatusValues">
            <summary>AC power status.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.Offline">
            <summary>Not on AC.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.Online">
            <summary>On AC.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.BackupPower">
            <summary>
            On backup power.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.ACPowerStatusValues.Unknown">
            <summary>Unknown status.</summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryStatusValues">
            <summary>Battery charge status.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.High">
            <summary>Full charge.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Low">
            <summary>Low charge.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Critical">
            <summary>Needs to be charged immediately.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Charging">
            <summary>Charging.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.NoSystemBattery">
            <summary>No battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryStatusValues.Unknown">
            <summary>Unknown state.</summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerStates">
            <summary>
            Power states.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.On">
            <summary>
            On state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Off">
            <summary>
            No power, full off.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Critical">
            <summary>
            Critical off.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Boot">
            <summary>
            Boot state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Idle">
            <summary>
            Idle state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Suspend">
            <summary>
            Suspend state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Resume">
            <summary>
            Resume state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Reset">
            <summary>
            Reset state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.Preferred">
            <summary>
            Preferred state.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerStates.UserIdle">
            <summary>
            User idle state.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryChemistries">
            <summary>Type of Battery chemistry.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.Alkaline">
            <summary>Alkaline battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.NickelCadmium">
            <summary>Nickel Cadmium battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.NickelMetalHydride">
            <summary>Nickel Metal Hydride battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.LithiumIon">
            <summary>Lithium Ion battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.LithiumPolymer">
            <summary>Lithium Polymer battery.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.ZincAir">
            <summary>
            Zinc Air battery.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.BatteryChemistries.Unknown">
            <summary>Battery chemistry is unknown.</summary>
        </member>
        <member name="T:PsionTeklogix.Power.ResetKey">
            Key combinations for resetting system
        </member>
        <member name="F:PsionTeklogix.Power.ResetKey.BoostResetKey">
            enable boot to boost reset key
        </member>
        <member name="F:PsionTeklogix.Power.ResetKey.ColdResetKey">
            enable cold reset key
        </member>
        <member name="F:PsionTeklogix.Power.ResetKey.WarmResetKey">
            enable warm reset key
        </member>
        <member name="T:PsionTeklogix.Power.PowerOnKeyguardValues">
            <summary>Power-on keyguard values, which control how well the device is protected
            against accidental power-on.</summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerOnKeyguardValues.OneKey">
            <summary>Power on by pressing one key</summary>
        </member>
        <member name="F:PsionTeklogix.Power.PowerOnKeyguardValues.TwoKey">
            <summary>Power on by pressing two keys</summary>
        </member>
        <member name="T:PsionTeklogix.Power.WakeupSources">
            <summary>
            Sources that can generate wakeup events, which wake up devices from 
            suspend/shutdown.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.ExternalPower">
            <summary>connection to AC power</summary>
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.Expansion">
            <summary>
            connection to an expansion port(See HDK for definition for a hardware expansion port) 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.USB">
            <summary>connection to a USB device</summary>
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.BatteryDoor">
            <summary>closing of the battery door</summary>
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.Touch">
            <summary>contact with touchscreen</summary>
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.WwanRadio">
            <summary>
            receiving of incoming voice call, SMS or IP data packets 
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.BatteryInsertion">
            <summary>
            Batter inserted into device
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.Accelerometer">
            <summary>
            Movement (accelerometer)
            </summary> 
        </member>
        <member name="F:PsionTeklogix.Power.WakeupSources.Gyroscope">
            <summary>
            Movement (gyroscope) 
            </summary> 
        </member>
        <member name="T:PsionTeklogix.Power.PowerTransitionEventHandler">
            <summary>
            The PowerTransitionEventHandler delegate represents the method that will be called
            when the terminal power state changes.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryStatusChangeEventHandler">
            <summary>
            The BatteryStatusChangeEventHandler delegate represents the method that will
            be called when the battery status has changed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.ACPowerOfflineEventHandler">
            <summary>
            This delegate represents the method that will be called when the AC power is offline.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.ACPowerOnlineEventHandler">
            <summary>
            This delegate represents the method that will be called when the AC power is online.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerInfoChangeEventHandler">
            <summary>
            This delegate represents the method that will be called when the power information values change.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.PowerManagement">
            <summary>
            Abstracts device power management and battery status information.
            This class can be used in a polled fashion with the static members or in an event driven fashion
            by instantiating and binding the event handlers.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor used by Visual Studio Designer.
            This constructor is invoked when the customer drags a PowerManagement
            component from Visual Studio Toolbox to a form.
            Please use <see cref="M:PsionTeklogix.Power.PowerManagement.#ctor"/> to create a new instance
            of a PowerManagement object.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.#cctor">
            <summary>
            Initialize static variables
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.#ctor">
            <summary>
            Creates a new instance of the PowerManagement class.
            </summary>
            <exception cref="T:System.Exception">Thrown when uanble to register for
            Power change notifications.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Suspend">
            <summary>
             Used to put the terminal into suspend. If the device suspends, this method will
            only return once the device has come out of suspend, and all power management
            clients are notified that the device has just resumed from a suspend.
            </summary>
            <returns>True if successfully put into suspend, false otherwise.</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.ColdBoot">
            <summary>
            Used to hard reset a Psion Teklogix device. Data in the object store will be
            lost on a cold boot.
            </summary>
            <returns>True if the device is going to cold boot, and false if the device
            cannot perform a cold boot. Note: due to timing issues, the method may or may
            not return before the device resets.</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.WarmBoot">
            <summary>
            Used to soft reset a Psion Teklogix device. Data in the object store will not
            be lost on a warm boot.
            </summary>
            <returns>True if the device is going to warm boot, and false if the device
            cannot perform a warm boot. Note: due to timing issues, the method may or may
            not return before the device resets.</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnPowerInfoChange">
            <summary>
            Called when the terminal power information values change.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnPowerTransition(PsionTeklogix.Power.PowerStates,System.String)">
            <summary>
            Called when the terminal power state changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.MainBatteryStatusChange(PsionTeklogix.Power.BatteryStatusValues,PsionTeklogix.Power.BatteryStatusValues)">
            <summary>
            Called when the main batteries status has changed.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnACPowerOnline">
            <summary>
            Called when the terminal goes onto AC power.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.OnACPowerOffline">
            <summary>
            Called when the terminal goes off AC power.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of PowerManagement.
            </summary>
            <param name="disposing">Is this instance being explicitly disposed.</param>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetPowerSourceIndex(System.String)">
            <summary>
            Retrieve index of power source.  Please check enum PowerSources for currently
            supported values.
            </summary>
            <param name="powerSource">string representationof power source.  Please check
            powerSourceNames for currently supported values</param>
            <returns>index of power source</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetPowerSourceName(System.Int32)">
            <summary>
            retrieve string representation of a power source according to its index
            </summary>
            <param name="powerSourceIndex"> index of power source. Please check enum 
            PowerSources for currently supported values. </param>
            <returns>string representationof power source.  Please check
            powerSourceNames for currently supported values </returns>    
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources">
            <summary>
            Used to list all of the power sources available to a Psion
            Teklogix device. This method will return the list of
            possible power sources available as an array of power
            source names. Note that the power source does not have to
            be available to be listed.
            </summary>
            <returns>The power sources available to the terminal, typically:
            "Main Battery"
            "AC Power"</returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetValidSuspendTimeouts(System.String)">
            @deprecated (2010)
            <summary>
            Deprecated - Used to list valid timeouts for a power source. Each power
            source (e.g. "AC Power") has a set of valid timeout
            associated with it. These timeouts are used when setting
            the suspend timeouts for the specified power source.
            </summary>
            <remarks>
             Expected to be removed in future release.
            <p>Any in-range value can be passed to the Set routine.</p>
            </remarks>
            <param name="PowerSource">The name of the power source to get
            valid timeouts for. Must be one of the values returned by
            the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>An array of integers containing the allowed timeouts
            for the power source, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetSuspendTimeout(System.String)">
            <summary>
            Returns the suspend timeout. The suspend timeout is used to
            determine how long the Psion Teklogix device should wait,
            after going into the system idle state, before it should
            place the device into suspend (in order to conserve
            battery life). When the user wakes the device up (by pressing
            the 'On' button, etc.), the device will go back into the
            normal 'on' state, and turn the backlight, the display,
            and all peripheral devices back on. Any user activity
            before the device goes into the system idle timeout state
            will reset suspend, system idle and user idle timers.
            </summary>
            <param name="PowerSource">The name of the power source to
            get suspend timeout for. It must be one of the values
            returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <returns>Suspend timeout, in seconds.</returns>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the suspend timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetSuspendTimeout(System.String,System.Int32)">
            <summary>
            Sets the suspend timeout. The suspend timeout is used to
            determine how long the Psion Teklogix device should wait,
            after going into the system idle state, before it should
            place the device into the suspend (in order to conserve
            battery life). When the user wakes the device up (by
            pressing the 'On' button, etc.), the device will go back
            into the normal 'on' state, and turn the backlight, the
            display, and all peripheral devices back on. Any user
            activity before the device goes into the system idle
            timeout state will reset the suspend, system idle and
            user idle timers. File system activity and some network
            and radio operations will also cause system activity
            timer to be reset, preventing the terminal from going to
            suspend.
            </summary>
            <remarks>The suspend timeout value only needs to be set here
            once. The suspend timer will be started the moment there
            is no system activity (after going into the system idle
            state), and will be reset when any user activity is seen.
            Changes to the suspend timeout take effect immediately.</remarks>
            <param name="PowerSource">The name of the power source to set
            the suspend timeout for. Must be one of the values
            returned by the <see cref="M:PsionTeklogix.Power.PowerManagement.EnumeratePowerSources"/> method.</param>
            <param name="timeout">The amount of time wait before going into
            the suspend state (in seconds).</param>
            <exception cref="T:System.ArgumentException">Thrown when specified PowerSource is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown on devices that do not allow
            configuration of the suspend timeout.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatterySuspendThreshold">
             <summary>
             <p>Retrieves the battery suspend threshold. Some Psion Teklogix devices only
             have a small backup battery, or no backup battery at all. On such devices,
             once the main battery has completely discharged users have a very short window
             in which to change the battery before all volatile data is lost. In such cases
             it is desirable to have the device report that the main battery is "low"
             prematurely, in order to make sure it gets replaced/recharged before there is
             a possibility of data loss. By setting the battery suspend threshold, the
             device is forced to go into suspend when that threshold is reached as if the
             main battery had fully discharged.</p>
             </summary>
            
             <remarks>
             <p>The battery suspend threshold varies from device to device.
              * On the 7530 and 7535, the threshold has a range of 0-20%
              * On 7535 G2 and 7527, the Control Panel sets battery suspend threshold in
              mAh units. Since the MD SDK uses percentages, there is the possibility that a
              value set via the Control Panel is read back slightly differently in the SDK.
              Also, battery re-calibrations and battery swapping will change the percentage
             reported.
              * 7525, 8515 and 8525 do not have a battery suspend threshold.        
             </p>
             </remarks>
            
             <returns>The current battery suspend threshold configured on the device, as a
              percentage.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the device
              does not have a battery suspend threshold setting.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              isn't calibrated.</exception>                
             @
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetBatterySuspendThreshold(System.Int32)">
             <summary>
             <p>Sets the battery suspend threshold. Some Psion Teklogix devices only have
             a small backup battery, or no backup battery at all. On such devices, once the
             main battery has completely discharged users have a very short window in which
             to change the battery before all volatile data is lost. In such cases it is
             desirable to have the device report that the main battery is "low" prematurely,
             in order to make sure it gets replaced/recharged before there is a possibility
             of data loss. By setting the battery suspend threshold, the device is forced
             to go into suspend when that threshold is reached as if the main battery had
             fully discharged.</p>
             </summary>
            
             <remarks>
             <p>This method accept values between 0 and 20%. 
              
              The battery suspend threshold varies from device to device.
              * On the 7530 and 7535, the threshold has a range of 0-20%
              * On 7535 G2 and 7527, the Control Panel sets battery suspend threshold in
             mAh units. Since the MD SDK uses percentages, there is the possibility that a
             value set via the Control Panel is read back slightly differently in the SDK.
              The maximum and minimun values will vary according to the device and the 
             battery installed, and MD SDK will adjust the parameter to this range. 
              Also, battery re-calibrations and battery swapping will change the percentage
             reported.
              * 7525, 8515 and 8525 do not have a battery suspend threshold.     
             </p>
             </remarks>
            
             <param name="threshold">The battery threshold to configure, as a percentage.
              When the specified battery charge percentage is reached, the Psion Teklogix 
              device will go into suspend. Valid values are between 0 and 20. </param>
             <exception cref="T:System.ApplicationException">ApplicationException - If the device
              does not have a battery suspend threshold setting.</exception>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              isn't calibrated.</exception>        
             <exception cref="T:System.ArgumentException">ArgumentException - If the supplied
              suspend threshold is out of range.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatterySerialNumber">
             @deprecated (2010)
             <summary>
             Deprecated -
             Serial number is now being returned as a string. Please use 
             GetBatterySerialNumber(ref string serialNumber) instead.
             Retrieves the battery serial number. 
             </summary>
            
             <returns>The current battery serial number.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the serial number property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatterySerialNumber(System.String@)">
             <summary>
             Retrieves the battery serial number. 
             </summary>
            
             <param name="serialNumber">The returned battery serial number.
             </param>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the serial number property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatteryCycleCount">
             <summary>
             Retrieves the battery cycle count. 
             </summary>
            
             <returns>The current battery cycle count.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the cycle count property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatteryManufactureDate">
             @deprecated (2010)
             <summary>
             Deprecated -
             Manufacture date is now being returned as a string. Please use 
             GetBatteryManufactureDate(ref string manufactureDate) instead. 
             Retrieves the battery manufacture date,The format depends on battery type.
             </summary>
            
             <returns>The current battery manufacture date.</returns>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the manufacture date property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetBatteryManufactureDate(System.String@)">
             <summary>
             Retrieves the battery manufacture date. 
             </summary>
            
             <param name="manufactureDate">The returned current battery manufacture date.
             </param>
             <exception cref="T:System.ApplicationException">ApplicationException - If the battery
              does not support the serial number property.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetWakeupKey(System.Int32)">
            <summary>
            Determines if a given key wakes up this device. If the device does not support
            wakeup key configuration, false is returned. If the key cannot be configured
            as a wakeup key, false is returned.
            </summary>
            <param name="scanCode">The keyboard scan code of interest.</param>
            <returns>true if the device supports wakeup key configuration and the given
            scan code is configurable and the give scan code wakes up this device,
            otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetWakeupKey(System.Int32,System.Boolean)">
            <summary>
            Sets whether a given key wakes up this device. If the device does not support
            wakeup key configuration, the call has no effect. If the key cannot be set as
            a wakeup key, the call has no effect.
            </summary>
            <param name="scanCode">The keyboard scan code to set.</param>
            <param name="wakeup">true if the given scan code should wake up this device,
            otherwise false.</param>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.power_ResetKeyEnable(System.Boolean,System.Int32,System.Boolean@)">
            <summary>
            get/set enabled state of a given reset key 
            </summary>
            <param name="isGet">true to get, false to set</param>
            <param name="keyIndex">index of reset key. Please refer to ResetKey for
            currently supported values</param>
            <param name="enable">true to enable, false to disable</param>
            <returns>error code encoded with PTX proprietary facility code and error code 
            defined in PtxSdkErrors.h.  Please see winerrors.h for encoding scheme.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.GetResetKeyEnable(System.Int32)">
            <summary>
            Determines if the enabling state of a given reset key
            </summary>
            <param name="keyIndex">index of reset key. Please refer to ResetKey for
            currently supported values</param>
            <returns>true if the given reset key is enabled
            </returns>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.SetResetKeyEnable(System.Int32,System.Boolean)">
            <summary>
            Determines if the enabling state of a given reset key
            </summary>
            <param name="keyIndex">index of reset key. Please refer to ResetKey for
            currently supported values</param>
            <param name="enable">true to enable the given reset key</param>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.IsWakeupSourceEnabled(PsionTeklogix.Power.WakeupSources)">
            <summary>
            Determines if a given external source for controlling wakeup of a terminal is 
            enabled
            </summary>
            <param name="index">
            see WakeupSource for a list of possible wakeup controlling sources</param>        
            <returns>
            true if enabled; false if disabled 
            </returns>
            <exception cref="T:System.Exception">If an error occurs, such as when this feature is not
            supported.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.EnableWakeupSource(PsionTeklogix.Power.WakeupSources,System.Boolean)">
            <summary>
            Enable/Disable source for controlling wakeup of a device.
            </summary>
            <param name="index">
            see WakeupSource for a list of possible wakeup controlling sources</param>
            <param name="enabled">true to enable; false to disable</param>
            <exception cref="T:System.Exception">If an error occurs, such as when this feature is not
            supported.</exception>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Dispose">
            <summary>
            Release power management resources.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.PowerManagement.Finalize">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.PowerInfoChangeEvent">
            <summary>
            Occurs when the terminal power information values change.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.PowerTransitionEvent">
            <summary>
            Occurs when the terminal power state changes.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.MainBatteryStatusChangeEvent">
            <summary>
            Occurs when the main battery status has changed.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.ACPowerOfflineEvent">
            <summary>
            Occurs when then AC power is offline.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="E:PsionTeklogix.Power.PowerManagement.ACPowerOnlineEvent">
            <summary>
            Occurs when the AC power is online.
            </summary>
            <remarks>This event is generated by a separate thread so Control.Invoke() must
            be used if the delegate function accesses Controls.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.AllowAutoSuspend">
            @deprecated (2010)
            <summary>
            Deprecated - Not supported
            </summary>
            <returns>Always false</returns>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.ExternalPowerStatus">
            <summary>
            Gets the current AC status.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryStatus">
            <summary>
            Determines the charge status of the main battery on the current device.
            </summary>
            <remarks>
             The charge status can be one of:
             * no battery - This Psion Teklogix device does not currently have a battery
             * very low - The battery is almost discharged
             * low  - The battery has little charge left
             * high - The battery has an acceptable amount of charge left
             * charging - The battery is being charged by an external source
            </remarks>
            <returns>
             The main battery status, see the BatteryStatusValues enumeration.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery status capacity cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryPercent">
            <summary>
            Reports the amount of charge left in the battery, as a percentage.
            </summary>
            <remarks>
            Note that the battery charge remaining reported may not be accurate. The
            charge remaining reported may vary due to the activity of peripheral devices
            such as 802.11 and/or Narrowband radios.
            </remarks>
            <returns>
            The amount of charge left in the battery, as a percentage.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery percent capacity cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryVoltage">
            <summary>
            The current voltage level reported by the battery.
            </summary>
            <returns>
            The battery voltage in millivolts (0..65535 mV).
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery voltage cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryCurrent">
            <summary>
            Amount of instantaneous current drain. Note that the current consumption reported
            may not be accurate, as some batteries do not report this information, or report it
            improperly. Also, the consumption may vary due to the activity of peripheral devices
            such as 802.11 and/or Narrowband radios.
            </summary>
            <returns>
            The instantaneous current drain (in mA). 0 to 32767 for charge, 0 to -32768
            for discharge.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery current drain cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryChemistry">
            <summary>
            Gets the main battery chemistry.
            </summary>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery chemistry cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryFullLifetime">
            <summary>
             Determines the lifetime of the battery, in seconds, when the battery is fully
            charged.
            </summary>
            <remarks>
            <p>The lifetime reported may not be accurate, as various system configurations,
            power management settings, and the activity of various peripheral devices will
            all affect the amount of charge drained from the battery.</p>
            <p>The life time and/or full lifetime of the battery may not be able to be
            determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The total lifetime left in the battery in seconds when fully charged.
            If the total lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
             battery full lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryLifetime">
            <summary>
            Determines the amount of charge remaining in the battery, in seconds.
            </summary>
            <remarks>
            <p>The amount of charge remaining in the battery reported may not be completely
            accurate. Also, the charge remaining reported may vary due to the activity of
            peripheral devices such as 802.11 and/or Narrowband radios.</p>
            <p>The life time and/or full lifetime of the battery may not be able to be
            determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The current charge left in the battery in seconds (lifetime). If the
             remaining lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
             battery lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryStatus">
            <summary>
            Gets the backup battery status.
            </summary>
            <remarks>
            Windows CE assumes that all devices will have a backup battery. For devices
            such as the 753x-series terminals (that don't have backup batteries), the
            backup battery status will be reported as BatteryStatusValues.High.
            </remarks>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryPercent">
            <summary>
            Reports the charge left in the backup battery. Note that the battery charge
            remaining reported may not be completely accurate.
            </summary>
            <returns>
            The current charge left in the backup battery as a percentage.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
            battery percent capacity cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryVoltage">
            <summary>
            Gets the backup battery voltage in millivolts (0..65535 mV)
            </summary>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
            battery voltage cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryFullLifetime">
            <summary>
             Determines the lifetime of the backup battery, in seconds, when the battery
            is fully charged.
            </summary>
            <remarks>
            <p>The lifetime reported may not be accurate, as various system configurations,
            power management settings, and the activity of various peripheral devices will
            all affect the amount of charge drained from the battery.</p>
            <p>The life time and/or full lifetime of the backup battery may not be able to
            be determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The total lifetime left in the backup battery in seconds when fully
            charged. If the total lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
             battery full lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.BackupBatteryLifetime">
            <summary>
            Determines the amount of charge remaining in the backup battery, in seconds.
            </summary>
            <remarks>
            <p>The amount of charge remaining in the battery reported may not be completely
            accurate. Also, the charge remaining reported may vary due to the activity of
            peripheral devices such as 802.11 and/or Narrowband radios.</p>
            <p>The life time and/or full lifetime of the backup battery may not be able to
            be determined while the device is being powered by an external source (such as
            AC adapter, etc.). As a result, this method may throw an exception if called
            while the device is being externally powered.</p>
            </remarks>
            <returns> The current charge left in the battery in seconds (lifetime). If the
             remaining lifetime is not known, an exception is thrown.</returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the backup
             battery lifetime cannot be determined.</exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.MainBatteryTemperature">
            <summary>
            Reports the current battery temperature.
            </summary>
            <returns>
            The current battery temperature, in 0.1 degrees Celcius increments.
            </returns>
            <exception cref="T:System.ApplicationException">ApplicationException - If the main
            battery temperature cannot be determined. </exception>
        </member>
        <member name="P:PsionTeklogix.Power.PowerManagement.PowerOnKeyguard">
            <summary>
            The power-on keyguard setting.  Values are enumerated in
            <see cref="T:PsionTeklogix.Power.PowerOnKeyguardValues"/>.
            </summary>
            <exception cref="T:System.Exception">If an error occurs, such as when this feature is not
            supported.</exception>
        </member>
        <member name="T:PsionTeklogix.Power.BatteryStatusEventArgs">
            <summary>
            Battery status change event arguments.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Power.BatteryStatusEventArgs.#ctor(PsionTeklogix.Power.BatteryStatusValues,PsionTeklogix.Power.BatteryStatusValues)">
            <summary>
            Creates a new instance of the BatteryStatusEvent args class.
            </summary>
            <param name="currentStatus">The current battery status.</param>
            <param name="lastStatus">The last battery status.</param>
        </member>
        <member name="P:PsionTeklogix.Power.BatteryStatusEventArgs.LastStatus">
            <summary>
            Gets the last known battery status before it changed.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Power.BatteryStatusEventArgs.CurrentStatus">
            <summary>
            Gets the current battery status.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Peripherals.InterfaceEvent">
            <summary>
            This class is used to publish the events generated when a device interface
            is attached or detached. For more details <see cref="T:PsionTeklogix.Peripherals.Peripherals"/>.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Peripherals.InterfaceEvent.InterfaceValue">
            <summary>
            The value that represents which interface status has changed.
            </summary>
        </member>
        <member name="T:PsionTeklogix.RAS.RasPhonebook">
             <summary>
             Represents the RAS Phonebook.
             </summary>
             <remarks>
             Note: that there are no properties or methods for managing Phonebook
             but there is an alternative way to manage these entries. As the phone
             book is stored in the registry under "HKEY_CURRENT_USER\Comm\Rasphone",
             it is suggested that the entries be created during development and 
             exported using the Remote Regedit tool. These entries may then be 
             added during the installtion procedure by editing the .inf file used
             to create the installtion cab file. 
             </remarks>
             <example>
             The following example shows how to syncronously dial a connection.
             <code lang="VB">
             Imports PsionTeklogix.RAS
            
             Public Sub DialEntry(name As String)
                 Dim pb As New RasPhonebook
                 Dim _entry As Entry
                 _entry = pb.GetEntry(name)
            
                 try
                 {
                     _entry.Dial(False, AddressOf _entry_ConnectionStateEvent)
                     MessageBox.Show("Connection Established");
                 }
                 
                 catch Exception ex
                 {
                     MessageBox.Show("Connection Failed: " + ex.Message);
                 }
                 End Try
                 Private Sub _entry_ConnectionStateEvent(ByVal sender As Object, 
                                 ByVal e As PsionTeklogix.Net.RAS.ConnectionStateEventArgs)
                     Dim entry As Entry = CType(sender, Entry)
                 End Sub
             </code>
             </example>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.RasPhoneBook">
            <summary>
            Initializes a new instance of the Phonebook class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.EnumerateDevices">
            <summary>
            Enumerates all available RAS devices.
            </summary>
            <returns>The names of all available RAS devices</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.EnumerateRasDevices">
            <summary>
            Returns all available RAS devices and their types.
            </summary>
            <returns>The names and types of all available RAS devices.</returns>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.Refresh">
            <summary>
            Refreshes an instance of the Phonebook class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.GetEntry(System.String)">
            <summary>
            Gets the specified entry.
            </summary>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.AddEntry(System.String)">
            @deprecated - (2009?)
            <summary>
            Deprecated - Returns all of the devices that can be used to create a RAS 
            connection on the
            Psion Teklogix device.
            </summary>
            <remarks>
             This method is obsolete.
            </remarks>
            <param name="Name">Ras entry name</param>
            <exception cref="T:System.ApplicationException">Always. This method is obsolete.</exception>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.AddEntry(System.String,PsionTeklogix.RAS.RasEntryProperties)">
            <summary>
             Adds a new entry to the RAS phonebook. The name for the new entry must be valid, 
            and must not match the name of an existing entry. The properties specified must
            also be valid.
            </summary>
            <remarks>
             * Certain values in the RasEntryProperties object will be ignored unless the
             appropriate option is set (for example, area code will be ignored unless the use
             country and area codes flag is set).
             * Similarly, the X.25 settings will be ignored unless an X.25 device is present
             and selected as the RAS device.
             * See the Win32 API documentation of 'RasValidateEntryName' for the rules for 
             naming a RAS entry.
            </remarks>
            <param name="entryName">Ras entry name to add.</param>
            <param name="props">Ras entry properties</param>
            <exception cref="T:System.ArgumentNullException">If the entry name and/or properties 
            are null.</exception>
            <exception cref="T:System.ArgumentException">If the entry name is invalid or already 
            exists.</exception>
            <exception cref="T:System.ApplicationException">If the entry cannot be created.</exception>
        </member>
        <member name="M:PsionTeklogix.RAS.RasPhonebook.RemoveEntry(System.String)">
            <summary>
            Removes Entry from Entries collection
            </summary>
            <param name="Name">Ras Entry Name</param>
        </member>
        <member name="P:PsionTeklogix.RAS.RasPhonebook.Entries">
            <summary>
            Gets a collection of entries in the Phonebook.
            </summary>
        </member>
        <member name="P:PsionTeklogix.RAS.RasPhonebook.Connections">
            <summary>
            Gets a collection of entries that are connected.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Indicators.NamedMutex">
            <summary>
            Named Mutex class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Indicators.NamedMutex.ReleaseMutex">
            <summary>
            Releases a handle to a named mutex.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.ModifierKeyEventArgs">
            <summary>
            Arguments for the modifier key event handler.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyEventArgs._key">
            <summary>
            The modifier key that caused the event.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyEventArgs._newState">
            <summary>
            The modifier key's state.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.ModifierKeyEventArgs.#ctor(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.KeyState)">
            <summary>
            Creates a new instance of the ModifierKeyEventArgs.
            </summary>
            <param name="modifier">The modifier key.</param>
            <param name="state">The state of the modifier.</param>        
        </member>
        <member name="P:PsionTeklogix.Keyboard.ModifierKeyEventArgs.key">
            <summary>value of modifier key</summary>
        </member>
        <member name="P:PsionTeklogix.Keyboard.ModifierKeyEventArgs.newState">
            <summary>state of modifier key</summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs">
            <summary>
            Arguments for the LetterKeyProposed event handler.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs._key">
            <summary>
            The proposed letter key.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the LetterKeyProposedEventArgs.
            </summary>
            <param name="key">The proposed letter key.</param>
        </member>
        <member name="P:PsionTeklogix.Keyboard.LetterKeyProposedEventArgs.Key">
            <summary>
            property for accessing key proposed
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.ModifierKeyHandler">
            <summary>
            Modifier Delegate
            </summary>  
        </member>
        <member name="T:PsionTeklogix.Keyboard.LetterKeyCompletedHandler">
            <summary>
            Delegate for LetterKeyCompletedEvent
            </summary>  
        </member>
        <member name="T:PsionTeklogix.Keyboard.LetterKeyProposedHandler">
            <summary>
            Delegate for LetterKeyProposedEvent
            </summary>  
        </member>
        <member name="T:PsionTeklogix.Keyboard.Key">
            <summary>
            Device independent physical key identifiers. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key0">
            <summary> 0 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key1">
            <summary> 1 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key2">
            <summary> 2 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key3">
            <summary> 3 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key4">
            <summary> 4 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key5">
            <summary> 5 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key6">
            <summary> 6 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key7">
            <summary> 7 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key8">
            <summary> 8 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.key9">
            <summary> 9 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.A">
            <summary> A key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.B">
            <summary> B key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.C">
            <summary> C key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.D">
            <summary> D key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.E">
            <summary> E key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F">
            <summary> F key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.G">
            <summary> G key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.H">
            <summary> H key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.I">
            <summary> I key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.J">
            <summary> J key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.K">
            <summary> K key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.L">
            <summary> L key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M">
            <summary> M key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.N">
            <summary> N key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.O">
            <summary> O key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.P">
            <summary> P key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Q">
            <summary> Q key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.R">
            <summary> R key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.S">
            <summary> S key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.T">
            <summary> T key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.U">
            <summary> U key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.V">
            <summary> V key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.W">
            <summary> W key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.X">
            <summary> X key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Y">
            <summary> Y key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Z">
            <summary> Z key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F1">
            <summary> F1 key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F2">
            <summary> F2 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F3">
            <summary> F3 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F4">
            <summary> F4 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F5">
            <summary> F5 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F6">
            <summary> F6 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F7">
            <summary> F7 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F8">
            <summary> F8 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F9">
            <summary> F9 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F10">
            <summary> F10 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F11">
            <summary> F11 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F12">
            <summary> F12 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F13">
            <summary> F13 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F14">
            <summary> F14 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F15">
            <summary> F15 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F16">
            <summary> F16 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F17">
            <summary> F17 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F18">
            <summary> F18 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F19">
            <summary> F19 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F20">
            <summary> F20 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F21">
            <summary> F21 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F22">
            <summary> F22 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F23">
            <summary> F23 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F24">
            <summary> F24 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F25">
            <summary> F25 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F26">
            <summary> F26 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F27">
            <summary> F27 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F28">
            <summary> F28 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F29">
            <summary> F29 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.F30">
            <summary> F30 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M1">
            <summary>M1 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M2">
            <summary>M2 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M3">
            <summary>M3 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M4">
            <summary>M4 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M5">
            <summary>M5 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M6">
            <summary>M6 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M7">
            <summary>M7 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M8">
            <summary>M8 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M9">
            <summary>M9 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M10">
            <summary>M10 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M11">
            <summary>M11 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.M12">
            <summary>M12 key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Scan">
            <summary>Scan key </summary>                
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.HandgripScan">
            <summary>Handgrip scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.LeftScan">
            <summary>Left scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.RightScan">
            <summary>Right scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideLeftScan">
            <summary>Side left scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideRightScan">
            <summary>Side left scan key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Alt">
            <summary>
            Alt key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Backspace">
            <summary>Backspace key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Blue">
            <summary>
            Blue key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Backlight">
            <summary>Backlight key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Comma">
            <summary>Comma key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.ContrastUp">
            <summary>Contrast up key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Control">
            <summary>
            Control key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Delete">
            <summary>Delete key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Enter">
            <summary>Enter key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.End">
            <summary>End key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Esc">
            <summary>Escape key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Home">
            <summary>Home key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Insert">
            <summary>Insert key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Orange">
            <summary>
            Orange key.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Period">
            <summary>Period key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PageDown">
            <summary>Page Down key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PageUp">
            <summary>Page Up key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Shift">
            <summary>
            Shift key.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Space">
            <summary>Space key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Tab">
            <summary>Tab key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.DownArrow">
            <summary>Down arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.LeftArrow">
            <summary>Left arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.RightArrow">
            <summary>Right arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.UpArrow">
            <summary>Up arrow key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideLeftDownArrow">
            <summary>Left side down arrow </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideLeftUpArrow">
            <summary>Left side up arrow </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideRightDownArrow">
            <summary>Right side down arrow </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SideRightUpArrow">
            <summary>Right side up arrow </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Windows">
            <summary>Windows key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SoftKey1">
            <summary>Left soft key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.SoftKey2">
            <summary>Right soft key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PhoneSend">
            <summary>Phone talk (send) key </summary> 
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PhoneEnd">
            <summary>Phone end key </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PhoneStar">
            <summary>Phone * key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.PhonePound">
            <summary>Phone # key </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.Key.Power">
            <summary>Power </summary>        
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyState">
            <summary>
            Modifier key state constants used by <see cref="T:PsionTeklogix.Keyboard.ModifierKeyEventArgs"/>.
            </summary>    
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyState.Off">
            <summary>
            Modifier is inactive.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyState.OneShot">
            <summary>
            Modifier is active.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.KeyState.Lock">
            <summary>
            Modifier is locked (always active).
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.ModifierKeyCycle">
            <summary>
            Modifier key cycle used by <see cref="M:PsionTeklogix.Keyboard.Keyboard.SetModifierKeyCycle(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.ModifierKeyCycle)"/>
            and <see cref="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyCycle(PsionTeklogix.Keyboard.Key)"/>
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyCycle.Off_Lock">
            <summary>
            The modifier key will cycle its state through off and lock.        
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyCycle.Off_OneShot">
            <summary>
            The modifier key will cycle its state through off and one shot.
            </summary>        
        </member>
        <member name="F:PsionTeklogix.Keyboard.ModifierKeyCycle.Off_OneShot_Lock">
            <summary>
            The modifier key will cycle its state through off, one shot and lock.                
            </summary>        
        </member>
        <member name="T:PsionTeklogix.Keyboard.CommandFlags">
            <summary>
            Command flags to use with the 
            <see cref="M:PsionTeklogix.Keyboard.Keyboard.InjectKeyboardCommand(PsionTeklogix.Keyboard.Function,System.Int32,PsionTeklogix.Keyboard.CommandFlags)"/> 
            method.
            </summary>             
        </member>
        <member name="F:PsionTeklogix.Keyboard.CommandFlags.Synchronous">
            <summary>
            Send function synchronously: The function will not return until the injected 
            key is handled.
            By using this flag, you can subsequently call routines such as 
            <see cref="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyState(PsionTeklogix.Keyboard.Key)"/> to get 
            information that has been updated by the injected command.
            </summary>       
        </member>
        <member name="T:PsionTeklogix.Keyboard.Keyboard">
            <summary>
            The keyboard class allows developers to:
            <list type="Bullet">
            <item>
            <description>Determine if a hardware keyboard is present on the current Psion Teklogix device</description>
            </item>
            <item>
            <description>Determine other information about the keyboard (type, etc), and to disable and re-enable the keyboard  when necessary</description>
            </item>
            <item>
            <description>The keyboard class also allows the simulation of keyboard events in software, and to translate between virtual-key codes and scan codes</description>
            </item>
            <item>
            <description>Monitor modifier keys events (when blue, orange, shift, alt and control keys are pressed)</description>
            </item>
            </list>
            </summary>
            <remarks>
            The hardware keyboard is the physical keyboard
            which is part of the device. The software keyboard is any SIP device.
            <para>The keyboard class wraps a number of functions available in the
            Windows CE Win32 APIs. They are provided here as part of this assembly
            for your convenience. For detailed information on these APIs, please
            consult the Microsoft documentation for Windows CE .NET located here: 
            "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcelib40/html/pb_start.asp?frame=true".
            </para>
            <para>You can also navigate to these functions in MSDN by following this
            path: Mobile and Embedded Development > Embedded Operating System Development >
            Windows CE > Windows CE .NET > Product Documentation Application Development > 
            User Interface Services > User Interface Reference > Keyboard Reference > 
            Keyboard Functions</para>
            Note:
            Disabling the keyboard is dangerous, and care should be taken to 
            make sure the keyboard is disabled only when absolutely necessary! 
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.VK_OFF">
            @deprecated (2010) use VirtualKey.VK_OFF Instead.       
            <summary>        
            Deprecated - use VirtualKey.VK_OFF Instead.
            A constant representing the virtual key code 
            which will turn off the power to the device. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.ScanCodeNotFound">
            <summary>TranslateToScanCode will return this constant if the specified key 
              doesn't have a scancode in a particular device.
             </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardType">
            <summary>
            Determines the keyboard type on the Psion Teklogix device.
            </summary>
            <remarks>
            <p>Currently, the keyboard type is a string representing the name of the country 
            or language with which it is  associated, or a count of the number of keys on 
            the device.</p>
            <p>One of the following names will be returned:
             *   United Kingdom
             *   United States
             *   French
             *   German
             *   Italian
             *   Spanish
             *   ABC-Key
             *   Azerty-Key
             *   Qwerty-Key
             *   24 Key Keyboard
             *   36-Key
             *   37-Key
             *   52 Key Keyboard
             *   56-Key
             *   58-Key
             *   62-Key
             *   None
             *   Unknown
            </p>
            </remarks>
            <returns>
            The type of keyboard, as a string. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetAsyncKeyState(System.Int16)">
            <summary>
            Determines whether a key is up or 
            down at the time the function is called, and 
            whether the key was pressed after a previous call to 
            GetAsyncKeyState.
            </summary>
            <param name="key">
            [in] Specifies one of 256 possible virtual-key codes. 
            </param>
            <returns><para>If the method succeeds, the return value specifies 
            whether the key was pressed since the last call to 
            GetAsyncKeyState, and whether the key is currently up or down. 
            If the most significant bit is set, the key is down. The least 
            significant bit is not valid in Windows CE, and should be 
            ignored. GetAsyncKeyState returns the current key state even if 
            a window in another thread or process currently has the 
            keyboard focus.</para>
            <para>This method wraps the GetAsyncKeyState() function in the Windows CE 
            APIs. For more detailed information, please consult MSDN documentation at
            "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefGetAsyncKeyState.asp".
            </para>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Synthesizes a keystroke. 
            The system can use such a synthesized keystroke to 
            generate a WM_KEYUP or WM_KEYDOWN message. 
            </summary>
            <param name="bVk">
            [in] Specifies a virtual-key code. 
            The code must be a value in the range 1 to 254. 
            </param>
            <param name="bScan">
            [in] Specifies a hardware scan code for the key. 
            This parameter is not explicitly used. 
            </param>
            <param name="dwFlags">
            [in] Flags which specify various aspects of function operation. 
            </param>
            <param name="dwExtraInfo">
            [in] Specifies an additional 32-bit value 
            associated with the key stroke. 
            </param>
            <remarks>This method wraps the keybd_event function in the Windows CE APIs.
            For detailed information, including flag values for the dwFlags parameter,
            please see the MSDN documentation for this function at
            "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefKeybd_event.asp".
            </remarks>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.EnableHardwareKeyboard(System.Boolean)">
            <summary>
            Enables or disables the hardware keyboard. 
            </summary>
            <remarks>
            This method affects only the hardware keyboard - that is, the
            physical keyboard that is an integral part of the device - and 
            external keyboards, or virtual keyboards displayed on the touch-sensitive
            screen.
            <para>
            It is sometimes desirable to disable the keyboard in order to 
            prevent any inadvertent actions resulting from accidental pressing 
            of the keys. For mobile devices, this can happen if the device
            is put in a pocket or bumped while in a holster. This method can
            be used to disable the keyboard after a period of inactivity, or
            in response to a user action. Be sure to provide a way for the
            user to re-enable the keyboard (generally through the touch
            screen).</para>
            <para>This method wraps the EnableHardwareKeyboard() function in the
            Windows CE APIs. For more detailed information, please see the MSDN
            documentation for this function at
            "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefenablehardwarekeyboard.asp".
            </para>
            </remarks>
            <param name="bEnable">
            [in] Boolean value that specifies whether to enable or 
            disable the keyboard. 
            Set it to TRUE to enable the keyboard or FALSE to disable it. 
            </param>
            <returns>
            This method always returns TRUE.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardStatus">
            <summary>
            Returns the status of the hardware keyboard.
            </summary>
            <returns>
            This function returns an value from the <see cref="T:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD"/> enumeration
            indicating whether or not a keyboard is present and what its capabilities are. 
            <para>This method wraps the GetKeyboardStatus() function in the Windows CE
            APIs. For more information, please see the MSDN documentation on this
            function at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetkeyboardstatus.asp".
            </para>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.MapVirtualKey(System.UInt32,System.UInt32)">
            <summary>
            Translates, or maps, a virtual-key code 
            into a scan code or character value, or translates a 
            scan code into a virtual-key code.
            </summary>
            <remarks>This method wraps the MapVirtualKey() function from the Windows CE
            APIs. For more information, please see the MSDN documentation for this function
            at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefMapVirtualKey.asp"
            </remarks>
            <param name="uCode">
            [in] Specifies the virtual-key code or scan code for a key. 
            </param>
            <param name="uMapType">
            [in] Specifies the translation to perform. 
            The value of this parameter depends on the value 
            of the uCode parameter 
            </param>
            <returns>
            A character value indicates success. 
            Zero indicates that there is no translation.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetMessageSource">
            <summary>
            Determines the source of a keyboard message.
            </summary>
            <remarks>This method wraps the GetMessageSource() function from the Windows CE
            APIs. For more information, please see the MSDN documentation for this function
            at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetmessagesource.asp"
            </remarks>
            <returns>
            <list type="Bullet">
            <item>
            <description>MSGSRC_SOFTWARE_POST indicates that the message source was software</description>
            </item>
            <item>
            <description>MSGSRC_HARDWARE_KEYBOARD indicates that the message source was the keyboard</description>
            </item>
            <item>
            <description>MSGSRC_UNKNOWN indicates that the message source is unknown</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardLayout(System.Int32)">
            <summary>
            Retrieves the active input language 
            identifier for a specified thread.
            </summary>
            <remarks>This method wraps the GetKeyboardLayout() function in the Win CE
            .NET API. For more information on this function, see the MSDN documentation
            at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefGetKeyboardLayout.asp". 
            For more information about language identifiers, see Language Identifiers 
            and Locales at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcelocal/html/cerefLanguageIdentifiersLocales.asp" in the
            Microsoft Windows CE .NET documentation in MSDN.</remarks>
            <param name="idThread">
            [in] Set to NULL to get the keyboard layout of 
            the active thread. No other value is supported. 
            </param>
            <returns>
            The input language identifier for the thread 
            indicates success. The low-order word contains a 
            language identifier for the input language and the 
            high-order word contains a device handle for the physical 
            layout of the keyboard. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetKeyboardLayoutName(System.String)">
            <summary>
            Retrieves the name of the 
            active keyboard layout. 
            </summary>
            <remarks>This method wraps the GetKeyboardLayoutName() function in the
            Win CE .NET API. For more information on this function, please see the 
            MSDN documentation at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefGetKeyboardLayoutName.asp".
            </remarks>
            <param name="pwszKLID">
            [in] Pointer to the buffer of at least KL_NAMELENGTH 
            characters that is to receive the name of the keyboard 
            layout, including the terminating null character. 
            </param>
            <returns>
            Nonzero indicates success. Zero indicates failure. 
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.DisableStandardShell">
            @deprecated (2010)
            <summary>
            Deprecated - Use PsionVu Instead. Disables standard shell. 
            </summary>
            <remarks>
            The standard shell refers to the Start button and the system
            tray. The task bar will still be available.
             The shell MUST be re-enabled before an application exits. Failure to
            re-enable the shell will leave the shell permanently disabled (until a warm
            boot or cold boot occurs), and will cause the task bar and icon tray to
            disappear.        
            <seealso cref="M:PsionTeklogix.Keyboard.Keyboard.EnableStandardShell"/>
            </remarks>
            <returns>        
            If successful returns true, otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.EnableStandardShell">
            @deprecated (2010)
            <summary>
            Deprecated - Use PsionVu instead.  Enables Standard shell.
            </summary>
            <remarks>
            The standard shell refers to the Start button and the system
            tray. The task bar will still be available. 
             The shell MUST be re-enabled before an application exits. Failure to
            re-enable the shell will leave the shell permanently disabled (until a warm
            boot or cold boot occurs), and will cause the task bar and icon tray to
            disappear.
            <seealso cref="M:PsionTeklogix.Keyboard.Keyboard.DisableStandardShell"/>
            </remarks>
            <returns>
            If successful returns true, otherwise false.
            </returns>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyState(PsionTeklogix.Keyboard.Key)">
            <summary>
            Retrieve current modifier key state.
            </summary>
            <param name="key">
            [in] Specifies the modifier key to retrieve.
            valid values are: Orange<seealso cref="F:PsionTeklogix.Keyboard.Key.Orange"/>, 
             Blue<seealso cref="F:PsionTeklogix.Keyboard.Key.Blue"/>, Control<seealso cref="F:PsionTeklogix.Keyboard.Key.Control"/>, 
             Shift<seealso cref="F:PsionTeklogix.Keyboard.Key.Shift"/> and Alt<seealso cref="F:PsionTeklogix.Keyboard.Key.Alt"/>.
            </param>
            <returns>
             The current state of the passed modifier key. possible values are
             Off<seealso cref="F:PsionTeklogix.Keyboard.KeyState.Off"/>, OneShot<seealso cref="F:PsionTeklogix.Keyboard.KeyState.OneShot"/>
             and Lock <seealso cref="F:PsionTeklogix.Keyboard.KeyState.Lock"/>
            </returns> 
            <exception cref="T:System.ArgumentException">Thrown when specified modifier is
            invalid.</exception>
            <exception cref="T:System.ApplicationException">Thrown when device doesn't support this
            function.</exception>       
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.OnModifierKeyReceived(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.KeyState)">
            <summary>propagate ModifierKeyEvent</summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.OnLetterKeyProposed(System.Int32)">
            <summary>propagate LetterKeyProposedEvent</summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.OnLetterKeyCompleted">
            <summary>propagate LetterKeyCompletedEvent</summary>        
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.TranslateToScanCode(PsionTeklogix.Keyboard.Key)">
            <summary>
             Translates a device-independent key value (enum Key) to a device-dependent
            scan code that may be used with other keyboard API functions.
            </summary>
            <param name="key">
            [in] Key enum value that specifies the key to be translated. <seealso cref="T:PsionTeklogix.Keyboard.Key"/> 
            </param>
            <returns>
             The device dependent scan code. If device doesn't have this key, it will 
             return ScanCodeNotFound constant. 
            </returns> 
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.SetModifierKeyCycle(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.ModifierKeyCycle)">
            <summary>
            Set the cycle <seealso cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/>
            of a given modifier key.
            </summary>
            <param name="key">
            [in] The modifier key whose cycle mode will be set.
            Valid values are: <see cref="F:PsionTeklogix.Keyboard.Key.Orange"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Blue"/>, <see cref="F:PsionTeklogix.Keyboard.Key.Control"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Shift"/> and <see cref="F:PsionTeklogix.Keyboard.Key.Alt"/>.                      
            </param>
            <param name="cycle">
            [in] The cycle mode to set the modifier key to.
            </param>
            <exception cref="T:System.NotSupportedException">Thrown when device doesn't support this
            function.</exception>       
            <exception cref="T:System.ArgumentException">Thrown when specified modifier is invalid.
            </exception>        
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.GetModifierKeyCycle(PsionTeklogix.Keyboard.Key)">
            <summary>
            Get the cycle <seealso cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/>
            of a given modifier key.
            </summary>
            <param name="key">
            [in] The modifier key whose cycle will be returned.
            Valid values are: <see cref="F:PsionTeklogix.Keyboard.Key.Orange"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Blue"/>, <see cref="F:PsionTeklogix.Keyboard.Key.Control"/>, 
             <see cref="F:PsionTeklogix.Keyboard.Key.Shift"/> and <see cref="F:PsionTeklogix.Keyboard.Key.Alt"/>.              
            </param>
            <exception cref="T:System.NotSupportedException">Thrown when device doesn't support this
            function.</exception>               
            <exception cref="T:System.NotSupportedException">Thrown when device doesn't support this
            function.</exception>       
            <exception cref="T:System.ArgumentException">Thrown when specified modifier is
            invalid.</exception>                        
            <returns>
            The cycle mode of the given modifier key.
            </returns> 
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.InjectKeyboardCommand(PsionTeklogix.Keyboard.Function,System.Int32,PsionTeklogix.Keyboard.CommandFlags)">
             <summary>               
             Simulates a key press.
             </summary>
             <remarks>
            <p> This function is used to fake a keypress and release on a Psion Teklogix 
             device. It does this by allowing an application to directly specify the 
             results of a real keypress/release: a function code and its associated 
             data (if any). The function code and data sent to the keyboard driver are 
             handled directly (backlight up for example), or are converted into 
             a sequence of keypress and release events.</p>
             <p>
             Notes:
             1. Injected keys follow all of the normal rules for real keypresses and 
             releases, and are treated in exactly the same way.</p>        
             <p>2. An Injected modifier key follows the configured <see cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/> 
             modes. (see also <see cref="M:PsionTeklogix.Keyboard.Keyboard.SetModifierKeyCycle(PsionTeklogix.Keyboard.Key,PsionTeklogix.Keyboard.ModifierKeyCycle)"/>).
             In other words, if an 
             application injects the "Orange" key twice by specifying the Function.Orange 
             function code, and the <see cref="T:PsionTeklogix.Keyboard.ModifierKeyCycle"/> mode is "Off_Lock",
             then the Orange key modifier state will switch from Off to Lock 
             and then back to off.
             </p>
             <p>3. Invalid function codes and virtual key values are ignored.</p>
            </remarks>
             
            <example>
             <p> 1. To change Orange modifier state to Lock:</p>
             <code lang="C#">
              using PsionTeklogix.Keyboard;
             
              // Avoid a keyCycle that doesn't have Lock state.
              Keyboard.SetModifierKeyCycle(Key.Orange, ModifierKeyCycle.Off_OneShot_Lock);     
            
              // Clear the keyboard queue, in case there is a pending mode change.
              Keyboard.InjectKeyboardCommand(Function.Skip, 0, CommandFlags.Synchronous);
              // Change the Orange mode to Lock. The user may still change mode by physically 
              // pressing the Orange key.
              while (Keyboard.GetModifierKeyState(Key.Orange) != KeyState.Lock)
              {
                 Keyboard.InjectKeyboardCommand(Function.Orange, 0, CommandFlags.Synchronous);
              }
            </code>
             <p> 2. To simulate the user pressing Shift-1:</p>
             <code lang="C#">
              using PsionTeklogix.Keyboard;
              
              Keyboard.InjectKeyboardCommand(Function.SendShiftedCode, VK.VK_1, 0);         
             </code>
             </example>
             <param name="function">The injected function code.
             </param>
             <param name="data">Data required by given function, if applicable</param>
             <param name="flags"> Operation flags.</param>            
             <exception cref="T:System.ApplicationException">Thrown when device doesn't support 
             this method</exception>
              <exception cref="T:System.ApplicationException">
              Thrown when driver fails to inject keyboard command.
             </exception>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.TranslateToTriggerID(PsionTeklogix.Keyboard.Key)">
            <summary>        
             Translates a key value (enum Keyboard.Key) to a Trigger.TriggerSourceID, 
            to be passed as a parameter to Trigger.TriggerControl.AddMapping() method.
            </summary>
            <param name="key"> a value from Keyboard.Key indicating the key to translate.</param>
            <returns>The trigger ID code.</returns>          
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.ShowIndicator">
            <summary>
            Show keyboard indicator on bottom of screen
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.Keyboard.HideIndicator">
            <summary>
            Hide keyboard indicator on bottom of screen
            </summary>
        </member>
        <member name="E:PsionTeklogix.Keyboard.Keyboard.ModifierKeyEvent">
            <summary>
            Modifier key event. Occurs when user press one modifier key(Alt, Blue,
             Control, Orange or Shift).
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when specified ModifierKeyHandler 
            is invalid.</exception>        
        </member>
        <member name="E:PsionTeklogix.Keyboard.Keyboard.LetterKeyCompletedEvent">
            <summary>
            Some Psion Teklogix mobile computers have an Alpha mode, which allows 
            letters to be typed using the numeric keys. For example, the letter B may be 
            typed by locking down the Alpha key, then pressing the 2 key twice. While 
            typing in letters in this manner, the task bar shows potential letters with 
            each keypress. For example, pressing the 2 key the first time results in A 
            showing in the task bar. Pressing it a second time results in B showing in 
            the task bar. Pressing another key, or waiting for the timeout, clears this 
            letter display and the last potential letter that was displayed is passed to 
            the active application. The task bar feedback is important to the user since 
            it indicates which letter is being typed. If your application hides the task 
            bar, this important feedback is no longer visible. Your application may use 
            this API in order to provide an equivalent feedback mechanism to the user.
            This API provides a way for users to know the potential letter with each 
            keypress.
            </summary>
        </member>
        <member name="E:PsionTeklogix.Keyboard.Keyboard.LetterKeyProposedEvent">
            <summary>
            Some Psion Teklogix mobile computers have an Alpha mode, which allows 
            letters to be typed using the numeric keys. For example, the letter B may be 
            typed by locking down the Alpha key, then pressing the 2 key twice. While 
            typing in letters in this manner, the task bar shows potential letters with 
            each keypress. For example, pressing the 2 key the first time results in A 
            showing in the task bar. Pressing it a second time results in B showing in 
            the task bar. Pressing another key, or waiting for the timeout, clears this 
            letter display and the last potential letter that was displayed is passed to 
            the active application. The task bar feedback is important to the user since 
            it indicates which letter is being typed. If your application hides the task 
            bar, this important feedback is no longer visible. Your application may use 
            this API in order to provide an equivalent feedback mechanism to the user.
            This API provides a way for users to know when letter key is no longer the 
            next potential key
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD">
            <summary>
            Keyboard constants used by GetKeyboardStatus().
            </summary>
            <remarks>
             This enum wraps the return values of GetKeyboardStatus() 
            function in the Windows CE APIs. For more information, please see the MSDN documentation on these values
            at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetkeyboardstatus.asp".
            </remarks>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_PRESENT">
            <summary>
            Indicates whether or not the system has keyboard hardware.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_ENABLED">
            <summary>
            Indicates whether or not the keyboard hardware is enabled. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_ENTER_ESC">
            <summary>
            Indicates whether or not the keyboard hardware has ENTER and ESC keys.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.KBDI_KEYBOARD.KBDI_KEYBOARD_ALPHA_NUM">
            <summary>
            Indicates whether or not the keyboard hardware has alphanumeric keys.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.Keyboard.MSGSRC">
            <summary>
            Source of the Keyboard Message
            </summary>
            <remarks>This enum wraps the GetMessageSource() result values from the Windows CE
            APIs. For more information, please see the MSDN documentation for this function
            at "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wceui40/html/cerefgetmessagesource.asp".
            </remarks>       
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.MSGSRC.MSGSRC_UNKNOWN">
            <summary>
            Indicates that the message source is unknown.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.MSGSRC.MSGSRC_SOFTWARE_POST">
            <summary>
            Indicates that the message source was software.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Keyboard.MSGSRC.MSGSRC_HARDWARE_KEYBOARD">
            <summary>
            Indicates that the message source was the keyboard.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.KeyboardMessageWindow">
            <summary>
            Window message handler for monitoring Keyboard changes.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyboardMessageWindow.#ctor">
            <summary>
            Creates an instance of a KeyboardMessageWindow class.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Keyboard.KeyboardMessageWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Processes windows messages associated with screen changes.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:PsionTeklogix.SystemPTX.ShellSecurityLevelChangeEvent">
            
             A ShellSecurityLevelChangeEvent object is passed to all registered event handlers
             when the shell security level is changed.
            
        </member>
        <member name="P:PsionTeklogix.SystemPTX.ShellSecurityLevelChangeEvent.Description">
            
             Returns a description of the event that occurred.
            
        </member>
        <member name="T:PsionTeklogix.Power.Win32">
            <summary>
            Win32 API definitions.
            </summary>
        </member>
        <member name="T:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE">
            <summary>
            This enumeration describes the device power states. 
            The PwrDeviceUnspecified and PwrDeviceMaximum values are 
            not valid device power states but are used in some Power 
            Manager APIs.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.PwrDeviceUnspecified">
            <summary>
            The system state is unspecified. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D0">
            <summary>
            Full On. This is the state in which the device is on 
            and running. It is receiving full power from the system and is 
            delivering full functionality to the user. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D1">
            <summary>
            Low On. This is the state in which the device is fully 
            functional at a lower power state than D0, a lower 
            performance state than D0, or both. This state is 
            applicable when the device is being used, but where 
            peak performance is unnecessary and power is at a 
            premium. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D2">
            <summary>
            Standby. This is the state in which the device is 
            partially powered with automatic wakeup on request. 
            The device is effectively standing by. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D3">
            <summary>
            Sleep. This is the state in which the device is 
            partially powered with device-initiated wakeup if 
            available. A device in state D3 is sleeping but 
            capable of raising the System Power State on its own. 
            It consumes only enough power to be able to do so; 
            which must be less than or equal to the amount of 
            power used in state D2. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.D4">
            <summary>
            Off. This is the state in which the device is not 
            powered. A device in state D4 should not be consuming 
            any significant power. Some peripheral busses require 
            static terminations that intrinsically use non-zero 
            power when a device is physically connected to the bus;
            a device on such a bus can still support D4. 
            </summary>
        </member>
        <member name="F:PsionTeklogix.Power.Win32.CE_DEVICE_POWER_STATE.PwrDeviceMaximum">
            <summary>
            Valid device power state values are greater than 
            PwrDeviceUnspecified and less than PwrDeviceMaximum. 
            </summary>
        </member>
        <member name="T:PsionTeklogix.Keyboard.Function">
                /// <summary>
                /// The following functions represent various operations that can be performed by
                /// the keyboard driver when a particular scan code is mapped to one of the functions
                /// below.  </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Skip">
            <summary>
            A scan code remapping with the function set to 'Skip' will cause the scan
            code to be ignored. The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Blue">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'Blue' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Orange">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'Orange' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Shift">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'Shift' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Control">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'CTRL' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Alt">
            <summary>
            Causes the remapped scan code to generate the same effects as the 'ALT' button.
            The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendUnshiftedCode">
            <summary>
            This function is used to pass a scan code to virtual key mapping to the
            keyboard driver, but forces the keyboard driver to treat the key as if the
            'SHIFT' key had been released. For example, a mapping of (scancode=0x50,
            virtual key=VK_EQUAL, function=SendUnshiftedCode) would cause the F5 key on
            a 56-key keyboard to generate a '|' key code, If the SHIFT key had not been
            previously pressed, this function will cause a WM_KEYDOWN message to be sent
            for the SHIFT key, followed by a WM_CHAR message for the right-arrow, followed
            by a WM_KEYUP message for the SHIFT key. This function will also release any
            pending one-shots set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendShiftedCode">
            <summary>
            This function is used to pass a scan code to virtual key mapping to the
            keyboard driver, but forces the keyboard driver to treat the key as if the
            'SHIFT' key had been pressed. For example, a mapping of (scancode=0x52,
            virtual key=VK_BACKSLASH, function=SendShiftedCode) would cause the 9 key on
            a 56-key keyboard to generate a '|' key code, If the SHIFT key had not been
            previously pressed, this function will cause a WM_KEYDOWN message to be sent
            for the SHIFT key, followed by a WM_CHAR message for the right-arrow, followed
            by a WM_KEYUP message for the SHIFT key. This function will also release any
            pending one-shots set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendCode">
            <summary>
            SendCode is the standard function used to create a scan code-to-virtual key
            remapping. For example, a mapping of (scancode=0x10, virtual key=VK_F2,
            function=SendCode) would cause the F1 key on a 56-key keyboard to generate a
            virtual key press of VK_F2 that would be passed unmodified to the keyboard driver.
            Existing modifier key states can modify how an application treats the virtual
            key code (i.e. one or more of the following has been pressed: ALT, CTRL, SHIFT,
            BLUE, ORANGE). This function will also release any pending one-shots set for
            any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.ContrastUp">
            <summary>
            Increases the constrast level of the display. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any
            of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.ContrastDown">
            <summary>
            Decreases the constrast level of the display. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.VolumeUp">
            <summary>
            Increases the volume of the beeper/wave device. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.VolumeDown">
            <summary>
            Decreases the volume of the beeper/wave device. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.ScannerOn">
            <summary>
            Generates a trigger press, causing the scanner to fire while the key is held
            down. The virtual key code will be ignored.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.TerminalOff">
            <summary>
            Places the terminal into suspend. The virtual key code will be ignored. This
            function will also release any pending one-shots set for any of the modifier
            keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightCycleUp">
            <summary>
            This function increases the backlight intensity until its maximum is reached.
            The intensity will then roll over to the minimum intensity allowed. The virtual
            key code will be ignored. This function will also release any pending one-shots
            set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Macro">
            <summary>
            This function remaps the selected scan code to a macro. When the scan code is
            generated by a user, it will be mapped to the configured sequence of key
            presses. The virtual key value specified in the remapping should be the index
            of the macro to map to. This function will also release any pending one-shots
            set for any of the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendUnicode">
            <summary>
            Generates a UNICODE character instead of a virtual key, for UNICODE symbols
            that do not have a virtual key equivalent. The virtual key field should
            contain the value of the UNICODE character to be generated.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightBrighter">
            <summary>
            This function increases the backlight intensity. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightDimmer">
            <summary>
            This function increases the backlight intensity. The virtual key code will be
            ignored. This function will also release any pending one-shots set for any of
            the modifier keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.BackLightCycleDown">
            <summary>
            This function decreases the backlight intensity in small steps until the
            minimum backlight intensity is reached. The intensity will then roll over to
            the maximum intensity allowed. The virtual key code will be ignored. This
            function will also release any pending one-shots set for any of the modifier
            keys (CTRL/ALT/SHIFT/BLUE/ORANGE).
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SystemPowerState">
            <summary>
            This function initiates a system reset according to the mode specified in the
            virtual key.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.SendDPadCode">
            <summary>
            This function can be used to alter the behaviour of the enter key, or one
            of the arrow keys on a Psion Teklogix Pocket PC device. If a remapping is
            created using this function for the enter key, it will cause the keyboard's
            enter key to behave like the enter key on a PocketPC DPad. On a PocketPC DPad,
            pressing the Enter key causes a WM_KEYDOWN message with a virtual key code
            of VK_F23 to be generated, followed by a WM_KEYDOWN message with the virtual
            key code of VK_RETURN. When the enter key is released, a WM_KEYUP message
            with the virtual key code VK_RETURN will be generated, followed by a WM_KEYUP
            message with the virtual key code VK_F23 up. This function can also be used
            to change the behaviour of the arrow keys, to make them behave like the arrow
            keys on a PocketPC DPad [a VK_F21 event will be generated in addition to the
            arrow virtual key event].
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.FunctionTrigger">
            <summary>
            Specifies that this scan code will be treated a trigger source (see the
            TriggerControl class). The value supplied with function will be treated
            as the trigger source ID value.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.FunctionWindowsMobileKey">
            <summary>
            This function gives access to keys that exists on Windows Mobile only.
            Currently only the following data is supported when this function is
            specified: VK_APP1,VK_APP2,VK_APP3,VK_APP4,VK_APP5,VK_APP6,VK_DONE.
            The numeric value of these values can be found in winuserm.h.
            </summary>
        </member>
        <member name="F:PsionTeklogix.Keyboard.Function.Unknown">
            Unmapped value(reserved)
            MUST be the last entry in this list 
        </member>
        <member name="T:PsionTeklogix.Barcode.BarcodeSymbology">
            The symbology of the barcode scanned 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.None">
            No symbology present 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code39">
            Code 39 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Codabar">
            Codabar 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code128">
            Code 128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code2of5Straight">
            D25 / Code 2 of 5 (Straight) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.IATA25">
            IATA 25 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Interleaved2of5">
            ITF / Interleaved 2 of 5 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code93">
            Code 93 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCA">
            UPC A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE">
            UPC E 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN8">
            EAN 8 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN13">
            EAN 13 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code11">
            Code 11 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MSIPlessy">
            MSI / Plessey 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN128">
            EAN 128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE1">
            UPC E1 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PDF417">
            PDF-417 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code39FullAscii">
            Code 39 Full Ascii 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Trioptic">
            Trioptic 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Bookland">
            Bookland 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CouponCode">
            Coupon Code 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ISBT128">
            ISBT-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MicroPDF417">
            Micro PDF 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.DataMatrix">
            Data Matrix 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.QRCode">
            QR Code 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalPostNet">
            PostNET (US) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalPlaNet">
            PlaNET (US) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code32">
            Code 32 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ISBT128Concat">
            ISBT-128 Concat 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalJapan">
            Japan Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalAustralia">
            Australian Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalDutch">
            Dutch Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MaxiCode">
            Maxicode 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Postbar">
            Postbar (CA) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalRoyalMail">
            Royal Mail Post (UK) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MacroPDF417">
            Macro PDF-417 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.RSS">
            RSS-14 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.RSSLimited">
            RSS Limited 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.RSSExpanded">
            RSS Expanded 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ParameterFNC3">
            Parameter (FNC3) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.ScanletWebCode">
            Scanlet Webcode 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CueCATCode">
            Cue CAT Code 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCA_2">
            UPC A + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE_2">
            UPC E + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN8_2">
            EAN-8 + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN13_2">
            EAN-13 + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE1_2">
            UPC E1 + 2 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_EAN128">
            Composite CC-A + EAN-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_EAN13">
            Composite CC-A + EAN-13 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_EAN8">
            Composite CC-A + EAN-8 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_RSSExpanded">
            Composite CC-A + RSS Expanded 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_RSSLimited">
            Composite CC-A + RSS Limited 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_RSS">
            Composite CC-A + RSS-14 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_UPCA">
            Composite CC-A + UPC-A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCA_UPCE">
            Composite CC-A + UPC-E 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCC_EAN128">
            Composite CC-C + EAN-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.TLC39">
            TLC-39 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_EAN128">
            Composite CC-B + EAN-128 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_EAN13">
            Composite CC-B + EAN-13 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_EAN8">
            Composite CC-B + EAN-8 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_RSSExpanded">
            Composite CC-B + RSS Expanded 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_RSSLimited">
            Composite CC-B + RSS Limited 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_RSS">
            Composite CC-B + RSS-14 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_UPCA">
            Composite CC-B + UPC-A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CompositeCCB_UPCE">
            Composite CC-B + UPC-E 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCA_5">
            UPC A + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE_5">
            UPC E + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN8_5">
            EAN-8 + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN13_5">
            EAN-13 + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPCE1_5">
            UPC E1 + 5 (addendum) 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.MacroMicroPDF">
            Macro Micro PDF 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.UPC_EAN">
            Undetermined UPC/EAN catch-all 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalKorea">
            Korean Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Aztec2D">
            2-D Aztec scanner 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Matrix25">
            Matrix 2 of 5 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Telepen">
            Telepen 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CodablockA">
            Codablock A 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.CodablockF">
            Codablock F 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PosiCode">
            PosiCode 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code16K">
            Code 16K 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.Code49">
            Code 49 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.EAN_UCC">
            EAN-UCC Composite 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalCanadian">
            Canadian Post 
        </member>
        <member name="F:PsionTeklogix.Barcode.BarcodeSymbology.PostalChina">
            China Post 
        </member>
        <member name="T:PsionTeklogix.Barcode.ScanCompleteEventArgs">
            <summary>
            Arguments for the Scan Complete event handler.
            </summary>
        </member>
        <member name="M:PsionTeklogix.Barcode.ScanCompleteEventArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Creates a new instance of the ScanCompleteEventArgs.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="codeIdentifier">A barcode type identifier.</param>
            <param name="textData">Text representation of the data.</param>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.Text">
            <summary>
            Gets a text representation of the barcode that was scanned.
            </summary>
            <remarks><seealso cref="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.RawData"/></remarks>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.RawData">
            <summary>
            Gets a raw representation of the barcode as a byte array.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.CodeIdentifier">
            <summary>
            Gets a code corresponding to the type of barcode that was scanned.
            </summary>
        </member>
        <member name="P:PsionTeklogix.Barcode.ScanCompleteEventArgs.Symbology">
            <summary>
            Determines the symbology of the barcode scanned, as an enumerated value.
            </summary>
            <remarks>
            See the BarcodeSymbology enumeration for a list of possible values.
            </remarks>
            <returns>
            The symbology of the barcode scanned, as an enumerated value.
            </returns>
        </member>
    </members>
</doc>
